	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$F0        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$05
	                            BONUS_FRAMES    = #$06
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4004
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           sprites_update_position  .dsb 1
00036                           
00036                           ;; Lock block space helper variable
00036                           ;; When the ball hits a lock block, it should only move if the space
00036                           ;; where it moves to, is not solid. This variable holds the metatile
00036                           ;; offset of the position where the lock block should move to, so
00036                           ;; we can check if it is solid or not.
00036                           ;;
00036                           ;; UP:    #%11110000 #$F0
00036                           ;; DOWN:  #%00010000 #$10
00036                           ;; LEFT:  #%11111111 #$FF
00036                           ;; RIGHT: #%00000001 #$01
00036                           ;;        #%d......h
00036                           move_block_space_to_check  .dsb 1
00037                           
00037                           
00037                           ;; Ball flags
00037                           ;; #% c c c v . f n a
00037                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00037                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00037                           ;;    | | | | | +------ ball is frozen (not moving)
00037                           ;;    | | | | +-------- (unused for now)
00037                           ;;    | | | +---------- ball moves up (0) or down (1)
00037                           ;;    +-+-+------------ ball color (1-6)
00037                           ball_flags             .dsb 1
00038                           
00038                           
00038                           ;; Screen mode
00038                           ;; #% u . . . . . t t
00038                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00038                           ;;    | +-+-+-+-+------------- unused
00038                           ;;    +----------------------- should the screen update
00038                           screen_mode            .dsb 1
00039                           
00039                           
00039                           
00039                           ;; PPU buffer variables
00039                           ppu_buffer_update      .dsb 1
0003A                           ppu_buffer_pointer     .dsb 1
0003B                           
0003B                           ;; Pointer to keep track of the number of explosions
0003B                           explosion_pointer      .dsb 1
0003C                           
0003C                           ;; Pointer to keep track of the number of move blocks
0003C                           move_block_pointer     .dsb 1
0003D                           
0003D                           ;; Sprite RAM pointer to keep track of sprites to update
0003D                           sprite_ram_pointer     .dsb 1
0003E                           
0003E                           ;; Counters 
0003E                           nudge_timer            .dsb 1
0003F                           bonus_timer            .dsb 1
00040                           kill_timer             .dsb 1
00041                           
00041                           ;; Current level (doubles as level select variable)
00041                           current_level          .dsb 1
00042                           
00042                           ;; Tile type the ball is currently colliding with
00042                           colliding_tile         .dsb 1
00043                           
00043                           ;; Number of blocks left on screen
00043                           blocks_left            .dsb 1
00044                           
00044                           ;; Sound control variables
00044                           max_noise              .dsb 1
00045                           sweep_noise            .dsb 1
00046                           current_noise          .dsb 1
00047                           noise_timer            .dsb 1
00048                           do_beeps               .dsb 1
00049                           
00049                           ;; Additional NMI check for timed PPU fade
00049                           check_nmi              .dsb 1
0004A                               0004A                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 2A C5                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 2A C5                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 38                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 41                         STA current_level
0C057                           
0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 3D                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 0D C5                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 38                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 38                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 B3 D0                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 B0 D0                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 51 C6                      JSR sub_DisableRendering
0C08A 20 57 C9                      JSR sub_JumpToPointer
0C08D 20 65 C6                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 38                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 38                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; Check if we're on the game screen
0C096 A5 38                         LDA screen_mode
0C098 C9 01                         CMP #IS_GAME_SCREEN
0C09A F0 03                         BEQ +
0C09C 4C FD C3                          JMP +checkNextScreen
0C09F                               +
0C09F                           
0C09F                               ;; Load sprite 0 in place
0C09F A9 28                         LDA #$28
0C0A1 8D 00 02                      STA ADDR_SPRITERAM
0C0A4 A9 0F                         LDA #$0F
0C0A6 8D 01 02                      STA ADDR_SPRITERAM+1
0C0A9 A9 22                         LDA #$22
0C0AB 8D 02 02                      STA ADDR_SPRITERAM+2
0C0AE A9 F8                         LDA #$F8
0C0B0 8D 03 02                      STA ADDR_SPRITERAM+3
0C0B3 A9 04                         LDA #$04
0C0B5 85 3D                         STA sprite_ram_pointer
0C0B7                           
0C0B7                               ;; We're on the game screen
0C0B7                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0B7 A5 35                         LDA sprites_update_position
0C0B9 F0 03                         BEQ +
0C0BB 4C D8 C2                          JMP +skipSpriteMovement
0C0BE                               +
0C0BE                           
0C0BE                               ;; Check if ball is frozen
0C0BE A5 37                         LDA ball_flags
0C0C0 29 04                         AND #BALL_IS_FROZEN
0C0C2 F0 03                         BEQ +
0C0C4 4C 97 C2                          JMP +skipBallMovement
0C0C7                               +
0C0C7                           
0C0C7                               ;; Move the ball
0C0C7                               .include "game/include/main/move_ball.asm"
0C0C7                           
0C0C7                               ;; Check if ball goes up or down
0C0C7 A5 37                         LDA ball_flags
0C0C9 29 10                         AND #BALL_MOVES_DOWN
0C0CB F0 2B                         BEQ +moveBallUp
0C0CD                           
0C0CD                           
0C0CD                           +moveBallDown:
0C0CD                               ;; update the low byte
0C0CD A5 1A                         LDA ball_ypos_lo
0C0CF 85 1C                         STA ball_ypos_lo_prev
0C0D1 18                            CLC
0C0D2 69 F0                         ADC #BALL_SPEED_LO
0C0D4 85 1A                         STA ball_ypos_lo
0C0D6                           
0C0D6                               ;; update the high byte with carry
0C0D6 A5 19                         LDA ball_ypos_hi
0C0D8 85 1B                         STA ball_ypos_hi_prev
0C0DA 69 01                         ADC #BALL_SPEED_HI
0C0DC 85 19                         STA ball_ypos_hi
0C0DE                               
0C0DE                               ;; Check bottom bound
0C0DE C9 C8                         CMP #BOUND_BOTTOM
0C0E0 90 3C                         BCC +checkHorizontalMovement
0C0E2 F0 3A                         BEQ +checkHorizontalMovement
0C0E4                           
0C0E4                           
0C0E4                               ;; Change ball direction to "up"
0C0E4 A9 C8                         LDA #BOUND_BOTTOM
0C0E6 38                            SEC
0C0E7 E9 01                         SBC #$01
0C0E9 85 19                         STA ball_ypos_hi
0C0EB A9 00                         LDA #$00
0C0ED 85 1A                         STA ball_ypos_lo
0C0EF A5 37                         LDA ball_flags
0C0F1 29 EF                         AND #MOVE_BALL_UP
0C0F3 85 37                         STA ball_flags
0C0F5 4C 1E C1                      JMP +checkHorizontalMovement
0C0F8                           
0C0F8                           
0C0F8                           +moveBallUp:
0C0F8                               ;; update the low byte
0C0F8 A5 1A                         LDA ball_ypos_lo
0C0FA 85 1C                         STA ball_ypos_lo_prev
0C0FC 38                            SEC
0C0FD E9 F0                         SBC #BALL_SPEED_LO
0C0FF 85 1A                         STA ball_ypos_lo
0C101                           
0C101                               ;; update the high byte with carry
0C101 A5 19                         LDA ball_ypos_hi
0C103 85 1B                         STA ball_ypos_hi_prev
0C105 E9 01                         SBC #BALL_SPEED_HI
0C107 85 19                         STA ball_ypos_hi
0C109                               
0C109                               ;; Check top bound
0C109 C9 30                         CMP #BOUND_TOP
0C10B B0 11                         BCS +checkHorizontalMovement
0C10D                           
0C10D                               ;; Change ball direction to "down"
0C10D A9 30                         LDA #BOUND_TOP
0C10F 18                            CLC
0C110 69 01                         ADC #$01
0C112 85 19                         STA ball_ypos_hi
0C114 A9 00                         LDA #$00
0C116 85 1A                         STA ball_ypos_lo
0C118 A5 37                         LDA ball_flags
0C11A 09 10                         ORA #MOVE_BALL_DOWN
0C11C 85 37                         STA ball_flags
0C11E                           
0C11E                           
0C11E                           +checkHorizontalMovement:
0C11E                           
0C11E                               ;; Check if ball is being nudged
0C11E A5 3E                         LDA nudge_timer
0C120 D0 41                         BNE +doneBallMovement
0C122                           
0C122                               ;; Check if left button is held
0C122 A5 0F                         LDA buttons_held
0C124 29 02                         AND #BUTTON_LEFT
0C126 F0 1B                         BEQ +
0C128                                   ;; update the low byte
0C128 A5 18                             LDA ball_xpos_lo
0C12A 38                                SEC
0C12B E9 F0                             SBC #BALL_SPEED_LO
0C12D 85 18                             STA ball_xpos_lo
0C12F                           
0C12F                                   ;; update the high byte
0C12F A5 17                             LDA ball_xpos_hi
0C131 E9 01                             SBC #BALL_SPEED_HI
0C133 85 17                             STA ball_xpos_hi
0C135                                   
0C135                                   ;; Check left bound
0C135 C9 10                             CMP #BOUND_LEFT
0C137 B0 2A                             BCS +doneBallMovement
0C139                                   
0C139                                   ;; Set flag to nudge right and set nudge timer
0C139 A5 37                             LDA ball_flags
0C13B 09 02                             ORA #NUDGE_BALL_RIGHT
0C13D 20 50 C9                          JSR sub_InitiateNudge
0C140                           
0C140 4C 63 C1                          JMP +doneBallMovement        
0C143                               +
0C143                           
0C143                               ;; Check if right button is held
0C143 A5 0F                         LDA buttons_held
0C145 29 01                         AND #BUTTON_RIGHT
0C147 F0 1A                         BEQ +
0C149                                   ;; update the low byte
0C149 A5 18                             LDA ball_xpos_lo
0C14B 18                                CLC
0C14C 69 F0                             ADC #BALL_SPEED_LO
0C14E 85 18                             STA ball_xpos_lo
0C150                           
0C150                                   ;; update the high byte
0C150 A5 17                             LDA ball_xpos_hi
0C152 69 01                             ADC #BALL_SPEED_HI
0C154 85 17                             STA ball_xpos_hi     
0C156                           
0C156                                  ;; Check right bound
0C156 C9 E8                             CMP #BOUND_RIGHT
0C158 90 09                             BCC +doneBallMovement
0C15A F0 07                             BEQ +doneBallMovement
0C15C                                   
0C15C                                   ;; Set flag to nudge left and set nudge timer
0C15C A5 37                             LDA ball_flags
0C15E 29 FD                             AND #NUDGE_BALL_LEFT
0C160 20 50 C9                          JSR sub_InitiateNudge
0C163                               +
0C163                           
0C163                           
0C163                           +doneBallMovement:
0C163                           
0C163                               ;; Check nudge
0C163 A5 3E                         LDA nudge_timer
0C165 F0 23                         BEQ +doneBallNudging
0C167 A5 37                             LDA ball_flags
0C169 29 02                             AND #NUDGE_BALL_RIGHT
0C16B F0 10                             BEQ +nudgeBallLeft
0C16D                                   
0C16D                                       ;; update the low byte
0C16D A5 18                                 LDA ball_xpos_lo
0C16F 18                                    CLC
0C170 69 F0                                 ADC #BALL_SPEED_LO
0C172 85 18                                 STA ball_xpos_lo
0C174                           
0C174                                       ;; update the high byte
0C174 A5 17                                 LDA ball_xpos_hi
0C176 69 01                                 ADC #BALL_SPEED_HI
0C178 85 17                                 STA ball_xpos_hi  
0C17A 4C 8A C1                              JMP +doneBallNudging
0C17D                                   +nudgeBallLeft:
0C17D                                   
0C17D                                   ;; update the low byte
0C17D A5 18                             LDA ball_xpos_lo
0C17F 38                                SEC
0C180 E9 F0                             SBC #BALL_SPEED_LO
0C182 85 18                             STA ball_xpos_lo
0C184                           
0C184                                   ;; update the high byte
0C184 A5 17                             LDA ball_xpos_hi
0C186 E9 01                             SBC #BALL_SPEED_HI
0C188 85 17                             STA ball_xpos_hi
0C18A                               +doneBallNudging:
0C18A                           
0C18A                               ;; Don't update position again until next frame
0C18A                               ;; (moved to after move block routine)
0C18A                           
0C18A                           +doneBallHandling:0C18A                               
0C18A                               ;; Do collision detection
0C18A                               .include "game/include/main/collision_detection.asm"
0C18A                           
0C18A                               ;; Get ball's x-left, x-center, x-right position
0C18A A5 17                         LDA ball_xpos_hi
0C18C 18                            CLC
0C18D 69 F0                         ADC #BALL_LEFT_WGA
0C18F 85 2F                         STA ball_left
0C191 18                            CLC
0C192 69 04                         ADC #BALL_HALF_SIZE
0C194 85 30                         STA ball_center
0C196 18                            CLC
0C197 69 04                         ADC #BALL_HALF_SIZE
0C199 85 31                         STA ball_right
0C19B                           
0C19B                               ;; Get ball's y-top, y-middle, y-bottom position
0C19B A5 19                         LDA ball_ypos_hi
0C19D 18                            CLC
0C19E 69 D0                         ADC #BALL_TOP_WGA
0C1A0 85 32                         STA ball_top
0C1A2 18                            CLC
0C1A3 69 04                         ADC #BALL_HALF_SIZE
0C1A5 85 33                         STA ball_middle
0C1A7 18                            CLC
0C1A8 69 04                         ADC #BALL_HALF_SIZE
0C1AA 85 34                         STA ball_bottom
0C1AC                           
0C1AC                           +checkRightCollision:
0C1AC                               ;; Check if ball moves right
0C1AC                               ;; No need to check nudging here as that will never collide with a tile
0C1AC A5 0F                         LDA buttons_held
0C1AE 29 01                         AND #BUTTON_RIGHT
0C1B0 F0 20                         BEQ +checkLeftCollision
0C1B2                           
0C1B2                               ;; Check tile at right position
0C1B2 A5 33                         LDA ball_middle
0C1B4 85 00                         STA temp
0C1B6 A5 31                         LDA ball_right
0C1B8 85 01                         STA temp+1
0C1BA 20 39 C6                      JSR sub_ConvertXYToTileType
0C1BD 29 01                         AND #TILE_IS_SOLID
0C1BF F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1C1                           
0C1C1                               ;; Nudge ball and evaluate tile type
0C1C1 A9 01                         LDA #$01
0C1C3 85 36                         STA move_block_space_to_check
0C1C5 A5 37                         LDA ball_flags
0C1C7 29 FD                         AND #NUDGE_BALL_LEFT
0C1C9 20 50 C9                      JSR sub_InitiateNudge
0C1CC 20 C7 C7                      JSR sub_EvaluateTileType
0C1CF 4C F5 C1                      JMP +checkTopCollision
0C1D2                           
0C1D2                           +checkLeftCollision:
0C1D2                               ;; Check if ball moves right
0C1D2                               ;; No need to check nudging here as that will never collide with a tile
0C1D2 A5 0F                         LDA buttons_held
0C1D4 29 02                         AND #BUTTON_LEFT
0C1D6 F0 1D                         BEQ +checkTopCollision
0C1D8                           
0C1D8                               ;; Check tile at right position
0C1D8 A5 33                         LDA ball_middle
0C1DA 85 00                         STA temp
0C1DC A5 2F                         LDA ball_left
0C1DE 85 01                         STA temp+1
0C1E0 20 39 C6                      JSR sub_ConvertXYToTileType
0C1E3 29 01                         AND #TILE_IS_SOLID
0C1E5 F0 0E                         BEQ +checkTopCollision
0C1E7                           
0C1E7                               ;; Tile is solid; nudge ball and evaluate tile type
0C1E7 A9 FF                         LDA #$FF
0C1E9 85 36                         STA move_block_space_to_check
0C1EB A5 37                         LDA ball_flags
0C1ED 09 02                         ORA #NUDGE_BALL_RIGHT
0C1EF 20 50 C9                      JSR sub_InitiateNudge
0C1F2 20 C7 C7                      JSR sub_EvaluateTileType
0C1F5                               
0C1F5                               
0C1F5                           +checkTopCollision:
0C1F5                               ;; Check if ball moves up
0C1F5 A5 37                         LDA ball_flags
0C1F7 29 10                         AND #BALL_MOVES_DOWN
0C1F9 D0 27                         BNE +checkBottomCollision
0C1FB                           
0C1FB                               ;; Check tile at top position
0C1FB A5 32                         LDA ball_top
0C1FD 85 00                         STA temp
0C1FF A5 30                         LDA ball_center
0C201 85 01                         STA temp+1
0C203 20 39 C6                      JSR sub_ConvertXYToTileType
0C206 29 01                         AND #TILE_IS_SOLID
0C208 F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C20A                           
0C20A                               ;; Tile is solid; move ball down and evaluate tile type
0C20A A5 1C                         LDA ball_ypos_lo_prev
0C20C 85 1A                         STA ball_ypos_lo
0C20E A5 1B                         LDA ball_ypos_hi_prev
0C210 85 19                         STA ball_ypos_hi
0C212 A5 37                         LDA ball_flags
0C214 09 10                         ORA #MOVE_BALL_DOWN
0C216 85 37                         STA ball_flags
0C218                           
0C218 A9 F0                         LDA #$F0 ; which is -16
0C21A 85 36                         STA move_block_space_to_check
0C21C 20 C7 C7                      JSR sub_EvaluateTileType
0C21F 4C 46 C2                      JMP +doneCheckingCollision
0C222                           
0C222                           +checkBottomCollision:
0C222                               ;; No movement check needed: since ball is not moving up, it must move down
0C222                           
0C222                               ;; Check tile at bottom position
0C222 A5 34                         LDA ball_bottom
0C224 85 00                         STA temp
0C226 A5 30                         LDA ball_center
0C228 85 01                         STA temp+1
0C22A 20 39 C6                      JSR sub_ConvertXYToTileType
0C22D 29 01                         AND #TILE_IS_SOLID
0C22F F0 15                         BEQ +doneCheckingCollision
0C231                           
0C231                               ;; Tile is solid; move ball up and evaluate tile type
0C231 A5 1C                         LDA ball_ypos_lo_prev
0C233 85 1A                         STA ball_ypos_lo
0C235 A5 1B                         LDA ball_ypos_hi_prev
0C237 85 19                         STA ball_ypos_hi
0C239 A5 37                         LDA ball_flags
0C23B 29 EF                         AND #MOVE_BALL_UP
0C23D 85 37                         STA ball_flags
0C23F                           
0C23F A9 10                         LDA #$10
0C241 85 36                         STA move_block_space_to_check
0C243 20 C7 C7                      JSR sub_EvaluateTileType
0C246                           
0C246                           +doneCheckingCollision:
0C246                           
0C246                               
0C246                               ;; Update bonus
0C246                               .include "game/include/main/update_bonus.asm"
0C246                           ;; update_bonus.asm
0C246                           
0C246                               ;; If bonus = 000, skip decreasing
0C246 A5 2C                         LDA ball_bonus
0C248 18                            CLC
0C249 65 2D                         ADC ball_bonus+1
0C24B 18                            CLC
0C24C 65 2E                         ADC ball_bonus+2
0C24E F0 33                         BEQ +done
0C250                           
0C250                               ;; Check if bonus timer is done yet
0C250 A5 3F                         LDA bonus_timer
0C252 D0 2F                         BNE +done
0C254                           
0C254                               ;; Bonus timer is done
0C254                               ;; Reset bonus timer
0C254 A9 06                         LDA #BONUS_FRAMES
0C256 85 3F                         STA bonus_timer
0C258                               
0C258                               ;; Subtract one from ball bonus ones
0C258 C6 2E                         DEC ball_bonus+2
0C25A                               
0C25A                               ;; Check if underflow
0C25A 10 0E                         BPL +updateBonusOnScreen
0C25C                           
0C25C                               ;; If underflow, set 9 and subtract one from bonus tens
0C25C A9 09                         LDA #$09
0C25E 85 2E                         STA ball_bonus+2
0C260 C6 2D                         DEC ball_bonus+1
0C262                               
0C262                               ;; Check if underflow
0C262 10 06                         BPL +updateBonusOnScreen
0C264                           
0C264                               ;; If underflow, set 9 and subtract one from bonus hundreds
0C264 A9 09                         LDA #$09
0C266 85 2D                         STA ball_bonus+1
0C268 C6 2C                         DEC ball_bonus
0C26A                           
0C26A                               ;;209A 209B 209C
0C26A                           +updateBonusOnScreen:
0C26A A9 20                         LDA #$20
0C26C 85 00                         STA temp
0C26E A9 9C                         LDA #$9C
0C270 85 01                         STA temp+1
0C272 A2 02                         LDX #$02
0C274                               
0C274                               -updateNextDigit:
0C274 B5 2C                             LDA ball_bonus,x
0C276 18                                CLC
0C277 69 01                             ADC #$01
0C279 85 02                             STA temp+2
0C27B 20 46 CF                          JSR sub_WriteByteToPPUBuffer
0C27E C6 01                             DEC temp+1
0C280 CA                                DEX
0C281 10 F1                         BPL -updateNextDigit
0C283                                   
0C283                           +done:0C283                               
0C283                               ;; Input test for beeps
0C283                               .include "game/test/input_beeps.asm"
0C283 A5 10                         LDA buttons_pressed
0C285 29 20                         AND #BUTTON_SELECT
0C287 F0 04                         BEQ +
0C289 A9 01                             LDA #$01
0C28B 85 48                             STA do_beeps
0C28D                               +
0C28D                               
0C28D A5 11                         LDA buttons_released
0C28F 29 20                         AND #BUTTON_SELECT
0C291 F0 04                         BEQ +
0C293 A9 02                             LDA #$02
0C295 85 48                             STA do_beeps
0C297                               +0C297                           
0C297                           
0C297                           +skipBallMovement:
0C297                               ;; Move blocks a pixel up/down/left/right
0C297                               .include "game/include/main/move_blocks.asm"
0C297                           
0C297                               ;; Set up block loop
0C297 A2 04                         LDX #MAX_ANIMATIONS
0C299                           -moveBlocksLoop:
0C299 CA                            DEX
0C29A                           
0C29A                               ;; Check if block is still moving
0C29A BD 80 03                      LDA move_block_timer,x
0C29D F0 33                         BEQ +checkNext
0C29F                               
0C29F                               ;; Check if block is done moving
0C29F C9 01                         CMP #$01
0C2A1 D0 0B                         BNE +
0C2A3                                   ;; If so, draw a tile and remove the sprite
0C2A3 20 92 C6                          JSR sub_DrawMoveTile
0C2A6 A9 00                             LDA #$00
0C2A8 9D 80 03                          STA move_block_timer,x
0C2AB 4C D2 C2                          JMP +checkNext
0C2AE                               +
0C2AE                               
0C2AE                               ;; Check in which direction the block is moving
0C2AE                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C2AE BD 88 03                      LDA move_block_flags,x
0C2B1 29 03                         AND #%00000011
0C2B3 F0 14                         BEQ +movingDown
0C2B5 C9 01                         CMP #$01
0C2B7 F0 0A                         BEQ +movingUp
0C2B9 C9 02                         CMP #$02
0C2BB F0 12                         BEQ +movingRight
0C2BD                               
0C2BD                               ;; Move block in correct direction
0C2BD                               +movingLeft:
0C2BD DE 78 03                      DEC move_block_x,x
0C2C0 4C D2 C2                      JMP +checkNext
0C2C3                           
0C2C3                               +movingUp:
0C2C3 DE 7C 03                      DEC move_block_y,x
0C2C6 4C D2 C2                      JMP +checkNext
0C2C9                           
0C2C9                               +movingDown:
0C2C9 FE 7C 03                      INC move_block_y,x
0C2CC 4C D2 C2                      JMP +checkNext
0C2CF                           
0C2CF                               +movingRight:
0C2CF FE 78 03                      INC move_block_x,x
0C2D2                           
0C2D2                               ;; Check next block (if any left)
0C2D2                               +checkNext:
0C2D2 E0 00                         CPX #$00
0C2D4 D0 C3                         BNE -moveBlocksLoop
0C2D6                               
0C2D6                               ;; Don't update sprites
0C2D6 E6 35                         INC sprites_update_position
0C2D8                           
0C2D8                           +skipSpriteMovement:
0C2D8                               ;; Testing timed PPU scroll concept
0C2D8                               .include "game/test/timed_ppuscroll_test.asm"
0C2D8                           ;; Timed updates (test)
0C2D8                           
0C2D8                               ;; If B button is pressed
0C2D8 A5 10                         LDA buttons_pressed
0C2DA 29 10                         AND #BUTTON_START
0C2DC D0 03                         BNE +
0C2DE 4C 63 C3                          JMP +end
0C2E1                               +
0C2E1                           
0C2E1                           lbl_initiate_level_load:
0C2E1                               ;; Disable noise channel
0C2E1 A9 00                         LDA #$00
0C2E3 8D 15 40                      STA APU_STATUS
0C2E6 8D 0C 40                      STA NOISE_VOLUME
0C2E9                               
0C2E9                               ;; Set up loop fading
0C2E9 A9 00                         LDA #$00
0C2EB 85 07                         STA temp+7
0C2ED A0 08                         LDY #$08
0C2EF                               -fadeLoop:
0C2EF 84 08                             STY temp+8
0C2F1                           
0C2F1                                   ;; Wait for NMI to pass
0C2F1 20 21 C5                          JSR sub_WaitForNMI
0C2F4                                   
0C2F4                                   ;; Now wait for No-sprite 0
0C2F4                                   -
0C2F4 AD 02 20                              LDA PPU_STATUS
0C2F7 29 40                                 AND #SPRITE_0_HIT
0C2F9 D0 F9                             BNE -
0C2FB                               
0C2FB                                   ;; Now wait for Sprite 0
0C2FB                                   -
0C2FB AD 02 20                              LDA PPU_STATUS
0C2FE 29 40                                 AND #SPRITE_0_HIT
0C300 F0 F9                             BEQ -
0C302                                       
0C302                                   ;; Setup tile row loop
0C302 A0 16                             LDY #22
0C304                                   -tileLoop:
0C304                                   
0C304                                       ;; Disable drawing
0C304 A5 12                                 LDA soft_ppu_mask
0C306 29 F7                                 AND #%11110111
0C308 8D 01 20                              STA PPU_MASK
0C30B                                       
0C30B                                       ;; Set up scanline loop
0C30B A2 08                                 LDX #$08
0C30D                                       -scanlineLoop:
0C30D E4 08                                     CPX temp+8
0C30F D0 0A                                     BNE +wasteTime
0C311                                           
0C311                                           ;; Restore drawing
0C311 A5 12                                     LDA soft_ppu_mask
0C313 09 08                                     ORA #%00001000
0C315 8D 01 20                                  STA PPU_MASK
0C318 4C 21 C3                                  JMP +wasteMoreTime
0C31B                           
0C31B                                           ;; Waste 12 frames
0C31B                                           +wasteTime:
0C31B E6 09                                     INC temp+9   ;+5
0C31D C6 09                                     DEC temp+9   ;+5
0C31F 49 00                                     EOR #$00     ;+2
0C321                                           
0C321                                           ;; Waste about 100 frames
0C321                                           +wasteMoreTime:
0C321                                           
0C321 86 01                                     STX temp+1     ;  3 down, 97 to go
0C323 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C325                                           -wasteLoop:
0C325 EA                                            NOP
0C326 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C328 CA                                            DEX        ;  5+5L down,  95-5L to go
0C329 D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C32B                           
0C32B A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C32D CA                                        DEX            ;  9+8L down, 91-8L to go
0C32E D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C330                           
0C330 88                                    DEY
0C331 D0 D1                             BNE -tileLoop
0C333                           
0C333 A4 08                             LDY temp+8
0C335                                   
0C335 E6 07                             INC temp+7
0C337 A5 07                             LDA temp+7
0C339 C9 02                             CMP #$02
0C33B D0 B2                             BNE -fadeLoop
0C33D                           
0C33D A9 00                             LDA #$00
0C33F 85 07                             STA temp+7
0C341 88                                DEY
0C342 D0 AB                         BNE -fadeLoop
0C344                               
0C344                               ;; Load the next level if ball not dead
0C344 A5 37                         LDA ball_flags
0C346 29 01                         AND #BALL_IS_DEAD
0C348 D0 05                         BNE +
0C34A E6 41                             INC current_level
0C34C 4C 55 C3                          JMP +loadLevel
0C34F                               +
0C34F                               
0C34F                               ;; Revive ball
0C34F A5 37                         LDA ball_flags
0C351 29 FE                         AND #REVIVE_BALL
0C353 85 37                         STA ball_flags
0C355                           
0C355                           +loadLevel:
0C355 A5 41                         LDA current_level
0C357 C9 19                         CMP #25
0C359 D0 04                         BNE +
0C35B A9 00                             LDA #$00
0C35D 85 41                             STA current_level
0C35F                               +
0C35F                               
0C35F A9 81                         LDA #LOAD_GAME_SCREEN
0C361 85 38                         STA screen_mode
0C363                           
0C363                           
0C363                           +end:
0C363                           
0C363                               ;; Check if ball is dead
0C363 A5 37                         LDA ball_flags
0C365 29 01                         AND #BALL_IS_DEAD
0C367 F0 03                         BEQ +
0C369 4C 8B C3                          JMP +ballIsDead
0C36C                               +
0C36C                               
0C36C                               ;; Add ball to sprite buffer
0C36C A6 3D                         LDX sprite_ram_pointer
0C36E A5 19                         LDA ball_ypos_hi
0C370 9D 00 02                      STA ADDR_SPRITERAM,x
0C373 E8                            INX
0C374 A9 01                         LDA #BALL_TILE_CHR
0C376 9D 00 02                      STA ADDR_SPRITERAM,x
0C379 E8                            INX
0C37A A9 00                         LDA #BALL_ATTR
0C37C 9D 00 02                      STA ADDR_SPRITERAM,x
0C37F E8                            INX
0C380 A5 17                         LDA ball_xpos_hi
0C382 9D 00 02                      STA ADDR_SPRITERAM,x
0C385 E8                            INX
0C386 86 3D                         STX sprite_ram_pointer
0C388 4C 9C C3                      JMP +drawBlocks
0C38B                           
0C38B                           +ballIsDead:
0C38B                               ;; Check if kill timer has reset
0C38B A5 40                         LDA kill_timer
0C38D F0 03                         BEQ +
0C38F 4C 9C C3                          JMP +drawBlocks
0C392                               +
0C392                               
0C392                               ;; Take a live
0C392 C6 1F                         DEC ball_lives
0C394 D0 03                         BNE +
0C396                                   ;; If no lives left, initiate game over sequence
0C396 20 1D C9                          JSR sub_GameOver
0C399                               +
0C399                               
0C399                               ;; Reload current level
0C399 4C E1 C2                      JMP lbl_initiate_level_load ; declared in game/test/timed_ppuscroll_test.asm
0C39C                           
0C39C                           
0C39C                           +drawBlocks:
0C39C                               ;; Draw moving block(s, if any)
0C39C                               .include "game/include/main/draw_blocks.asm"
0C39C                           ;; Handle movement of move blocks
0C39C                           
0C39C                               ;; Set up a loop
0C39C A0 04                         LDY #MAX_ANIMATIONS
0C39E                           -drawBlocksLoop:
0C39E 88                            DEY
0C39F                           
0C39F                               ;; If timer is zero, check the next move block
0C39F B9 80 03                      LDA move_block_timer,y
0C3A2 F0 52                         BEQ +nextMoveBlock
0C3A4                               
0C3A4                               ;; Get current sprite pointer
0C3A4 A6 3D                         LDX sprite_ram_pointer
0C3A6                           
0C3A6                               ;; Draw the sprites on screen
0C3A6 B9 7C 03                      LDA move_block_y,y
0C3A9 9D 00 02                      STA ADDR_SPRITERAM,x
0C3AC 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C3AF 18                            CLC
0C3B0 69 08                         ADC #$08
0C3B2 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C3B5 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C3B8 E8                            INX
0C3B9                           
0C3B9 A9 52                         LDA #$52 ; Top left chr id
0C3BB 9D 00 02                      STA ADDR_SPRITERAM,x
0C3BE A9 53                         LDA #$53 ; Top right chr id
0C3C0 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C3C3 A9 62                         LDA #$62 ; Bottom left chr id
0C3C5 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C3C8 A9 63                         LDA #$63 ; Bottom right chr id
0C3CA 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C3CD E8                            INX
0C3CE                           
0C3CE A9 00                         LDA #BALL_ATTR
0C3D0 9D 00 02                      STA ADDR_SPRITERAM,x
0C3D3 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C3D6 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C3D9 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C3DC E8                            INX
0C3DD                           
0C3DD B9 78 03                      LDA move_block_x,y
0C3E0 9D 00 02                      STA ADDR_SPRITERAM,x
0C3E3 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C3E6 18                            CLC
0C3E7 69 08                         ADC #$08
0C3E9 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C3EC 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C3EF                           
0C3EF                               ;; Update sprite RAM pointer
0C3EF A5 3D                         LDA sprite_ram_pointer
0C3F1 18                            CLC
0C3F2 69 10                         ADC #$10
0C3F4 85 3D                         STA sprite_ram_pointer
0C3F6                           
0C3F6                           
0C3F6                           
0C3F6                           +nextMoveBlock:
0C3F6                               ;; Check the next move block
0C3F6 C0 00                         CPY #$00
0C3F8 D0 A4                         BNE -drawBlocksLoop
0C3FA                           
0C3FA 4C 49 C4                      JMP +doneScreenLoad
0C3FD                           
0C3FD                           
0C3FD                           
0C3FD                           +checkNextScreen:
0C3FD                           
0C3FD                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C3FD                               ;; Upon pressing START, the selected level will start
0C3FD                               .include "game/include/main/select_level.asm"
0C3FD A5 10                         LDA buttons_pressed
0C3FF 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C401 F0 3C                         BEQ +checkStartPress
0C403                           
0C403                                   ;; Select next level (1, 5, 9, 13, 17)
0C403 A5 41                             LDA current_level
0C405 18                                CLC
0C406 69 04                             ADC #$04
0C408 C9 14                             CMP #$14
0C40A D0 02                             BNE +
0C40C A9 00                                 LDA #$00
0C40E                                   +
0C40E 85 41                             STA current_level
0C410                                   
0C410                                   ;; Convert level number to two-byte value
0C410 A9 00                             LDA #$00
0C412 85 03                             STA temp+3
0C414 A5 41                             LDA current_level
0C416 18                                CLC
0C417 69 01                             ADC #$01
0C419                           
0C419                               -
0C419 C9 0A                             CMP #$0A
0C41B 90 08                             BCC +
0C41D E6 03                                 INC temp+3
0C41F 38                                    SEC
0C420 E9 0A                                 SBC #$0A
0C422 4C 19 C4                              JMP -
0C425                                   +
0C425                           
0C425                                   ;; Add level number to PPU buffer
0C425 18                                CLC
0C426 69 01                             ADC #$01
0C428 85 02                             STA temp+2
0C42A A9 20                             LDA #$20
0C42C 85 00                             STA temp
0C42E A9 D0                             LDA #$D0
0C430 85 01                             STA temp+1
0C432 20 46 CF                          JSR sub_WriteByteToPPUBuffer
0C435                                   
0C435 C6 01                             DEC temp+1
0C437 A4 03                             LDY temp+3
0C439 C8                                INY
0C43A 84 02                             STY temp+2
0C43C 20 46 CF                          JSR sub_WriteByteToPPUBuffer
0C43F                                   
0C43F                               +checkStartPress:
0C43F                           
0C43F                           
0C43F                           
0C43F                               ;; If START button is pressed
0C43F A5 10                         LDA buttons_pressed
0C441 29 10                         AND #BUTTON_START
0C443 F0 04                         BEQ +
0C445                                   ;; Start the level
0C445 A9 81                             LDA #LOAD_GAME_SCREEN
0C447 85 38                             STA screen_mode
0C449                               +
0C449                           
0C449                           
0C449                           
0C449                           +doneScreenLoad:
0C449                           
0C449                               ;; Load animations (if any)
0C449                               .include "game/include/main/load_animations.asm"
0C449                               ;; Set up loop
0C449 A2 00                         LDX #$00
0C44B                               -loop_load_animation:
0C44B                                   ;; Check if current animation is active. If not, goto next
0C44B BD 74 03                          LDA explosion_active,x
0C44E D0 03                             BNE +
0C450 4C EA C4                              JMP +next
0C453                                   +
0C453                           
0C453                                   ;; Check the explosion framecounter
0C453 BD 60 03                          LDA explosion_timer,x
0C456 D0 26                             BNE +
0C458                                       ;; Frametimer is 0
0C458                                       ;; Reset to animation speed
0C458 A9 04                                 LDA #ANIMATION_SPEED
0C45A 9D 60 03                              STA explosion_timer,x
0C45D                           
0C45D                                       ;; Set next animation frame, and check if we're done yet
0C45D FE 64 03                              INC explosion_currentframe,x
0C460 BD 64 03                              LDA explosion_currentframe,x
0C463 C9 0A                                 CMP #ANIM_SLIDES
0C465 D0 17                                 BNE +
0C467                           
0C467                                       ;; If we're done, inactivate current explosion, clean
0C467                                       ;; up sprite RAM and go to the next one
0C467 A9 00                                 LDA #$00
0C469 9D 74 03                              STA explosion_active,x
0C46C                                       
0C46C A9 09                                 LDA #SLIDE_SIZE
0C46E 0A                                    ASL
0C46F 0A                                    ASL
0C470 A8                                    TAY
0C471 A9 EF                                 LDA #$EF
0C473                                       -
0C473 88                                        DEY
0C474 99 00 02                                  STA ADDR_SPRITERAM,y
0C477 C0 00                                     CPY #00
0C479 D0 F8                                 BNE -
0C47B                                       
0C47B 4C EA C4                              JMP +next
0C47E                                   +
0C47E                           
0C47E                                   ;; Load (x,y) position in temp variables
0C47E BD 6C 03                          LDA explosion_x,x
0C481 85 01                             STA temp+1
0C483 85 03                             STA temp+3
0C485 BD 70 03                          LDA explosion_y,x
0C488 85 02                             STA temp+2
0C48A                           
0C48A                                   ;; Load attribute in temp variable
0C48A BD 68 03                          LDA explosion_attributes,x
0C48D 85 04                             STA temp+4
0C48F                           
0C48F                                   ;; Load current frame into Y-register
0C48F BC 64 03                          LDY explosion_currentframe,x
0C492                           
0C492                                   ;; Load current frame ROM address from table
0C492 B9 9A D0                          LDA explosion_anim_lo,y
0C495 85 0C                             STA pointer
0C497 B9 90 D0                          LDA explosion_anim_hi,y
0C49A 85 0D                             STA pointer+1
0C49C                           
0C49C                                   ;; Save x-register on stack
0C49C 8A                                TXA
0C49D 48                                PHA
0C49E                           
0C49E                                   ;; Load sprites into sprite RAM
0C49E A6 3D                             LDX sprite_ram_pointer
0C4A0 A0 00                             LDY #$00
0C4A2                           
0C4A2                                   ;; Prepare (x,y) offset for loop
0C4A2 84 00                             STY temp
0C4A4                           
0C4A4                                   -loop_load_sprite:
0C4A4                                   
0C4A4                                       ;; Do not draw empty sprites
0C4A4 B1 0C                                 LDA (pointer),y
0C4A6 F0 18                                 BEQ +nextSprite
0C4A8                                   
0C4A8                                           ;; Add y-position to sprite ram buffer
0C4A8 A5 02                                     LDA temp+2
0C4AA 9D 00 02                                  STA ADDR_SPRITERAM,x
0C4AD E8                                        INX
0C4AE                           
0C4AE                                           ;; Get tile number from frame ROM address, and
0C4AE                                           ;; add it to sprite ram buffer
0C4AE B1 0C                                     LDA (pointer),y
0C4B0 9D 00 02                                  STA ADDR_SPRITERAM,x
0C4B3 E8                                        INX
0C4B4                           
0C4B4                                           ;; Add attribute data to sprite ram buffer
0C4B4 A5 04                                     LDA temp+4
0C4B6 9D 00 02                                  STA ADDR_SPRITERAM,x
0C4B9 E8                                        INX
0C4BA                           
0C4BA                                           ;; Add x-position to sprite ram buffer
0C4BA A5 03                                     LDA temp+3
0C4BC 9D 00 02                                  STA ADDR_SPRITERAM,x
0C4BF E8                                        INX
0C4C0                           
0C4C0                                       +nextSprite:
0C4C0                           
0C4C0                                       ;; Check if all sprites are done
0C4C0 C8                                    INY
0C4C1 C0 09                                 CPY #SLIDE_SIZE
0C4C3 F0 21                                 BEQ +done
0C4C5                           
0C4C5                                       ;; Update x value
0C4C5 A5 03                                 LDA temp+3
0C4C7 18                                    CLC
0C4C8 69 08                                 ADC #$08
0C4CA 85 03                                 STA temp+3
0C4CC                           
0C4CC                                       ;; Update temp for x,y position
0C4CC E6 00                                 INC temp
0C4CE A5 00                                 LDA temp
0C4D0 C9 03                                 CMP #SLIDE_WIDTH
0C4D2 D0 0F                                 BNE +
0C4D4                                           ;; Row is done; reset x-position
0C4D4 A5 01                                     LDA temp+1
0C4D6 85 03                                     STA temp+3
0C4D8                           
0C4D8                                           ;; Update y-position
0C4D8 A5 02                                     LDA temp+2
0C4DA 18                                        CLC
0C4DB 69 08                                     ADC #$08
0C4DD 85 02                                     STA temp+2
0C4DF                           
0C4DF                                           ;; Reset row timer
0C4DF A9 00                                     LDA #$00
0C4E1 85 00                                     STA temp
0C4E3                                       +
0C4E3                           
0C4E3 4C A4 C4                          JMP -loop_load_sprite
0C4E6                           
0C4E6                               +done:
0C4E6 86 3D                             STX sprite_ram_pointer
0C4E8                           
0C4E8                                   ;; Retrieve x-register from stack
0C4E8 68                                PLA
0C4E9 AA                                TAX
0C4EA                           
0C4EA                               +next:
0C4EA                                   ;; Check if all animations have been updated
0C4EA E8                                INX
0C4EB E0 04                             CPX #MAX_ANIMATIONS
0C4ED F0 03                             BEQ +done
0C4EF                           
0C4EF 4C 4B C4                      JMP -loop_load_animation
0C4F2                           +done:
0C4F2                           
0C4F2                               ;; Sprite clean-up
0C4F2 A6 3D                         LDX sprite_ram_pointer
0C4F4 A9 EF                         LDA #$EF
0C4F6                               -
0C4F6 9D 00 02                          STA ADDR_SPRITERAM,x
0C4F9 E8                                INX
0C4FA D0 FA                         BNE -
0C4FC 4C 57 C0                      JMP MainGameLoop
0C4FF                           
0C4FF                           ;; Subroutines
0C4FF                           .include "include/subroutines.asm"
0C4FF                           
0C4FF                           ;; RNG
0C4FF                           .include "subroutine/GetRandomNumber.asm"
0C4FF                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4FF                           ;;
0C4FF                           ;; subroutine/GetRandomNumber.asm
0C4FF                           ;;
0C4FF                           ;; Simple and fast random number generator by White Flame.
0C4FF                           ;;
0C4FF                           ;; Set random_seed to an arbitrary number to randomize between
0C4FF                           ;; gaming sessions, for instance using the frame timer upon
0C4FF                           ;; pressing START on the intro screen.
0C4FF                           ;;
0C4FF                           ;;     ;; IF START PRESSED:
0C4FF                           ;;     LDA frame_counter
0C4FF                           ;;     STA random_seed
0C4FF                           ;;
0C4FF                           ;; Source:
0C4FF                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C4FF                           ;;
0C4FF                           ;;
0C4FF                           
0C4FF                           sub_GetRandomNumber:
0C4FF                               ;; Force EOR if random_seed is zero
0C4FF A5 16                         LDA random_seed
0C501 F0 05                         BEQ +doEor
0C503                           
0C503                               ;; Shift left, and EOR if the high bit is set
0C503 0A                            ASL
0C504 F0 04                         BEQ +noEor
0C506 90 02                         BCC +noEor
0C508                           
0C508                           +doEor:
0C508 49 1D                         EOR #$1D
0C50A                           
0C50A                           +noEor:
0C50A 85 16                         STA random_seed
0C50C                           
0C50C 60                            RTS
0C50D                           
0C50D                           
0C50D                           ;; Read controller input
0C50D                           .include "subroutine/ReadController.asm"
0C50D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C50D                           ;;
0C50D                           ;; subroutine/ReadController.asm
0C50D                           ;;
0C50D                           ;; Subroutine that polls the controller and stores the input
0C50D                           ;; buttons in a variable. This version only handles controller
0C50D                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C50D                           ;;
0C50D                           ;;
0C50D                           
0C50D                           sub_ReadController:
0C50D                           
0C50D                               ;; Set strobe bit
0C50D A9 01                         LDA #$01
0C50F 8D 16 40                      STA JOYPAD_1
0C512                           
0C512                               ;; Set up ring timer
0C512 85 0F                         STA buttons_held
0C514                           
0C514                               ;; Clear strobe bit
0C514 4A                            LSR
0C515 8D 16 40                      STA JOYPAD_1
0C518                           
0C518                               ;; Loop through button presses
0C518                               -
0C518 AD 16 40                          LDA JOYPAD_1
0C51B 4A                                LSR
0C51C 26 0F                             ROL buttons_held
0C51E                           
0C51E                               ;; Check if ring timer is done
0C51E 90 F8                         BCC -
0C520                           
0C520                               ;; Return from subroutine
0C520 60                            RTS
0C521                           
0C521                           
0C521                           ;; vBlank/NMI wait
0C521                           .include "subroutine/WaitForNMI.asm"
0C521                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C521                           ;;
0C521                           ;; subroutine/WaitForVBlank.asm
0C521                           ;;
0C521                           ;; Subroutine that essentially pauses script execution until
0C521                           ;; vBlank happens.
0C521                           ;;
0C521                           ;;
0C521                           
0C521                           sub_WaitForNMI:
0C521 A9 01                         LDA #$01
0C523 85 49                         STA check_nmi
0C525                               -
0C525 A5 49                             LDA check_nmi
0C527 D0 FC                         BNE -
0C529 60                            RTS
0C52A                           
0C52A                           .include "subroutine/WaitForVBlank.asm"
0C52A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C52A                           ;;
0C52A                           ;; subroutine/WaitForVBlank.asm
0C52A                           ;;
0C52A                           ;; Subroutine that essentially pauses script execution until
0C52A                           ;; vBlank happens.
0C52A                           ;;
0C52A                           ;;
0C52A                           
0C52A                           sub_WaitForVBlank:
0C52A 2C 02 20                      BIT $2002
0C52D 10 FB                         BPL sub_WaitForVBlank
0C52F 60                            RTS
0C530                           
0C530                           
0C530                           ;; Game specific subroutines
0C530                           .include "game/include/subroutines.asm"
0C530                           ;; additional game-specific subroutines go here
0C530                           
0C530                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C530                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C530                           ;;
0C530                           ;;  sub_AddAccumulatorToScore.asm
0C530                           ;;
0C530                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C530                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C530                           ;;  actual score.
0C530                           ;;
0C530                           ;;
0C530                           
0C530                           
0C530                           sub_AddAccumulatorToScore:
0C530                           
0C530                               ;; Clear old add_to_score
0C530 A2 05                         LDX #$05
0C532 A0 00                         LDY #$00
0C534                               -
0C534 94 26                             STY add_to_score,x
0C536 CA                                DEX
0C537 10 FB                         BPL -
0C539                           
0C539                               ;; Set accumulator to add_to_score variables
0C539                               ;; Check and update 100s
0C539                               -checkHundreds:
0C539 C9 64                             CMP #100
0C53B 90 08                             BCC +checkTens
0C53D 38                                    SEC
0C53E E9 64                                 SBC #100
0C540 E6 29                                 INC add_to_score+3
0C542 4C 39 C5                              JMP -checkHundreds
0C545                                   +checkTens:
0C545                           
0C545                               ;; Check and update 10s
0C545                               -checkTens:
0C545 C9 0A                             CMP #10
0C547 90 08                             BCC +setOnes
0C549 38                                    SEC
0C54A E9 0A                                 SBC #10
0C54C E6 2A                                 INC add_to_score+4
0C54E 4C 45 C5                              JMP -checkTens
0C551                                   +setOnes:
0C551                           
0C551                               ;; We're left with 1s
0C551 85 2B                         STA add_to_score+5
0C553                           
0C553                               ;; Byte for byte, add add_to_score to ball_score
0C553 A9 00                         LDA #$00
0C555 85 39                         STA ppu_buffer_update
0C557 A4 3A                         LDY ppu_buffer_pointer
0C559 A2 05                         LDX #$05
0C55B                               -
0C55B B5 26                             LDA add_to_score,x
0C55D 18                                CLC
0C55E 75 20                             ADC ball_score,x
0C560 C9 0A                             CMP #10
0C562 90 05                             BCC +
0C564 38                                    SEC
0C565 E9 0A                                 SBC #10
0C567 F6 1F                                 INC ball_score-1,x
0C569                                   +
0C569                                   
0C569                                   ;; Update new score digit
0C569 95 20                             STA ball_score,x
0C56B                           
0C56B                                   ;; Update score tile in PPU
0C56B A9 20                             LDA #$20
0C56D 99 00 03                          STA ppu_buffer,y
0C570 C8                                INY
0C571 8A                                TXA
0C572 18                                CLC
0C573 69 83                             ADC #$83
0C575 99 00 03                          STA ppu_buffer,y
0C578 C8                                INY
0C579 B5 20                             LDA ball_score,x
0C57B 18                                CLC
0C57C 69 01                             ADC #$01
0C57E 99 00 03                          STA ppu_buffer,y
0C581 C8                                INY
0C582                           
0C582                                   ;; Check next digit (if any left)
0C582 CA                                DEX
0C583 30 03                             BMI +done
0C585 4C 5B C5                      JMP -
0C588                           
0C588                           +done:
0C588                               ;; Update PPU buffer pointer and status
0C588 84 3A                         STY ppu_buffer_pointer
0C58A A9 01                         LDA #$01
0C58C 85 39                         STA ppu_buffer_update
0C58E                           
0C58E                               ;; Done: return 
0C58E 60                            RTS
0C58F                           
0C58F                           .include "game/subroutine/BackgroundNoise.asm"
0C58F                           
0C58F                           sub_BackgroundNoise:
0C58F A9 32                         LDA #$32
0C591 8D 0C 40                      STA NOISE_VOLUME
0C594 A9 0E                         LDA #$0E
0C596 8D 0E 40                      STA NOISE_PERIOD
0C599 85 46                         STA current_noise
0C59B 60                            RTS0C59C                           .include "game/subroutine/ClearScreen.asm"
0C59C                           ;; Subroutine to clear the screen
0C59C                           ;; If it's a game screen, add noise
0C59C                           
0C59C                           sub_ClearScreen:
0C59C                               ;; Check of game screen or not
0C59C A5 38                         LDA screen_mode
0C59E 29 03                         AND #CHECK_SCREEN_MODE
0C5A0 C9 01                         CMP #IS_GAME_SCREEN
0C5A2 F0 02                         BEQ +
0C5A4 A9 00                             LDA #$00
0C5A6                               +
0C5A6 85 01                         STA temp+1
0C5A8                               
0C5A8                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C5A8 2C 02 20                      BIT PPU_STATUS
0C5AB A9 20                         LDA #$20
0C5AD 8D 06 20                      STA PPU_ADDR
0C5B0 A9 00                         LDA #$00
0C5B2 8D 06 20                      STA PPU_ADDR
0C5B5                               
0C5B5                               ;; Set up tile to draw and loop
0C5B5 85 00                         STA temp
0C5B7 AA                            TAX
0C5B8 A8                            TAY
0C5B9                           
0C5B9                               -     
0C5B9                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C5B9 A5 00                             LDA temp
0C5BB 8D 07 20                          STA PPU_DATA
0C5BE                           
0C5BE                                   ;; Check if we should draw noise next. Noise is drawn if:
0C5BE                                   ;; - Screen mode is game screen
0C5BE                                   ;; - Y between #$06 and #$19 (inclusive)
0C5BE                                   ;; - X between #$02 and #$1D (inclusive)
0C5BE                                   
0C5BE                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C5BE A5 01                             LDA temp+1
0C5C0 F0 1C                             BEQ +nextTileInRow
0C5C2                                   
0C5C2                                   ;; If Y < $6, skip the check
0C5C2 C0 06                             CPY #$06
0C5C4 90 18                             BCC +nextTileInRow
0C5C6                                   
0C5C6                                   ;; If X < $1, skip the check
0C5C6 E0 01                             CPX #$01
0C5C8 90 14                             BCC +nextTileInRow
0C5CA                                   
0C5CA                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C5CA E0 1D                             CPX #$1D
0C5CC D0 04                             BNE +
0C5CE A9 00                                 LDA #$00
0C5D0 85 00                                 STA temp
0C5D2                                   +
0C5D2 B0 0A                             BCS +nextTileInRow
0C5D4                                   
0C5D4                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C5D4 20 FF C4                          JSR sub_GetRandomNumber
0C5D7 29 07                             AND #%00000111
0C5D9 18                                CLC
0C5DA 69 68                             ADC #$68
0C5DC 85 00                             STA temp
0C5DE                           
0C5DE                           +nextTileInRow:
0C5DE                                   
0C5DE                                   ;; Check if a row has been done. If not, draw the next
0C5DE E8                                INX
0C5DF E0 20                             CPX #$20
0C5E1 D0 D6                             BNE -
0C5E3                                   
0C5E3                                   ;; Go to the next row (if any left)
0C5E3 A2 00                             LDX #00
0C5E5 C8                                INY
0C5E6                                   
0C5E6                                   ;; If Y is 1A, skip noise tile check until done drawing
0C5E6 C0 1A                             CPY #$1A
0C5E8 D0 04                             BNE +
0C5EA A9 00                                 LDA #$00
0C5EC 85 01                                 STA temp+1
0C5EE                                   +
0C5EE                                   
0C5EE C0 1E                             CPY #$1E
0C5F0 D0 C7                         BNE -
0C5F2                           
0C5F2                               ;; Clear attribute table
0C5F2 A9 23                         LDA #$23
0C5F4 8D 06 20                      STA PPU_ADDR
0C5F7 A9 C0                         LDA #$C0
0C5F9 8D 06 20                      STA PPU_ADDR
0C5FC A9 00                         LDA #$00
0C5FE A2 40                         LDX #$40
0C600                               -
0C600 8D 07 20                          STA PPU_DATA
0C603 CA                                DEX
0C604 D0 FA                         BNE -
0C606                               
0C606 60                            RTS0C607                           .include "game/subroutine/ColorizeBall.asm"
0C607                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C607                           ;;
0C607                           ;;  Subroutine: ColorizeBall
0C607                           ;;
0C607                           ;;  Applies the color set through ball_flags to the ball sprite.
0C607                           ;;
0C607                           ;;
0C607                           
0C607                           
0C607                           sub_ColorizeBall:
0C607                           
0C607                               ;; Get color from ball_flags
0C607 4A                            LSR
0C608 4A                            LSR
0C609 4A                            LSR
0C60A 4A                            LSR
0C60B 4A                            LSR
0C60C AA                            TAX
0C60D                           
0C60D                               ;; Add new light color of ball to PPU palette
0C60D A9 3F                         LDA #$3F
0C60F 85 00                         STA temp
0C611 A9 11                         LDA #$11
0C613 85 01                         STA temp+1
0C615 BD AA D0                      LDA tbl_BallColorLight,x
0C618 85 02                         STA temp+2
0C61A 20 46 CF                      JSR sub_WriteByteToPPUBuffer
0C61D                               
0C61D                               ;; Add new dark color of ball to PPU palette
0C61D E6 01                         INC temp+1
0C61F BD A4 D0                      LDA tbl_BallColorDark,x
0C622 85 02                         STA temp+2
0C624 20 46 CF                      JSR sub_WriteByteToPPUBuffer
0C627                               
0C627 60                            RTS
0C628                           
0C628                           .include "game/subroutine/ColorsMatch.asm"
0C628                           
0C628                           ;; Subroutine to check if ball color matches colliding tile color
0C628                           
0C628                           sub_ColorsMatch:
0C628                               ;; Save tile color in temp variable
0C628 A5 42                         LDA colliding_tile
0C62A 29 0E                         AND #%00001110
0C62C 85 00                         STA temp
0C62E                           
0C62E                               ;; Get ball color
0C62E A5 37                         LDA ball_flags
0C630 29 E0                         AND #%11100000
0C632 4A                            LSR
0C633 4A                            LSR
0C634 4A                            LSR
0C635 4A                            LSR
0C636                           
0C636                               ;; Compare with tile color
0C636 C5 00                         CMP temp
0C638 60                            RTS
0C639                           
0C639                           .include "game/subroutine/ConvertXYToTileType.asm"
0C639                           
0C639                           ;; Subroutine to convert the ball's position to a tile type
0C639                           ;; - Expects temp to be y-position of ball within game area
0C639                           ;; - Expects temp+1 to be x-position of ball within game area
0C639                           ;; - Puts result in accumulator and zp variable
0C639                           ;; - Corrupts X-register
0C639                           
0C639                           sub_ConvertXYToTileType:
0C639 A5 01                         LDA temp+1
0C63B 4A                            LSR
0C63C 4A                            LSR
0C63D 4A                            LSR
0C63E 4A                            LSR
0C63F 85 09                         STA temp+9
0C641 A5 00                         LDA temp
0C643 29 F0                         AND #%11110000
0C645 18                            CLC
0C646 65 09                         ADC temp+9
0C648 85 09                         STA temp+9
0C64A AA                            TAX
0C64B BD 00 04                      LDA tile_type, x
0C64E 85 42                         STA colliding_tile
0C650 60                            RTS
0C651                           
0C651                           .include "game/subroutine/DisableEnableRendering.asm"
0C651                           sub_DisableRendering:
0C651                               ;; Force NMI skip, disable rendering
0C651 A9 01                     	LDA #$01
0C653 85 14                     	STA force_skip_nmi
0C655 20 2A C5                      JSR sub_WaitForVBlank
0C658 A5 12                         LDA soft_ppu_mask
0C65A 29 E7                         AND #%11100111
0C65C 8D 01 20                      STA PPU_MASK
0C65F 85 12                         STA soft_ppu_mask
0C661 20 2A C5                      JSR sub_WaitForVBlank
0C664 60                            RTS
0C665                           
0C665                           sub_EnableRendering:
0C665                               ;; Enable rendering
0C665 A9 00                     	LDA #$00
0C667 8D 05 20                  	STA PPU_SCROLL
0C66A 8D 05 20                  	STA PPU_SCROLL
0C66D 20 2A C5                      JSR sub_WaitForVBlank
0C670 85 14                     	STA force_skip_nmi
0C672 A5 12                         LDA soft_ppu_mask
0C674 09 18                         ORA #%00011000
0C676 85 12                         STA soft_ppu_mask
0C678 8D 01 20                      STA PPU_MASK
0C67B 20 2A C5                      JSR sub_WaitForVBlank
0C67E 60                            RTS
0C67F                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C67F                           sub_drawIntroScreenLogoTile:
0C67F B9 8C CF                      LDA tbl_IntroScreenLogoChr,y
0C682 C9 60                         CMP #$60
0C684 D0 08                         BNE +
0C686 20 FF C4                          JSR sub_GetRandomNumber
0C689 29 07                             AND #$07
0C68B 18                                CLC
0C68C 69 60                             ADC #$60
0C68E                               +
0C68E 8D 07 20                      STA PPU_DATA
0C691 60                            RTS
0C692                           .include "game/subroutine/DrawMoveTile.asm"
0C692                           ;; Draw the move tile as follows:
0C692                           ;;
0C692                           ;;  1 2
0C692                           ;;  3 4 5
0C692                           ;;    6 7
0C692                           ;;
0C692                           ;; (1,2,3,4) is the move block itself
0C692                           ;; (5,6,7) are shades unless that tile is solid
0C692                           
0C692                           ;; X holds the move block sprite slot
0C692                           
0C692                           sub_DrawMoveTile:
0C692                           
0C692                               ;; Get tile type index from sprite x and y values
0C692                               ;; and store it in a temp variable
0C692 BD 78 03                      LDA move_block_x,x
0C695 18                            CLC
0C696 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C698 4A                            LSR
0C699 4A                            LSR
0C69A 4A                            LSR
0C69B 4A                            LSR
0C69C 85 09                         STA temp+9
0C69E BD 7C 03                      LDA move_block_y,x
0C6A1 18                            CLC
0C6A2 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C6A4 29 F0                         AND #%11110000
0C6A6 18                            CLC
0C6A7 65 09                         ADC temp+9
0C6A9 85 09                         STA temp+9
0C6AB A8                            TAY
0C6AC                               
0C6AC                               ;; Add move tile data on the new tile location
0C6AC BD 84 03                      LDA move_block_tile_type,x
0C6AF 99 00 04                      STA tile_type,y
0C6B2                           
0C6B2                               ;; Draw the original tile type in the ppu buffer
0C6B2                               ;; - get PPU address to write to (temp, temp+1)
0C6B2 8A                            TXA
0C6B3 48                            PHA
0C6B4 A6 09                         LDX temp+9
0C6B6 20 21 C9                      JSR sub_GetPPUAddrFromYXIndex
0C6B9 68                            PLA
0C6BA AA                            TAX
0C6BB                               
0C6BB                               ;; - based on color, select tile 42 or 4A for top left
0C6BB BD 88 03                      LDA move_block_flags,x
0C6BE 4A                            LSR
0C6BF 4A                            LSR
0C6C0 4A                            LSR
0C6C1 4A                            LSR
0C6C2 4A                            LSR
0C6C3 A8                            TAY
0C6C4 B9 56 D8                      LDA tbl_MoveBlockTopLeftTile,y
0C6C7 85 08                         STA temp+8
0C6C9                               
0C6C9                               ;; - save palette ID in temp+6
0C6C9 98                            TYA
0C6CA 4A                            LSR
0C6CB 85 06                         STA temp+6
0C6CD                               
0C6CD                               ;; Prepare PPU buffer
0C6CD A4 3A                         LDY ppu_buffer_pointer
0C6CF A9 00                         LDA #$00
0C6D1 85 39                         STA ppu_buffer_update
0C6D3                               
0C6D3                               ;; Draw tile 1 (top left tile of move block)
0C6D3 20 B4 C7                      JSR sub_DrawTileTemp018
0C6D6                           
0C6D6                               
0C6D6                               ;; Draw tile 2 (top right tile of move block)
0C6D6 E6 01                         INC temp+1
0C6D8 E6 08                         INC temp+8
0C6DA 20 B4 C7                      JSR sub_DrawTileTemp018
0C6DD                           
0C6DD                               ;; Draw tile 3 (bottom left tile of move block)
0C6DD A5 01                         LDA temp+1
0C6DF 18                            CLC
0C6E0 69 1F                         ADC #$1F
0C6E2 85 01                         STA temp+1
0C6E4 A5 00                         LDA temp
0C6E6 69 00                         ADC #$00
0C6E8 85 00                         STA temp
0C6EA A5 08                         LDA temp+8
0C6EC 18                            CLC
0C6ED 69 0F                         ADC #$0F
0C6EF 85 08                         STA temp+8
0C6F1 20 B4 C7                      JSR sub_DrawTileTemp018
0C6F4                           
0C6F4                               ;; Draw tile 4 (bottom right tile of move block)
0C6F4 E6 01                         INC temp+1
0C6F6 E6 08                         INC temp+8
0C6F8 20 B4 C7                      JSR sub_DrawTileTemp018
0C6FB                           
0C6FB                               ;; Load tile type offset in X register
0C6FB 8A                            TXA
0C6FC 48                            PHA
0C6FD A6 09                         LDX temp+9
0C6FF                               
0C6FF                               ;; Load shade tile in temp+8
0C6FF A9 00                         LDA #$00
0C701 85 08                         STA temp+8
0C703                           
0C703                               ;; Draw tile 5 (right shade) unless tile is solid
0C703 E6 01                         INC temp+1
0C705                               
0C705 8A                            TXA
0C706 29 0F                         AND #%00001111
0C708 C9 0D                         CMP #$0D
0C70A F0 0A                         BEQ +nextTile
0C70C                           
0C70C BD 01 04                      LDA tile_type+1,x
0C70F 29 01                         AND #%00000001
0C711 D0 03                         BNE +nextTile
0C713                               
0C713 20 B4 C7                      JSR sub_DrawTileTemp018
0C716                               
0C716                           
0C716                           +nextTile:
0C716                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C716 A5 01                         LDA temp+1
0C718 18                            CLC
0C719 69 1F                         ADC #$1F
0C71B 85 01                         STA temp+1
0C71D A5 00                         LDA temp
0C71F 69 00                         ADC #$00
0C721 85 00                         STA temp
0C723                           
0C723 8A                            TXA
0C724 29 F0                         AND #%11110000
0C726 C9 90                         CMP #$90
0C728 F0 0A                         BEQ +nextTile
0C72A                           
0C72A BD 10 04                      LDA tile_type+16,x
0C72D 29 01                         AND #%00000001
0C72F D0 03                         BNE +nextTile
0C731                               
0C731 20 B4 C7                      JSR sub_DrawTileTemp018
0C734                           
0C734                               
0C734                           +nextTile:
0C734                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C734 E6 01                         INC temp+1
0C736                           
0C736 8A                            TXA
0C737 29 F0                         AND #%11110000
0C739 C9 90                         CMP #$90
0C73B F0 11                         BEQ +setTileAttributes
0C73D                               
0C73D 8A                            TXA
0C73E 29 0F                         AND #%00001111
0C740 C9 0D                         CMP #$0D
0C742 F0 0A                         BEQ +setTileAttributes
0C744                               
0C744 BD 11 04                      LDA tile_type+17,x
0C747 29 01                         AND #%00000001
0C749 D0 03                         BNE +setTileAttributes
0C74B                               
0C74B 20 B4 C7                      JSR sub_DrawTileTemp018
0C74E                               
0C74E                           
0C74E                           +setTileAttributes:
0C74E                               ;; Update attribute table accordingly through ppu buffer
0C74E                               ;; - PPU buffer high byte
0C74E 20 1C CF                      JSR sub_SetTileAttributeAddress
0C751                           
0C751 8A                            TXA
0C752 29 10                         AND #%00010000
0C754 F0 05                         BEQ +        
0C756 A9 F0                             LDA #%11110000
0C758 4C 5D C7                          JMP ++
0C75B                               +
0C75B A9 0F                         LDA #%00001111
0C75D                               ++
0C75D 85 02                         STA temp+2
0C75F                               
0C75F 8A                            TXA
0C760 29 01                         AND #%00000001
0C762 F0 07                         BEQ +
0C764 A5 02                             LDA temp+2
0C766 09 CC                             ORA #%11001100
0C768 4C 6F C7                          JMP ++
0C76B                               +
0C76B A5 02                         LDA temp+2
0C76D 09 33                         ORA #%00110011
0C76F                               ++
0C76F 85 02                         STA temp+2
0C771                               
0C771 C9 FC                         CMP #%11111100
0C773 F0 22                         BEQ +continue
0C775                               
0C775 C9 F3                         CMP #%11110011
0C777 D0 09                         BNE +
0C779 A5 06                             LDA temp+6
0C77B 0A                                ASL
0C77C 0A                                ASL
0C77D 85 06                             STA temp+6
0C77F 4C 97 C7                          JMP +continue
0C782                               +
0C782                               
0C782 C9 CF                         CMP #%11001111
0C784 D0 0A                         BNE +
0C786 A6 06                             LDX temp+6
0C788 BD F9 D7                          LDA tbl_Times16,x
0C78B 85 06                             STA temp+6
0C78D 4C 97 C7                          JMP +continue
0C790                               +
0C790                               
0C790 A6 06                         LDX temp+6
0C792 BD 09 D8                      LDA tbl_Times64,x
0C795 85 06                         STA temp+6
0C797                                   
0C797                           +continue:
0C797 A5 00                         LDA temp
0C799 38                            SEC
0C79A E9 C0                         SBC #$C0
0C79C AA                            TAX
0C79D BD A0 04                      LDA tile_attributes,x
0C7A0 25 02                         AND temp+2
0C7A2 05 06                         ORA temp+6
0C7A4 9D A0 04                      STA tile_attributes,x
0C7A7 99 00 03                      STA ppu_buffer,y
0C7AA C8                            INY
0C7AB                           
0C7AB                               ;; Restore original X
0C7AB 68                            PLA
0C7AC AA                            TAX
0C7AD                               
0C7AD                               ;; Update PPU buffer
0C7AD 84 3A                         STY ppu_buffer_pointer
0C7AF A9 01                         LDA #$01
0C7B1 85 39                         STA ppu_buffer_update
0C7B3                           
0C7B3                               ;; Return
0C7B3 60                            RTS
0C7B4                           .include "game/subroutine/DrawTileTemp018.asm"
0C7B4                           
0C7B4                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C7B4                           
0C7B4                           sub_DrawTileTemp018:
0C7B4 A5 00                         LDA temp
0C7B6 99 00 03                      STA ppu_buffer,y
0C7B9 C8                            INY
0C7BA A5 01                         LDA temp+1
0C7BC 99 00 03                      STA ppu_buffer,y
0C7BF C8                            INY
0C7C0 A5 08                         LDA temp+8
0C7C2 99 00 03                      STA ppu_buffer,y
0C7C5 C8                            INY
0C7C6 60                            RTS
0C7C7                           .include "game/subroutine/EvaluateTileType.asm"
0C7C7                           ;; Subroutine to evaluate the colliding tile type and take its
0C7C7                           ;; corresponding action (move block, kill player, ...)
0C7C7                           ;; - Expects X-register to be the tile_type offset
0C7C7                           ;; - Uses zp variable colliding_tile
0C7C7                           
0C7C7                           sub_EvaluateTileType:
0C7C7                           
0C7C7                               ;; Check if collided tile is a color block
0C7C7 A5 42                         LDA colliding_tile
0C7C9 29 80                         AND #IS_COLOR_BLOCK
0C7CB D0 03                         BNE +
0C7CD 4C 2F C8                          JMP +checkIfPaintBlock
0C7D0                               +
0C7D0                               
0C7D0                               ;; It's a color block. Check if the colors match
0C7D0 20 28 C6                      JSR sub_ColorsMatch
0C7D3 F0 01                         BEQ +
0C7D5                                   ;; Colors don't match - return
0C7D5 60                                RTS
0C7D6                               +
0C7D6                           
0C7D6                               ;; Colors match; destroy color block
0C7D6                               
0C7D6                               ;; Convert the metatile offset value (which is in the X register)
0C7D6                               ;; to its corresponding address in PPU
0C7D6 20 21 C9                      JSR sub_GetPPUAddrFromYXIndex
0C7D9                           
0C7D9                               ;; Remove color block from screen by drawing a total
0C7D9                               ;; of 7 tiles over it (shade included)
0C7D9 20 A6 CD                      JSR sub_RemoveBlockFromScreen
0C7DC                               
0C7DC                               ;; - Load destruction animation on tile
0C7DC                               ;; Get most recent slot for explosion    
0C7DC 8A                            TXA
0C7DD 85 02                         STA temp+2
0C7DF A6 3B                         LDX explosion_pointer
0C7E1                           
0C7E1                               ;; If 0, use max pointer value
0C7E1 D0 02                         BNE +
0C7E3 A2 04                             LDX #MAX_ANIMATIONS
0C7E5                               +
0C7E5                           
0C7E5                               ;; Decrease pointer by one
0C7E5 CA                            DEX
0C7E6 86 3B                         STX explosion_pointer
0C7E8                           
0C7E8                               ;; Load explosion data into RAM
0C7E8 A9 00                         LDA #$00
0C7EA 9D 64 03                      STA explosion_currentframe,x
0C7ED                           
0C7ED A9 04                         LDA #ANIMATION_SPEED
0C7EF 9D 60 03                      STA explosion_timer,x
0C7F2                           
0C7F2 A5 02                         LDA temp+2
0C7F4 29 0F                         AND #%00001111
0C7F6 A8                            TAY
0C7F7 B9 F9 D7                      LDA tbl_Times16,y
0C7FA 18                            CLC
0C7FB 69 0E                         ADC #$0E
0C7FD 9D 6C 03                      STA explosion_x,x
0C800                           
0C800 A5 02                         LDA temp+2
0C802 29 F0                         AND #%11110000
0C804 18                            CLC
0C805 69 29                         ADC #$29
0C807 9D 70 03                      STA explosion_y,x
0C80A                           
0C80A A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C80C 9D 68 03                      STA explosion_attributes,x
0C80F A9 01                         LDA #$01
0C811 9D 74 03                      STA explosion_active,x
0C814                           
0C814 A5 02                         LDA temp+2
0C816 AA                            TAX
0C817                               
0C817                               
0C817                               ;; - Write #$00 in tile type ram (makes not-solid)
0C817 A9 00                         LDA #$00
0C819 9D 00 04                      STA tile_type, x
0C81C                           
0C81C                           
0C81C                               ;; Add (80 + level number) to score
0C81C A5 41                         LDA current_level
0C81E 18                            CLC
0C81F 69 51                         ADC #81
0C821 20 30 C5                      JSR sub_AddAccumulatorToScore
0C824                           
0C824                           
0C824                               ;; - If there are no color blocks left:
0C824                               ;;   - Freeze ball
0C824                               ;;   - Initiate level-win state [@TODO]
0C824 C6 43                         DEC blocks_left
0C826 D0 06                         BNE +
0C828 A5 37                             LDA ball_flags
0C82A 09 04                             ORA #FREEZE_BALL
0C82C 85 37                             STA ball_flags
0C82E                               +
0C82E                               
0C82E 60                            RTS
0C82F                           
0C82F                           +checkIfPaintBlock:
0C82F                           
0C82F                           
0C82F                               ;; Check if collided tile is a paint block
0C82F A5 42                         LDA colliding_tile
0C831 29 20                         AND #IS_PAINT_BLOCK
0C833 F0 1A                         BEQ +checkIfDeathBlock
0C835                                   ;; It's a paint block. Update ball color
0C835                                   ;; Save x-register
0C835 8A                                TXA
0C836 48                                PHA
0C837                           
0C837                                   ;; Get tile color
0C837 A5 42                             LDA colliding_tile
0C839 29 0E                             AND #%00001110
0C83B 0A                                ASL
0C83C 0A                                ASL
0C83D 0A                                ASL
0C83E 0A                                ASL
0C83F 85 00                             STA temp
0C841                           
0C841                                   ;; Apply tile color to ball
0C841 A5 37                             LDA ball_flags
0C843 29 1F                             AND #%00011111
0C845 05 00                             ORA temp
0C847 85 37                             STA ball_flags
0C849 20 07 C6                          JSR sub_ColorizeBall
0C84C                           
0C84C                                   ;; Restore x-register
0C84C 68                                PLA
0C84D AA                                TAX
0C84E                           
0C84E                                   ;; Return
0C84E 60                                RTS
0C84F                               +checkIfDeathBlock:
0C84F                           
0C84F                               ;; Check if collided tile is a death block
0C84F A5 42                         LDA colliding_tile
0C851 29 10                         AND #IS_DEATH_BLOCK
0C853 F0 38                         BEQ +checkIfMoveBlock
0C855                           
0C855                                   ;; It is a death block
0C855                                   ;; Freeze and kill player
0C855 A5 37                             LDA ball_flags
0C857 09 05                             ORA #%00000101
0C859 85 37                             STA ball_flags
0C85B                                   
0C85B                                   ;; Get free explosion slot
0C85B A6 3B                             LDX explosion_pointer
0C85D D0 02                             BNE +
0C85F A2 04                                 LDX #MAX_ANIMATIONS
0C861                                   +
0C861 CA                                DEX
0C862 86 3B                             STX explosion_pointer
0C864                           
0C864                                   ;; Load explosion data into RAM
0C864 A9 00                             LDA #$00
0C866 9D 64 03                          STA explosion_currentframe,x
0C869                           
0C869 A9 04                             LDA #ANIMATION_SPEED
0C86B 9D 60 03                          STA explosion_timer,x
0C86E                           
0C86E A5 17                             LDA ball_xpos_hi
0C870 38                                SEC
0C871 E9 08                             SBC #$08
0C873 9D 6C 03                          STA explosion_x,x
0C876                           
0C876 A5 19                             LDA ball_ypos_hi
0C878 38                                SEC
0C879 E9 06                             SBC #$06
0C87B 9D 70 03                          STA explosion_y,x
0C87E                           
0C87E A9 01                             LDA #$01 ; subpalette 1 is for ball explosions
0C880 9D 68 03                          STA explosion_attributes,x
0C883                           
0C883 A9 01                             LDA #$01
0C885 9D 74 03                          STA explosion_active,x
0C888                           
0C888                                   ;; Set kill timer
0C888 A9 60                             LDA #$60
0C88A 85 40                             STA kill_timer
0C88C                           
0C88C                                   ;; Return
0C88C 60                                RTS
0C88D                           
0C88D                           
0C88D                           +checkIfMoveBlock:
0C88D                           
0C88D                               ;; Check if collided tile is a move block
0C88D A5 42                         LDA colliding_tile
0C88F 29 40                         AND #IS_MOVE_BLOCK
0C891 D0 01                         BNE +
0C893 60                                RTS
0C894                               +
0C894                           
0C894                               ;; It is a move block. Check if colors match
0C894 20 28 C6                      JSR sub_ColorsMatch
0C897 F0 01                         BEQ +
0C899 60                                RTS
0C89A                               +
0C89A                           
0C89A                               ;; Colors match
0C89A                               ;; - Check if next tile is within the playground
0C89A                               ;; (push X onto stack as well)
0C89A 8A                            TXA
0C89B 48                            PHA
0C89C 18                            CLC
0C89D 65 36                         ADC move_block_space_to_check
0C89F AA                            TAX
0C8A0                               
0C8A0 29 0F                         AND #%00001111
0C8A2 C9 0E                         CMP #$0E
0C8A4 90 03                         BCC +
0C8A6 4C 1A C9                          JMP +restoreX
0C8A9                               +
0C8A9 8A                            TXA
0C8AA 29 F0                         AND #%11110000
0C8AC C9 A0                         CMP #$A0
0C8AE D0 03                         BNE +
0C8B0 4C 1A C9                          JMP +restoreX
0C8B3                               +
0C8B3 C9 F0                         CMP #$F0
0C8B5 D0 03                         BNE +
0C8B7 4C 1A C9                          JMP +restoreX
0C8BA                               +
0C8BA                               
0C8BA                               ;; Check if the next tile is solid
0C8BA BD 00 04                      LDA tile_type,x
0C8BD 29 01                         AND #TILE_IS_SOLID
0C8BF F0 03                         BEQ +
0C8C1 4C 1A C9                          JMP +restoreX
0C8C4                               +
0C8C4                               
0C8C4                               ;; Move block has room to move
0C8C4                               ;; Pull original X from stack
0C8C4 68                            PLA
0C8C5 AA                            TAX        
0C8C6                               
0C8C6                               ;; Add the tiles that need updating to ppu buffer, and
0C8C6                               ;; update attribute table accordingly through ppu buffer
0C8C6 20 21 C9                      JSR sub_GetPPUAddrFromYXIndex
0C8C9 20 A6 CD                      JSR sub_RemoveBlockFromScreen
0C8CC                           
0C8CC                               ;; Store original tile type in temp variable
0C8CC BD 00 04                      LDA tile_type,x
0C8CF 85 08                         STA temp+8
0C8D1                           
0C8D1                               ;; Write #$00 in tile type ram (makes not-solid)
0C8D1 A9 00                         LDA #$00
0C8D3 9D 00 04                      STA tile_type,x
0C8D6                           
0C8D6                               ;; Add move tile sprite over the original tile
0C8D6                               ;; - Store x in temp variable
0C8D6 86 03                         STX temp+3
0C8D8                               
0C8D8                               ;; - Update move block pointer
0C8D8 A6 3C                         LDX move_block_pointer
0C8DA D0 02                         BNE +
0C8DC A2 04                             LDX #MAX_ANIMATIONS
0C8DE                               +
0C8DE CA                            DEX
0C8DF 86 3C                         STX move_block_pointer
0C8E1                           
0C8E1                               ;; = Set move block tile type
0C8E1 A5 08                         LDA temp+8
0C8E3 9D 84 03                      STA move_block_tile_type,x
0C8E6                           
0C8E6                               ;; - Set move block X position
0C8E6 A5 03                         LDA temp+3
0C8E8 29 0F                         AND #%00001111
0C8EA A8                            TAY
0C8EB C8                            INY
0C8EC B9 F9 D7                      LDA tbl_Times16,y
0C8EF 9D 78 03                      STA move_block_x,x
0C8F2                               
0C8F2                               ;; - Set move block Y position
0C8F2 A5 03                         LDA temp+3
0C8F4 29 F0                         AND #%11110000
0C8F6 18                            CLC
0C8F7 69 30                         ADC #$30
0C8F9 9D 7C 03                      STA move_block_y,x
0C8FC DE 7C 03                      DEC move_block_y,x
0C8FF                               
0C8FF                               ;; - Set timer to 16 (+1) frames
0C8FF A9 11                         LDA #$11
0C901 9D 80 03                      STA move_block_timer,x
0C904                               
0C904                               ;; - Set move direction
0C904 A5 36                         LDA move_block_space_to_check
0C906 29 81                         AND #%10000001
0C908 18                            CLC
0C909 2A                            ROL
0C90A 69 00                         ADC #$00
0C90C 85 04                         STA temp+4
0C90E                               
0C90E                               ;; - Set block color as ball color and add direction
0C90E A5 37                         LDA ball_flags
0C910 29 E0                         AND #BALL_COLOR
0C912 05 04                         ORA temp+4
0C914 9D 88 03                      STA move_block_flags,x
0C917                               
0C917                               ;; - Restore original X
0C917 A6 03                         LDX temp+3
0C919                           
0C919                               ;; Return
0C919 60                            RTS
0C91A                           
0C91A                           
0C91A                           ;; Pull X register from stack before returning
0C91A                           +restoreX:
0C91A 68                            PLA
0C91B AA                            TAX
0C91C 60                            RTS
0C91D                           .include "game/subroutine/GameOver.asm"
0C91D                           sub_GameOver:
0C91D                           
0C91D                               ;; For now, just reset the game
0C91D 4C 00 C0                      JMP RESET
0C920                           
0C920                               ;; Draw GAME OVER tiles over game screen
0C920                               ;; If player score is larger than high score
0C920                               ;; Overwrite high score with player score
0C920                               ;; If player presses either A or START
0C920                               ;; Initiate start screen routine (no hard reset as that resets the high score as well)
0C920                               ;; [@TODO]
0C920                               
0C920                               ;; Return
0C920 60                            RTS0C921                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0C921                           sub_GetPPUAddrFromYXIndex:
0C921                           
0C921                               ;; Get the PPU address from YX index
0C921                               ;; - Expects YX index (aka tile offset) to be in the X register
0C921                               ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0C921                               
0C921                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C921                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C921                               
0C921 8A                            TXA
0C922 29 C0                         AND #%11000000
0C924 18                            CLC
0C925 2A                            ROL
0C926 2A                            ROL
0C927 2A                            ROL
0C928 69 20                         ADC #$20
0C92A 85 00                         STA temp
0C92C                               
0C92C 8A                            TXA
0C92D 29 0F                         AND #%00001111
0C92F 0A                            ASL
0C930 85 01                         STA temp+1
0C932                               
0C932 8A                            TXA
0C933 29 30                         AND #%00110000
0C935 0A                            ASL
0C936 0A                            ASL
0C937 18                            CLC
0C938 65 01                         ADC temp+1
0C93A 85 01                         STA temp+1
0C93C                               
0C93C A5 00                         LDA temp
0C93E 69 00                         ADC #$00
0C940 85 00                         STA temp
0C942                               
0C942 A5 01                         LDA temp+1
0C944 18                            CLC
0C945 69 C2                         ADC #$C2
0C947 85 01                         STA temp+1
0C949                               
0C949 A5 00                         LDA temp
0C94B 69 00                         ADC #$00
0C94D 85 00                         STA temp
0C94F                           
0C94F 60                            RTS0C950                           .include "game/subroutine/InitiateNudge.asm"
0C950                           
0C950                           sub_InitiateNudge:
0C950 85 37                         STA ball_flags
0C952 A9 05                         LDA #NUDGE_FRAMES
0C954 85 3E                         STA nudge_timer
0C956 60                            RTS
0C957                           
0C957                           .include "game/subroutine/JumpToPointer.asm"
0C957                           sub_JumpToPointer:
0C957 6C 0C 00                      JMP (pointer)
0C95A                               ;RTS must be handled by the routine (pointer) jumps to
0C95A                           .include "game/subroutine/LoadGameScreen.asm"
0C95A                           sub_LoadGameScreen:
0C95A                           
0C95A                               ;; Clear the screen
0C95A 20 9C C5                      JSR sub_ClearScreen
0C95D                               
0C95D                               ;; Clear collision and attribute data; reset blocks left in the process
0C95D A2 00                         LDX #$00
0C95F 8A                            TXA
0C960 85 43                         STA blocks_left
0C962                               -
0C962 9D 00 04                          STA tile_type,x
0C965 E8                                INX
0C966 D0 FA                         BNE -
0C968                               
0C968                               ;; Get pointer from current level
0C968 A6 41                         LDX current_level
0C96A BD AE D7                      LDA tbl_lvl_layout_lo,x
0C96D 85 0C                         STA pointer
0C96F BD 95 D7                      LDA tbl_lvl_layout_hi,x
0C972 85 0D                         STA pointer+1
0C974                           
0C974                               ;; Set up the loop
0C974 A0 00                         LDY #$00
0C976                           -drawRowColumnLoop:
0C976                           
0C976                               ;; Load (x,y) of current set of tiles
0C976 B1 0C                         LDA (pointer),y
0C978                           
0C978                               ;; Check if level is done; if so, skip the loop
0C978 C9 FF                         CMP #LEVEL_END
0C97A D0 03                         BNE +
0C97C 4C C5 CA                          JMP +doneLevelLoad
0C97F                               +
0C97F                           
0C97F                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C97F 85 00                         STA temp
0C981 C8                            INY
0C982 B1 0C                         LDA (pointer),y
0C984 85 01                         STA temp+1
0C986                               
0C986                               ;; Convert (x,y) to PPU address
0C986                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C986 A5 00                         LDA temp
0C988 29 0F                         AND #%00001111
0C98A 4A                            LSR
0C98B 4A                            LSR
0C98C 09 20                         ORA #$20
0C98E 85 02                         STA temp+2
0C990                               
0C990                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C990 A5 00                         LDA temp
0C992 29 F0                         AND #%11110000
0C994 4A                            LSR
0C995 4A                            LSR
0C996 4A                            LSR
0C997 85 03                         STA temp+3
0C999                               
0C999 A5 00                         LDA temp
0C99B 29 03                         AND #%00000011
0C99D AA                            TAX
0C99E BD 09 D8                      LDA tbl_Times64,x
0C9A1 18                            CLC
0C9A2 65 03                         ADC temp+3
0C9A4 18                            CLC
0C9A5 69 C2                         ADC #$C2
0C9A7 85 03                         STA temp+3
0C9A9                               
0C9A9                               ;; Add carry to temp+2
0C9A9 A5 02                         LDA temp+2
0C9AB 69 00                         ADC #$00
0C9AD 85 02                         STA temp+2
0C9AF                           
0C9AF                               ;; Convert tile data to loop count and tile type
0C9AF                               ;; temp+4 = color
0C9AF A5 01                         LDA temp+1
0C9B1 29 07                         AND #%00000111
0C9B3 85 04                         STA temp+4
0C9B5                               
0C9B5                               ;; If color = 7, this is a wall
0C9B5 C9 07                         CMP #%00000111
0C9B7 F0 12                         BEQ +wallHack
0C9B9                                   
0C9B9                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C9B9 29 01                             AND #%00000001
0C9BB F0 02                             BEQ +
0C9BD A9 05                                 LDA #$05
0C9BF                                   +
0C9BF 85 07                             STA temp+7
0C9C1                                
0C9C1                                   ;; temp+5 = tile type
0C9C1 A5 01                             LDA temp+1
0C9C3 4A                                LSR
0C9C4 4A                                LSR
0C9C5 4A                                LSR
0C9C6 29 03                             AND #%00000011
0C9C8 4C D1 C9                          JMP +setTileType
0C9CB                               +wallHack:
0C9CB                               
0C9CB                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C9CB A9 00                         LDA #$00
0C9CD 85 07                         STA temp+7
0C9CF A9 04                         LDA #$04
0C9D1                           
0C9D1                           +setTileType:    
0C9D1 85 05                         STA temp+5
0C9D3                               
0C9D3                               ;; X = tile offset
0C9D3 18                            CLC
0C9D4 65 07                         ADC temp+7
0C9D6 AA                            TAX
0C9D7                               
0C9D7                               ;; temp+6 = number of tiles
0C9D7 A5 01                         LDA temp+1
0C9D9 29 60                         AND #%01100000
0C9DB 4A                            LSR
0C9DC 4A                            LSR
0C9DD 4A                            LSR
0C9DE 4A                            LSR
0C9DF 4A                            LSR
0C9E0 85 06                         STA temp+6
0C9E2                               
0C9E2                               ;; Translate (x,y) to (y,x) for tile RAM
0C9E2 A5 00                         LDA temp
0C9E4 0A                            ASL
0C9E5 0A                            ASL
0C9E6 0A                            ASL
0C9E7 0A                            ASL
0C9E8 85 08                         STA temp+8
0C9EA A5 00                         LDA temp
0C9EC 4A                            LSR
0C9ED 4A                            LSR
0C9EE 4A                            LSR
0C9EF 4A                            LSR
0C9F0 05 08                         ORA temp+8
0C9F2 85 00                         STA temp
0C9F4                               
0C9F4                               ;; Set up loop
0C9F4 98                            TYA
0C9F5 48                            PHA
0C9F6 A4 06                         LDY temp+6
0C9F8                           
0C9F8                               -drawTileLoop:
0C9F8                                   ;; Write PPU address
0C9F8 2C 02 20                          BIT PPU_STATUS
0C9FB A5 02                             LDA temp+2
0C9FD 8D 06 20                          STA PPU_ADDR
0CA00 A5 03                             LDA temp+3
0CA02 8D 06 20                          STA PPU_ADDR
0CA05                                   
0CA05                                   ;; Write first and second tile
0CA05 BD 0D D8                          LDA tbl_GametileTopLeft,x
0CA08 8D 07 20                          STA PPU_DATA
0CA0B BD 17 D8                          LDA tbl_GametileTopRight,x
0CA0E 8D 07 20                          STA PPU_DATA
0CA11                                   
0CA11                                   ;; Update PPU address
0CA11 2C 02 20                          BIT PPU_STATUS
0CA14 A5 02                             LDA temp+2
0CA16 8D 06 20                          STA PPU_ADDR
0CA19 A5 03                             LDA temp+3
0CA1B 18                                CLC
0CA1C 69 20                             ADC #$20
0CA1E 8D 06 20                          STA PPU_ADDR
0CA21                                   
0CA21                                   ;; Write third and fourth tile
0CA21 BD 21 D8                          LDA tbl_GametileBottomLeft,x
0CA24 8D 07 20                          STA PPU_DATA
0CA27 BD 2B D8                          LDA tbl_GametileBottomRight,x
0CA2A 8D 07 20                          STA PPU_DATA
0CA2D                           
0CA2D                                   ;; Push x-register to stack
0CA2D 8A                                TXA
0CA2E 48                                PHA
0CA2F                           
0CA2F                                   ;; Update tile RAM (aka collision table)
0CA2F A6 05                             LDX temp+5
0CA31 BD 35 D8                          LDA tbl_GameTileRamByte,x
0CA34 05 04                             ORA temp+4
0CA36 0A                                ASL
0CA37 09 01                             ORA #%00000001
0CA39 A6 00                             LDX temp
0CA3B 9D 00 04                          STA tile_type,x
0CA3E                           
0CA3E                                   ;; Check if shade 1 should be drawn
0CA3E E8                                INX
0CA3F BD 00 04                          LDA tile_type,x
0CA42 D0 05                             BNE +
0CA44 A9 00                                 LDA #$00
0CA46 8D 07 20                              STA PPU_DATA
0CA49                                   +
0CA49                                   
0CA49                                   ;; Check if shade 2 should be drawn
0CA49 A5 03                             LDA temp+3
0CA4B 18                                CLC
0CA4C 69 41                             ADC #$41
0CA4E 85 03                             STA temp+3
0CA50 A5 02                             LDA temp+2
0CA52 69 00                             ADC #$00
0CA54 85 02                             STA temp+2
0CA56                                   
0CA56 8A                                TXA
0CA57 18                                CLC
0CA58 69 0F                             ADC #$0F
0CA5A AA                                TAX
0CA5B                                   
0CA5B BD 00 04                          LDA tile_type,x
0CA5E D0 0F                             BNE +
0CA60 A5 02                                 LDA temp+2
0CA62 8D 06 20                              STA PPU_ADDR
0CA65 A5 03                                 LDA temp+3
0CA67 8D 06 20                              STA PPU_ADDR
0CA6A A9 00                                 LDA #$00
0CA6C 8D 07 20                              STA PPU_DATA
0CA6F                                   +
0CA6F                           
0CA6F                                   ;; Check if shade 3 should be drawn
0CA6F E8                                INX
0CA70 E6 03                             INC temp+3
0CA72 BD 00 04                          LDA tile_type,x
0CA75 D0 0F                             BNE +
0CA77 A5 02                                 LDA temp+2
0CA79 8D 06 20                              STA PPU_ADDR
0CA7C A5 03                                 LDA temp+3
0CA7E 8D 06 20                              STA PPU_ADDR
0CA81 A9 00                                 LDA #$00
0CA83 8D 07 20                              STA PPU_DATA
0CA86                                   +
0CA86                                   
0CA86                                   ;; Restore x-register from stack
0CA86 68                                PLA
0CA87 AA                                TAX
0CA88                                   
0CA88                                   ;; Reset pointer for next tile
0CA88 A5 03                             LDA temp+3
0CA8A 38                                SEC
0CA8B E9 42                             SBC #$42
0CA8D 85 03                             STA temp+3
0CA8F A5 02                             LDA temp+2
0CA91 E9 00                             SBC #$00
0CA93 85 02                             STA temp+2
0CA95                                   
0CA95                                   ;; Draw next metatile in this loop (if any left)
0CA95 88                                DEY
0CA96 30 27                             BMI +doneDrawingRowColumn
0CA98                                   
0CA98                                   ;; Is it a row or a column?
0CA98 A5 01                             LDA temp+1
0CA9A 10 17                             BPL +
0CA9C                                       ;; It is a column: move pointer down (+$40)
0CA9C A5 03                                 LDA temp+3
0CA9E 18                                    CLC
0CA9F 69 40                                 ADC #$40
0CAA1 85 03                                 STA temp+3
0CAA3 A5 02                                 LDA temp+2
0CAA5 69 00                                 ADC #$00
0CAA7 85 02                                 STA temp+2
0CAA9                                       
0CAA9                                       ;; Add 16 to temp (as a tile RAM pointer)
0CAA9 A5 00                                 LDA temp
0CAAB 18                                    CLC
0CAAC 69 10                                 ADC #$10
0CAAE 85 00                                 STA temp
0CAB0 4C BC CA                              JMP +drawNextTile
0CAB3                                   +
0CAB3                                   
0CAB3                                   ;; It is a row: move pointer right (+$02)
0CAB3 A5 03                             LDA temp+3
0CAB5 18                                CLC
0CAB6 69 02                             ADC #$02
0CAB8 85 03                             STA temp+3
0CABA                                   
0CABA                                   ;; Add 1 to temp (as a tile RAM pointer)
0CABA E6 00                             INC temp
0CABC                           
0CABC                               
0CABC                               ;; Next tile in the row/column
0CABC                                   +drawNextTile:
0CABC 4C F8 C9                      JMP -drawTileLoop
0CABF                           
0CABF                               ;; Go to the next set of tiles
0CABF                           +doneDrawingRowColumn:
0CABF 68                            PLA
0CAC0 A8                            TAY
0CAC1 C8                            INY
0CAC2 4C 76 C9                      JMP -drawRowColumnLoop
0CAC5                           
0CAC5                           ;; Level loading is done
0CAC5                           +doneLevelLoad:
0CAC5                           
0CAC5                               ;; Count number of color blocks
0CAC5 A2 A0                         LDX #160
0CAC7                               -
0CAC7 BD FF 03                          LDA tile_type-1,x
0CACA 29 80                             AND #%10000000
0CACC F0 02                             BEQ +
0CACE E6 43                                 INC blocks_left
0CAD0                                   +
0CAD0 CA                                DEX
0CAD1 D0 F4                         BNE -
0CAD3                           
0CAD3                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CAD3 A9 20                         LDA #$20
0CAD5 8D 06 20                      STA PPU_ADDR
0CAD8 A9 A2                         LDA #$A2
0CADA 8D 06 20                      STA PPU_ADDR
0CADD A9 35                         LDA #$35
0CADF 20 0D CD                      JSR sub_Draw28HorizontalTiles
0CAE2                           
0CAE2                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CAE2 A9 23                         LDA #$23
0CAE4 8D 06 20                      STA PPU_ADDR
0CAE7 A9 42                         LDA #$42
0CAE9 8D 06 20                      STA PPU_ADDR
0CAEC A9 31                         LDA #$31
0CAEE 20 0D CD                      JSR sub_Draw28HorizontalTiles
0CAF1                           
0CAF1                               ;; Left & right game bounds
0CAF1                               ;; Set PPU_ADDR and store in temp variables
0CAF1 A9 20                         LDA #$20
0CAF3 85 00                         STA temp
0CAF5 8D 06 20                      STA PPU_ADDR
0CAF8 A9 C1                         LDA #$C1
0CAFA 85 01                         STA temp+1
0CAFC 8D 06 20                      STA PPU_ADDR
0CAFF                               
0CAFF                               ;; Set vertical bound tile and set up loop
0CAFF A0 33                         LDY #$33
0CB01 A2 14                         LDX #20
0CB03                               -
0CB03                                   ;; Show left tile
0CB03 8C 07 20                          STY PPU_DATA
0CB06                                   
0CB06                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CB06 A5 00                             LDA temp
0CB08 8D 06 20                          STA PPU_ADDR
0CB0B A5 01                             LDA temp+1
0CB0D 18                                CLC
0CB0E 69 1D                             ADC #29
0CB10 85 01                             STA temp+1
0CB12 8D 06 20                          STA PPU_ADDR
0CB15                           
0CB15                                   ;; Show right tile
0CB15 8C 07 20                          STY PPU_DATA
0CB18                           
0CB18                                   ;; Check if we're done yet
0CB18 CA                                DEX
0CB19 F0 18                             BEQ +drawCorners
0CB1B                                   
0CB1B                                   ;; Not done yet: add 3 to low byte for next left bound
0CB1B A5 01                             LDA temp+1
0CB1D 18                                CLC
0CB1E 69 03                             ADC #3
0CB20 85 01                             STA temp+1
0CB22                                   
0CB22                                   ;; Apply carry to high byte
0CB22 A5 00                             LDA temp
0CB24 69 00                             ADC #$00
0CB26 85 00                             STA temp
0CB28                                   
0CB28                                   ;; Store next PPU_ADDR to draw at
0CB28 8D 06 20                          STA PPU_ADDR
0CB2B A5 01                             LDA temp+1
0CB2D 8D 06 20                          STA PPU_ADDR
0CB30 4C 03 CB                      JMP -
0CB33                               
0CB33                               
0CB33                           
0CB33                           +drawCorners:
0CB33                               ;; Draw the corners of the playing field
0CB33 A9 20                         LDA #$20
0CB35 8D 06 20                      STA PPU_ADDR
0CB38 A9 A1                         LDA #$A1
0CB3A 8D 06 20                      STA PPU_ADDR
0CB3D A9 39                         LDA #$39
0CB3F 8D 07 20                      STA PPU_DATA
0CB42                           
0CB42 A9 20                         LDA #$20
0CB44 8D 06 20                      STA PPU_ADDR
0CB47 A9 BE                         LDA #$BE
0CB49 8D 06 20                      STA PPU_ADDR
0CB4C A9 3A                         LDA #$3A
0CB4E 8D 07 20                      STA PPU_DATA
0CB51                               ;; (added background tile for Sprite-0 hit)
0CB51 A9 3F                         LDA #$3F
0CB53 8D 07 20                      STA PPU_DATA
0CB56                           
0CB56 A9 23                         LDA #$23
0CB58 8D 06 20                      STA PPU_ADDR
0CB5B A9 41                         LDA #$41
0CB5D 8D 06 20                      STA PPU_ADDR
0CB60 A9 36                         LDA #$36
0CB62 8D 07 20                      STA PPU_DATA
0CB65                           
0CB65 A9 23                         LDA #$23
0CB67 8D 06 20                      STA PPU_ADDR
0CB6A A9 5E                         LDA #$5E
0CB6C 8D 06 20                      STA PPU_ADDR
0CB6F A9 34                         LDA #$34
0CB71 8D 07 20                      STA PPU_DATA
0CB74                           
0CB74                           
0CB74                               ;; Draw the hud labels
0CB74 A9 20                         LDA #$20
0CB76 8D 06 20                      STA PPU_ADDR
0CB79 A9 62                         LDA #$62
0CB7B 8D 06 20                      STA PPU_ADDR
0CB7E A2 00                         LDX #$00
0CB80                               -
0CB80 BD 3A D8                          LDA tbl_HudText,x
0CB83 8D 07 20                          STA PPU_DATA
0CB86 E8                                INX
0CB87 E0 1C                             CPX #28
0CB89 D0 F5                         BNE -
0CB8B                           
0CB8B                           
0CB8B                               ;; Draw the current score
0CB8B A9 20                         LDA #$20
0CB8D 8D 06 20                      STA PPU_ADDR
0CB90 A9 83                         LDA #$83
0CB92 8D 06 20                      STA PPU_ADDR
0CB95 A2 00                         LDX #$00
0CB97                               -
0CB97 B5 20                             LDA ball_score,x
0CB99 18                                CLC
0CB9A 69 01                             ADC #$01
0CB9C 8D 07 20                          STA PPU_DATA
0CB9F E8                                INX
0CBA0 E0 06                             CPX #$06
0CBA2 D0 F3                         BNE -
0CBA4                           
0CBA4                           
0CBA4                               ;; Draw the level number
0CBA4                               ;; (with primitive HEX>DEC)
0CBA4 A5 41                         LDA current_level
0CBA6 18                            CLC
0CBA7 69 01                         ADC #$01
0CBA9 85 01                         STA temp+1
0CBAB                               
0CBAB C9 14                         CMP #20
0CBAD B0 13                         BCS +tempIsTwo
0CBAF                               
0CBAF C9 0A                         CMP #10
0CBB1 B0 05                         BCS +tempIsOne
0CBB3                               
0CBB3 A9 00                         LDA #$00
0CBB5 4C C9 CB                      JMP +setTemp
0CBB8                               
0CBB8                           +tempIsOne:
0CBB8 38                            SEC
0CBB9 E9 0A                         SBC #10
0CBBB 85 01                         STA temp+1
0CBBD A9 01                         LDA #$01
0CBBF 4C C9 CB                      JMP +setTemp
0CBC2                               
0CBC2                           +tempIsTwo:
0CBC2 38                            SEC
0CBC3 E9 14                         SBC #20
0CBC5 85 01                         STA temp+1
0CBC7 A9 02                         LDA #$02
0CBC9                           
0CBC9                           +setTemp:
0CBC9 85 00                         STA temp
0CBCB                               
0CBCB E6 00                         INC temp
0CBCD E6 01                         INC temp+1
0CBCF                               
0CBCF A9 20                         LDA #$20
0CBD1 8D 06 20                      STA PPU_ADDR
0CBD4 A9 8B                         LDA #$8B
0CBD6 8D 06 20                      STA PPU_ADDR
0CBD9 A5 00                         LDA temp
0CBDB 8D 07 20                      STA PPU_DATA
0CBDE A5 01                         LDA temp+1
0CBE0 8D 07 20                      STA PPU_DATA
0CBE3                           
0CBE3                           
0CBE3                               ;; Draw lives (presumes lives to be capped at 9)
0CBE3 A9 20                         LDA #$20
0CBE5 8D 06 20                      STA PPU_ADDR
0CBE8 A9 92                         LDA #$92
0CBEA 8D 06 20                      STA PPU_ADDR
0CBED A6 1F                         LDX ball_lives
0CBEF E8                            INX
0CBF0 8E 07 20                      STX PPU_DATA
0CBF3                           
0CBF3                           
0CBF3                               ;; Set and draw bonus
0CBF3 A9 07                         LDA #$07
0CBF5 85 2C                         STA ball_bonus
0CBF7 A9 09                         LDA #$09
0CBF9 85 2D                         STA ball_bonus+1
0CBFB 85 2E                         STA ball_bonus+2
0CBFD                               
0CBFD A9 20                         LDA #$20
0CBFF 8D 06 20                      STA PPU_ADDR
0CC02 A9 9A                         LDA #$9A
0CC04 8D 06 20                      STA PPU_ADDR
0CC07 A2 00                         LDX #$00
0CC09                               -
0CC09 B5 2C                             LDA ball_bonus,x
0CC0B 18                                CLC
0CC0C 69 01                             ADC #$01
0CC0E 8D 07 20                          STA PPU_DATA
0CC11 E8                                INX
0CC12 E0 03                             CPX #$03
0CC14 D0 F3                         BNE -
0CC16                           
0CC16                           
0CC16                               ;; Set attribute data to RAM
0CC16                               
0CC16                               ;; Byte 0-7 of attribute ram should be #%10100000
0CC16 A2 00                         LDX #$00
0CC18 A9 A0                         LDA #$A0
0CC1A                               -
0CC1A 9D A0 04                          STA tile_attributes,x
0CC1D E8                                INX
0CC1E E0 08                             CPX #$08
0CC20 D0 F8                         BNE -
0CC22                           
0CC22                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CC22                           
0CC22                           -attributeLoop:
0CC22                               ;; Reset current attribute value
0CC22 A9 00                         LDA #$00
0CC24 85 02                         STA temp+2
0CC26                           
0CC26                               ;; Get first metatile in tile ram based on attribute index
0CC26                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CC26 8A                            TXA
0CC27                           
0CC27 38                            SEC
0CC28 E9 08                         SBC #$08
0CC2A 85 01                         STA temp+1      ; attr - 8 (temp1)
0CC2C 0A                            ASL             ; * 2
0CC2D 85 00                         STA temp        ; temp = temp1 * 2
0CC2F                           
0CC2F A5 01                         LDA temp+1      ; temp1
0CC31 29 F8                         AND #%11111000  ; rounded down to 8's
0CC33 0A                            ASL             ; * 2
0CC34 18                            CLC
0CC35 65 00                         ADC temp        ; + temp1 * 2
0CC37 85 00                         STA temp        ; first metatile
0CC39                           
0CC39                               ;; Store first metatile in y-register
0CC39 A8                            TAY
0CC3A                           
0CC3A                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CC3A 8A                            TXA
0CC3B 29 07                         AND #%00000111
0CC3D C9 07                         CMP #%00000111
0CC3F F0 0B                         BEQ +
0CC41                           
0CC41                               ;; If X >= $30, don't apply bottom right metatile
0CC41 E0 30                         CPX #$30
0CC43 B0 07                         BCS +
0CC45                               
0CC45                               ;; Add metatile1 subpalette to attribute value
0CC45 B9 00 04                      LDA tile_type,y
0CC48 29 0C                         AND #%00001100
0CC4A 85 02                         STA temp+2
0CC4C                               +
0CC4C                           
0CC4C                           
0CC4C                               ;; Apply second metatile
0CC4C 88                            DEY
0CC4D                           
0CC4D                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CC4D 8A                            TXA
0CC4E 29 07                         AND #%00000111
0CC50 F0 10                         BEQ +
0CC52                           
0CC52                               ;; If X >= $30, don't apply bottom left metatile
0CC52 E0 30                         CPX #$30
0CC54 B0 0C                         BCS +
0CC56                           
0CC56                           
0CC56                           
0CC56                               ;; Add metatile2 subpalette to attribute value
0CC56 B9 00 04                      LDA tile_type,y
0CC59 29 0C                         AND #%00001100
0CC5B 4A                            LSR
0CC5C 4A                            LSR
0CC5D 05 02                         ORA temp+2
0CC5F 4C 64 CC                      JMP ++
0CC62                               +
0CC62 A5 02                         LDA temp+2
0CC64                               ++
0CC64 0A                            ASL
0CC65 0A                            ASL
0CC66 85 02                         STA temp+2
0CC68                           
0CC68                           
0CC68                               ;; Apply third metatile
0CC68 98                            TYA
0CC69 38                            SEC
0CC6A E9 0F                         SBC #$0F
0CC6C A8                            TAY
0CC6D                           
0CC6D                               ;; If X MOD 8 == 7, don't apply top right metatile
0CC6D 8A                            TXA
0CC6E 29 07                         AND #%00000111
0CC70 C9 07                         CMP #%00000111
0CC72 F0 11                         BEQ +
0CC74                           
0CC74                               ;; If X < $10, don't apply top right metatile
0CC74 8A                            TXA
0CC75 29 F0                         AND #%11110000
0CC77 F0 0C                         BEQ +
0CC79                           
0CC79                               ;; Add metatile3 subpalette to attribute value
0CC79 B9 00 04                      LDA tile_type,y
0CC7C 29 0C                         AND #%00001100
0CC7E 4A                            LSR
0CC7F 4A                            LSR
0CC80 05 02                         ORA temp+2
0CC82 4C 87 CC                      JMP ++
0CC85                               +
0CC85 A5 02                         LDA temp+2
0CC87                               ++
0CC87 0A                            ASL
0CC88 0A                            ASL
0CC89 85 02                         STA temp+2
0CC8B                           
0CC8B                           
0CC8B                               ;; Apply fourth metatile
0CC8B 88                            DEY
0CC8C                           
0CC8C                               ;; If X MOD 8 == 0, don't apply top left metatile
0CC8C 8A                            TXA
0CC8D 29 07                         AND #%00000111
0CC8F F0 11                         BEQ +
0CC91                           
0CC91                               ;; If X < $10, don't apply top left metatile
0CC91 8A                            TXA
0CC92 29 F0                         AND #%11110000
0CC94 F0 0C                         BEQ +
0CC96                           
0CC96                               ;; Add metatile4 subpalette to attribute value
0CC96 B9 00 04                      LDA tile_type,y
0CC99 29 0C                         AND #%00001100
0CC9B 4A                            LSR
0CC9C 4A                            LSR
0CC9D 05 02                         ORA temp+2
0CC9F 4C A4 CC                      JMP ++
0CCA2                               +
0CCA2 A5 02                         LDA temp+2
0CCA4                               ++
0CCA4 9D A0 04                      STA tile_attributes,x
0CCA7                           
0CCA7                               ;; Check the next attribute, if any left
0CCA7 E8                            INX
0CCA8 E0 38                         CPX #$38
0CCAA F0 03                         BEQ +
0CCAC 4C 22 CC                          JMP -attributeLoop
0CCAF                               +
0CCAF                           
0CCAF                               ;; Stream attribute RAM to PPU
0CCAF 2C 02 20                      BIT PPU_STATUS
0CCB2 A9 23                         LDA #$23
0CCB4 8D 06 20                      STA PPU_ADDR
0CCB7 A9 C0                         LDA #$C0
0CCB9 8D 06 20                      STA PPU_ADDR
0CCBC A2 00                         LDX #$00
0CCBE                               -
0CCBE BD A0 04                          LDA tile_attributes,x
0CCC1 8D 07 20                          STA PPU_DATA
0CCC4 E8                                INX
0CCC5 E0 40                             CPX #$40
0CCC7 D0 F5                         BNE -
0CCC9                           
0CCC9                               ;; Set initial ball position
0CCC9 A6 41                         LDX current_level
0CCCB BD C7 D7                      LDA tbl_lvl_ball_startpos,x
0CCCE 29 F0                         AND #%11110000
0CCD0 18                            CLC
0CCD1 69 34                         ADC #$34
0CCD3 85 19                         STA ball_ypos_hi
0CCD5 BD C7 D7                      LDA tbl_lvl_ball_startpos,x
0CCD8 0A                            ASL
0CCD9 0A                            ASL
0CCDA 0A                            ASL
0CCDB 0A                            ASL
0CCDC 18                            CLC
0CCDD 69 14                         ADC #$14
0CCDF 85 17                         STA ball_xpos_hi
0CCE1 A9 00                         LDA #$00
0CCE3 85 18                         STA ball_xpos_lo
0CCE5 85 1A                         STA ball_ypos_lo
0CCE7                               
0CCE7                               ;; Set initial ball color and direction
0CCE7 BD E0 D7                      LDA tbl_lvl_ball_init,x
0CCEA 29 F0                         AND #%11110000
0CCEC 85 37                         STA ball_flags
0CCEE 20 07 C6                      JSR sub_ColorizeBall
0CCF1                               
0CCF1                               ;; Reset bonus timer
0CCF1 A9 06                         LDA #BONUS_FRAMES
0CCF3 85 3F                         STA bonus_timer
0CCF5                               
0CCF5                               ;; Play background noise
0CCF5 A9 08                         LDA #$08
0CCF7 8D 15 40                      STA APU_STATUS
0CCFA 8D 0F 40                      STA NOISE_LENGTH
0CCFD A9 0E                         LDA #$0E
0CCFF 85 46                         STA current_noise
0CD01 A9 00                         LDA #$00
0CD03 85 44                         STA max_noise
0CD05 85 47                         STA noise_timer
0CD07 85 45                         STA sweep_noise
0CD09 20 8F C5                      JSR sub_BackgroundNoise
0CD0C                           
0CD0C                               ;; Return
0CD0C 60                            RTS
0CD0D                           
0CD0D                           
0CD0D                           ;; Subroutine: draw 28 tiles in a row
0CD0D                           sub_Draw28HorizontalTiles:
0CD0D A2 1C                         LDX #28
0CD0F                               -
0CD0F 8D 07 20                          STA PPU_DATA
0CD12 CA                                DEX
0CD13 D0 FA                         BNE -
0CD15 60                            RTS0CD16                           .include "game/subroutine/LoadIntroScreen.asm"
0CD16                           sub_LoadIntroScreen:
0CD16                           
0CD16                               ;; Load intro palette
0CD16 2C 02 20                      BIT PPU_STATUS
0CD19 A9 3F                         LDA #$3F
0CD1B 8D 06 20                      STA PPU_ADDR
0CD1E A9 00                         LDA #$00
0CD20 8D 06 20                      STA PPU_ADDR
0CD23 A2 00                         LDX #$00
0CD25                               -
0CD25 BD 6C CF                          LDA tbl_IntroScreenPalette,x
0CD28 8D 07 20                          STA PPU_DATA
0CD2B E8                                INX
0CD2C E0 20                             CPX #$20
0CD2E D0 F5                         BNE -
0CD30                               
0CD30                               ;; Put ball in the middle
0CD30 A9 7C                         LDA #$7C
0CD32 85 17                         STA ball_xpos_hi
0CD34 85 19                         STA ball_ypos_hi
0CD36                           
0CD36                               ;; Clear the screen
0CD36 20 9C C5                      JSR sub_ClearScreen
0CD39                           
0CD39                               ;; Set up intro screen draw loop
0CD39 A2 00                         LDX #$00
0CD3B                           
0CD3B                           -loop_IntroScreenData:
0CD3B                           
0CD3B                               ;; Get current byte from intro screen data
0CD3B BD 94 CF                      LDA tbl_IntroScreenData,x
0CD3E                           
0CD3E                               ;; If current byte is #$3F, we're done drawing.
0CD3E C9 3F                         CMP #$3F
0CD40 D0 03                         BNE +
0CD42 4C 8F CD                          JMP +goToEndIntroScreen
0CD45                               +
0CD45                           
0CD45                               ;; If highest bits are %11, draw a plain tile
0CD45 29 C0                         AND #%11000000
0CD47 D0 03                         BNE +
0CD49 4C 6F CD                          JMP +drawTile
0CD4C                               +
0CD4C                               
0CD4C                               ;; If highest bits are %01, set the PPU address
0CD4C                               ;; If not, draw two logo tiles
0CD4C C9 40                         CMP #%01000000
0CD4E D0 03                         BNE +drawLogo
0CD50 4C 79 CD                          JMP +setPpuAddr
0CD53                           
0CD53                           +drawLogo:
0CD53                               ;; Get bits 0-2 and store in a temp variable
0CD53 BD 94 CF                      LDA tbl_IntroScreenData,x
0CD56 29 07                         AND #%00000111
0CD58 85 00                         STA temp
0CD5A                               
0CD5A                               ;; Get bits 3-5, shift over to get a value from 0-7
0CD5A BD 94 CF                      LDA tbl_IntroScreenData,x
0CD5D 4A                            LSR
0CD5E 4A                            LSR
0CD5F 4A                            LSR
0CD60 29 07                         AND #%00000111
0CD62                               
0CD62                               ;; Draw the tile that corresponds with that value
0CD62 A8                            TAY
0CD63 20 7F C6                      JSR sub_drawIntroScreenLogoTile
0CD66                               
0CD66                               ;; Do the same for the value stored in temp
0CD66 A4 00                         LDY temp
0CD68 20 7F C6                      JSR sub_drawIntroScreenLogoTile
0CD6B                           
0CD6B                               ;; Next byte please
0CD6B E8                            INX
0CD6C 4C 3B CD                      JMP -loop_IntroScreenData
0CD6F                           
0CD6F                           +drawTile:
0CD6F                               ;; Just draw the tile value on screen
0CD6F BD 94 CF                      LDA tbl_IntroScreenData,x
0CD72 8D 07 20                      STA PPU_DATA
0CD75                               
0CD75                               ;; Next byte please
0CD75 E8                            INX
0CD76 4C 3B CD                      JMP -loop_IntroScreenData
0CD79                           
0CD79                           
0CD79                           +setPpuAddr:
0CD79                               ;; Reset the PPU latch
0CD79 2C 02 20                      BIT PPU_STATUS
0CD7C                               
0CD7C                               ;; Sanitize and write the high byte of the PPU address
0CD7C BD 94 CF                      LDA tbl_IntroScreenData,x
0CD7F 29 3F                         AND #%00111111
0CD81 8D 06 20                      STA PPU_ADDR
0CD84                           
0CD84                               ;; Write the low byte of the PPU address
0CD84 E8                            INX
0CD85 BD 94 CF                      LDA tbl_IntroScreenData,x
0CD88 8D 06 20                      STA PPU_ADDR
0CD8B                               
0CD8B                               ;; PPU has been set up to draw tiles at the correct spot now.
0CD8B                               
0CD8B                               ;; Next byte please.
0CD8B E8                            INX
0CD8C 4C 3B CD                      JMP -loop_IntroScreenData
0CD8F                           
0CD8F                           +goToEndIntroScreen:
0CD8F                           
0CD8F                               ;; To color the 1.LEVEL: line green, we need to update two
0CD8F                               ;; values in the PPU attribute data.
0CD8F 2C 02 20                      BIT PPU_STATUS
0CD92 A9 23                         LDA #$23
0CD94 8D 06 20                      STA PPU_ADDR
0CD97 A9 CB                         LDA #$CB
0CD99 8D 06 20                      STA PPU_ADDR
0CD9C A9 0A                         LDA #%00001010
0CD9E 8D 07 20                      STA PPU_DATA
0CDA1 8D 07 20                      STA PPU_DATA
0CDA4                           
0CDA4 60                            RTS
0CDA5                           
0CDA5                           .include "game/subroutine/LoadWinScreen.asm"
0CDA5                           sub_LoadWinScreen:
0CDA5 60                            RTS
0CDA6                           
0CDA6                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CDA6                           sub_RemoveBlockFromScreen:
0CDA6                           
0CDA6                               ;; Get current buffer location
0CDA6 A4 3A                         LDY ppu_buffer_pointer
0CDA8                               
0CDA8                               ;; TILE 1: if metatile on top left is solid, draw
0CDA8                               ;; null tile, else draw random noise tile
0CDA8 A9 00                         LDA #$00
0CDAA 85 39                         STA ppu_buffer_update
0CDAC                               
0CDAC A5 00                         LDA temp
0CDAE 99 00 03                      STA ppu_buffer,y
0CDB1 C8                            INY
0CDB2 A5 01                         LDA temp+1
0CDB4 99 00 03                      STA ppu_buffer,y
0CDB7 C8                            INY
0CDB8                               
0CDB8 8A                            TXA
0CDB9 29 0F                         AND #%00001111
0CDBB F0 11                         BEQ +drawRandomTile
0CDBD                           
0CDBD 8A                            TXA
0CDBE 29 F0                         AND #%11110000
0CDC0 F0 0C                         BEQ +drawRandomTile
0CDC2                           
0CDC2 BD EF 03                      LDA tile_type-17,x
0CDC5 29 01                         AND #%00000001
0CDC7 F0 05                         BEQ +drawRandomTile  
0CDC9                           
0CDC9                               ;; Draw a null tile
0CDC9 A9 00                         LDA #$00
0CDCB 4C D6 CD                      JMP +addToPPUBuffer
0CDCE                               
0CDCE                           +drawRandomTile:
0CDCE                               ;; Draw a random tile
0CDCE 20 FF C4                      JSR sub_GetRandomNumber
0CDD1 29 07                         AND #%00000111
0CDD3 18                            CLC
0CDD4 69 68                         ADC #$68
0CDD6                               
0CDD6                               ;; Add tile to ppu buffer
0CDD6                           +addToPPUBuffer:
0CDD6 99 00 03                      STA ppu_buffer,y
0CDD9 C8                            INY
0CDDA                           
0CDDA                               ;; TILE 2: If metatile above is solid, draw null,
0CDDA                               ;; else draw random noise.
0CDDA E6 01                         INC temp+1
0CDDC A5 00                         LDA temp
0CDDE 99 00 03                      STA ppu_buffer,y
0CDE1 C8                            INY
0CDE2 A5 01                         LDA temp+1
0CDE4 99 00 03                      STA ppu_buffer,y
0CDE7 C8                            INY
0CDE8                               
0CDE8 8A                            TXA
0CDE9 29 F0                         AND #%11110000
0CDEB F0 0C                         BEQ +drawRandomTile
0CDED                               
0CDED BD F0 03                      LDA tile_type-16,x
0CDF0 29 01                         AND #%00000001
0CDF2 F0 05                         BEQ +drawRandomTile
0CDF4                               
0CDF4 A9 00                         LDA #%00
0CDF6 4C 01 CE                      JMP +addToPPUBuffer
0CDF9                           
0CDF9                           +drawRandomTile:
0CDF9 20 FF C4                      JSR sub_GetRandomNumber
0CDFC 29 07                         AND #%00000111
0CDFE 18                            CLC
0CDFF 69 68                         ADC #$68
0CE01                           
0CE01                           +addToPPUBuffer:
0CE01 99 00 03                      STA ppu_buffer,y
0CE04 C8                            INY
0CE05                               
0CE05                               ;; TILE 3 - If metatile left is solid, draw null,
0CE05                               ;; else draw random noise.
0CE05 A5 01                         LDA temp+1
0CE07 18                            CLC
0CE08 69 1F                         ADC #$1F
0CE0A 85 01                         STA temp+1
0CE0C A5 00                         LDA temp
0CE0E 69 00                         ADC #$00
0CE10 85 00                         STA temp
0CE12 99 00 03                      STA ppu_buffer,y
0CE15 C8                            INY
0CE16 A5 01                         LDA temp+1
0CE18 99 00 03                      STA ppu_buffer,y
0CE1B C8                            INY
0CE1C                               
0CE1C 8A                            TXA
0CE1D 29 0F                         AND #%00001111
0CE1F F0 0C                         BEQ +drawRandomTile
0CE21                               
0CE21 BD FF 03                      LDA tile_type-1,x
0CE24 29 01                         AND #%00000001
0CE26 F0 05                         BEQ +drawRandomTile
0CE28                               
0CE28 A9 00                         LDA #%00
0CE2A 4C 35 CE                      JMP +addToPPUBuffer
0CE2D                           
0CE2D                           +drawRandomTile:
0CE2D 20 FF C4                      JSR sub_GetRandomNumber
0CE30 29 07                         AND #%00000111
0CE32 18                            CLC
0CE33 69 68                         ADC #$68
0CE35                               
0CE35                           +addToPPUBuffer:
0CE35 99 00 03                      STA ppu_buffer,y
0CE38 C8                            INY
0CE39                               
0CE39                               ;; TILE 4 - Always random noise
0CE39 E6 01                         INC temp+1
0CE3B A5 00                         LDA temp
0CE3D 99 00 03                      STA ppu_buffer,y
0CE40 C8                            INY
0CE41 A5 01                         LDA temp+1
0CE43 99 00 03                      STA ppu_buffer,y
0CE46 C8                            INY
0CE47 20 FF C4                      JSR sub_GetRandomNumber
0CE4A 29 07                         AND #%00000111
0CE4C 18                            CLC
0CE4D 69 68                         ADC #$68
0CE4F 99 00 03                      STA ppu_buffer,y
0CE52 C8                            INY
0CE53                           
0CE53                               ;; TILE 5 - If tile on the right is solid, skip,
0CE53                               ;; else draw random noise tile
0CE53 E6 01                         INC temp+1
0CE55                               
0CE55 8A                            TXA
0CE56 29 0F                         AND #%00001111
0CE58 C9 0D                         CMP #$0D
0CE5A F0 1F                         BEQ +skipTile
0CE5C                               
0CE5C BD 01 04                      LDA tile_type+1,x
0CE5F 29 01                         AND #%00000001
0CE61 D0 18                         BNE +skipTile
0CE63 A5 00                             LDA temp
0CE65 99 00 03                          STA ppu_buffer,y
0CE68 C8                                INY
0CE69 A5 01                             LDA temp+1
0CE6B 99 00 03                          STA ppu_buffer,y
0CE6E C8                                INY
0CE6F 20 FF C4                          JSR sub_GetRandomNumber
0CE72 29 07                             AND #%00000111
0CE74 18                                CLC
0CE75 69 68                             ADC #$68
0CE77 99 00 03                          STA ppu_buffer,y
0CE7A C8                                INY    
0CE7B                               +skipTile:
0CE7B                           
0CE7B                               ;; TILE 6 - If tile on bottom is solid, skip,
0CE7B                               ;; else draw random noise
0CE7B A5 01                         LDA temp+1
0CE7D 18                            CLC
0CE7E 69 1F                         ADC #$1F
0CE80 85 01                         STA temp+1
0CE82 A5 00                         LDA temp
0CE84 69 00                         ADC #$00
0CE86 85 00                         STA temp
0CE88                           
0CE88 8A                            TXA
0CE89 29 F0                         AND #%11110000
0CE8B C9 90                         CMP #$90
0CE8D F0 1F                         BEQ +skipTile
0CE8F                           
0CE8F BD 10 04                      LDA tile_type+16,x
0CE92 29 01                         AND #%00000001
0CE94 D0 18                         BNE +skipTile
0CE96 A5 00                             LDA temp
0CE98 99 00 03                          STA ppu_buffer,y
0CE9B C8                                INY
0CE9C A5 01                             LDA temp+1
0CE9E 99 00 03                          STA ppu_buffer,y
0CEA1 C8                                INY
0CEA2 20 FF C4                          JSR sub_GetRandomNumber
0CEA5 29 07                             AND #%00000111
0CEA7 18                                CLC
0CEA8 69 68                             ADC #$68
0CEAA 99 00 03                          STA ppu_buffer,y
0CEAD C8                                INY    
0CEAE                               +skipTile:
0CEAE                               
0CEAE                               ;; TILE 7 - If tile on bottom right is solid, skip,
0CEAE                               ;; else draw random noise
0CEAE E6 01                         INC temp+1
0CEB0                           
0CEB0 8A                            TXA
0CEB1 29 F0                         AND #%11110000
0CEB3 C9 90                         CMP #$90
0CEB5 F0 26                         BEQ +skipTile
0CEB7                               
0CEB7 8A                            TXA
0CEB8 29 0F                         AND #%00001111
0CEBA C9 0D                         CMP #$0D
0CEBC F0 1F                         BEQ +skipTile
0CEBE                               
0CEBE BD 11 04                      LDA tile_type+17,x
0CEC1 29 01                         AND #%00000001
0CEC3 D0 18                         BNE +skipTile
0CEC5 A5 00                             LDA temp
0CEC7 99 00 03                          STA ppu_buffer,y
0CECA C8                                INY
0CECB A5 01                             LDA temp+1
0CECD 99 00 03                          STA ppu_buffer,y
0CED0 C8                                INY
0CED1 20 FF C4                          JSR sub_GetRandomNumber
0CED4 29 07                             AND #%00000111
0CED6 18                                CLC
0CED7 69 68                             ADC #$68
0CED9 99 00 03                          STA ppu_buffer,y
0CEDC C8                                INY    
0CEDD                               +skipTile:   
0CEDD                           
0CEDD                           
0CEDD                               ;; Update attribute table accordingly through ppu buffer
0CEDD 20 1C CF                      JSR sub_SetTileAttributeAddress
0CEE0                               
0CEE0 8A                            TXA
0CEE1 29 10                         AND #%00010000
0CEE3 F0 05                         BEQ +
0CEE5 A9 F0                             LDA #%11110000
0CEE7 4C EC CE                          JMP ++
0CEEA                               +
0CEEA A9 0F                         LDA #%00001111
0CEEC                               ++
0CEEC 85 02                         STA temp+2
0CEEE                               
0CEEE 8A                            TXA
0CEEF 48                            PHA
0CEF0 29 01                         AND #%00000001
0CEF2 F0 07                         BEQ +
0CEF4 A5 02                             LDA temp+2
0CEF6 09 CC                             ORA #%11001100
0CEF8 4C FF CE                          JMP ++
0CEFB                               +
0CEFB A5 02                         LDA temp+2
0CEFD 09 33                         ORA #%00110011
0CEFF                               ++
0CEFF 85 02                         STA temp+2
0CF01                               
0CF01 A5 00                         LDA temp
0CF03 38                            SEC
0CF04 E9 C0                         SBC #$C0
0CF06 AA                            TAX
0CF07 BD A0 04                      LDA tile_attributes,x
0CF0A 25 02                         AND temp+2
0CF0C 9D A0 04                      STA tile_attributes,x
0CF0F 99 00 03                      STA ppu_buffer,y
0CF12 C8                            INY
0CF13 68                            PLA
0CF14 AA                            TAX
0CF15                           
0CF15                               ;; Tell PPU to update tiles and attributes next frame
0CF15 84 3A                         STY ppu_buffer_pointer
0CF17 A9 01                         LDA #$01
0CF19 85 39                         STA ppu_buffer_update
0CF1B                            
0CF1B                               ;; We're done - return
0CF1B 60                            RTS0CF1C                           .include "game/subroutine/SetTileAttributeAddress.asm"
0CF1C                           
0CF1C                           sub_SetTileAttributeAddress:
0CF1C A9 23                         LDA #$23
0CF1E 99 00 03                      STA ppu_buffer,y
0CF21 C8                            INY
0CF22                               
0CF22 8A                            TXA
0CF23 29 F0                         AND #%11110000
0CF25 4A                            LSR
0CF26 4A                            LSR
0CF27 4A                            LSR
0CF28 4A                            LSR
0CF29 18                            CLC
0CF2A 69 01                         ADC #1
0CF2C 4A                            LSR
0CF2D 0A                            ASL
0CF2E 0A                            ASL
0CF2F 0A                            ASL
0CF30 18                            CLC
0CF31 69 C8                         ADC #$C8
0CF33 85 00                         STA temp
0CF35 8A                            TXA
0CF36 29 0F                         AND #%00001111
0CF38 18                            CLC
0CF39 69 01                         ADC #$01
0CF3B 4A                            LSR
0CF3C 18                            CLC
0CF3D 65 00                         ADC temp
0CF3F 85 00                         STA temp
0CF41 99 00 03                      STA ppu_buffer,y
0CF44 C8                            INY
0CF45                                  
0CF45 60                            RTS
0CF46                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0CF46                           sub_WriteByteToPPUBuffer:
0CF46                           
0CF46                               ;; Prevent updating until full 3-byte buffer is filled,
0CF46                               ;; so that graphics won't glitch out if NMI happens during
0CF46                               ;; updating the buffer
0CF46 A9 00                         LDA #$00
0CF48 85 39                         STA ppu_buffer_update
0CF4A                           
0CF4A                               ;; Check if buffer full; if so, wait a frame and force update
0CF4A A4 3A                         LDY ppu_buffer_pointer
0CF4C C0 30                         CPY #$30
0CF4E D0 05                         BNE +
0CF50 E6 39                             INC ppu_buffer_update
0CF52 20 2A C5                          JSR sub_WaitForVBlank
0CF55                               +
0CF55                           
0CF55                               ;; Add ppu_addr high byte to buffer
0CF55 A5 00                         LDA temp
0CF57 99 00 03                      STA ppu_buffer,y
0CF5A                           
0CF5A                               ;; Add ppu_addr low byte to buffer
0CF5A C8                            INY
0CF5B A5 01                         LDA temp+1
0CF5D 99 00 03                      STA ppu_buffer,y
0CF60                           
0CF60                               ;; Add ppu_data to buffer
0CF60 C8                            INY
0CF61 A5 02                         LDA temp+2
0CF63 99 00 03                      STA ppu_buffer,y
0CF66                           
0CF66                               ;; Update buffer pointer
0CF66 C8                            INY
0CF67 84 3A                         STY ppu_buffer_pointer
0CF69                           
0CF69                               ;; Tell NMI to update next round
0CF69 E6 39                         INC ppu_buffer_update
0CF6B                           
0CF6B                               ;; Return
0CF6B 60                            RTS0CF6C                           
0CF6C                           ;; LUTs
0CF6C                           .include "game/include/tables.asm"
0CF6C                           
0CF6C                           ;; Initial screen palette
0CF6C                           tbl_IntroScreenPalette:
0CF6C 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CF70 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CF74 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0CF78 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CF7C                           
0CF7C 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CF80 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CF84 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0CF88 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CF8C                           
0CF8C                           
0CF8C                           ;; Intro: mapping logo index to chr tile
0CF8C                           tbl_IntroScreenLogoChr:
0CF8C 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0CF94                           
0CF94                           
0CF94                           ;; Intro screen data
0CF94                           tbl_IntroScreenData:
0CF94                           
0CF94                               ;; Set PPU address $20AC and draw
0CF94 60 AC                         .db #$60, #$AC
0CF96 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0CF9E                           
0CF9E                               ;; Set PPU address $20CF and draw
0CF9E 60 CF                         .db #$60, #$CF
0CFA0 01 02                         .db #_0, #_1
0CFA2                               
0CFA2                               ;; Set PPU address $2122 and draw
0CFA2 61 22                         .db #$61, #$22
0CFA4 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0CFAB 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0CFB1 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0CFB9 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0CFBE                               
0CFBE                               ;; Set PPU address $2147 and draw
0CFBE 61 47                         .db #$61, #$47
0CFC0 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0CFC7 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CFCB 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0CFD1 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0CFD7                               
0CFD7                               ;; Set PPU address $218B and draw
0CFD7 61 8B                         .db #$61, #$8B
0CFD9 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0CFDF 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0CFE4                               
0CFE4                               ;; Set PPU address $21E6 and draw
0CFE4 61 E6                         .db #$61, #$E6
0CFE6 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0CFEE 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CFF2 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0CFF9                               
0CFF9                               ;; Set PPU address $222D and draw
0CFF9 62 2D                         .db #$62, #$2D
0CFFB 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D001                               
0D001                               ;; Set PPU address $2281
0D001 62 81                         .db #$62, #$81
0D003                               
0D003                               ;; Draw the Crillion logo
0D003 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D007 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D00B C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D00F E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D013                               
0D013 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D017 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D01B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D01F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D023                               
0D023 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D027 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D02B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D02F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D033                           
0D033 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D037 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D03B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D03F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D043                               
0D043 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D047 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D04B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D04F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D053                           
0D053 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D057 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D05B C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D05F F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D062                           
0D062                               ;; End of intro
0D062 3F                            .db #$3F
0D063                           
0D063                           
0D063                           ;; Animation frames table
0D063                           .include "game/include/table/animation_frames.asm"
0D063                           ;; CHR tile-id's per slide of explosion
0D063                           explosion_slide0:
0D063 00 00 00                      .db #$00, #$00, #$00
0D066 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D069 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D06C                           
0D06C                           explosion_slide1:
0D06C 00 00 00                      .db #$00, #$00, #$00
0D06F 29 2A 2B                      .db #$29, #$2A, #$2B
0D072 39 3A 3B                      .db #$39, #$3A, #$3B
0D075                           
0D075                           explosion_slide2:
0D075 16 00 00                      .db #$16, #$00, #$00
0D078 26 27 28                      .db #$26, #$27, #$28
0D07B 36 37 38                      .db #$36, #$37, #$38
0D07E                           
0D07E                           explosion_slide3:
0D07E 00 14 15                      .db #$00, #$14, #$15
0D081 23 24 25                      .db #$23, #$24, #$25
0D084 33 34 35                      .db #$33, #$34, #$35
0D087                           
0D087                           explosion_slide4:
0D087 10 11 12                      .db #$10, #$11, #$12
0D08A 20 21 22                      .db #$20, #$21, #$22
0D08D 30 31 32                      .db #$30, #$31, #$32
0D090                           
0D090                           ;; High and low bytes of animation slides
0D090                           explosion_anim_hi:
0D090 D0                            .db >#explosion_slide0
0D091 D0                            .db >#explosion_slide1
0D092 D0                            .db >#explosion_slide2
0D093 D0                            .db >#explosion_slide3
0D094 D0                            .db >#explosion_slide4
0D095 D0                            .db >#explosion_slide4
0D096 D0                            .db >#explosion_slide3
0D097 D0                            .db >#explosion_slide2
0D098 D0                            .db >#explosion_slide1
0D099 D0                            .db >#explosion_slide0
0D09A                           
0D09A                           explosion_anim_lo:
0D09A 63                            .db <#explosion_slide0
0D09B 6C                            .db <#explosion_slide1
0D09C 75                            .db <#explosion_slide2
0D09D 7E                            .db <#explosion_slide3
0D09E 87                            .db <#explosion_slide4
0D09F 87                            .db <#explosion_slide4
0D0A0 7E                            .db <#explosion_slide3
0D0A1 75                            .db <#explosion_slide2
0D0A2 6C                            .db <#explosion_slide1
0D0A3 63                            .db <#explosion_slide0
0D0A4                           
0D0A4                           
0D0A4                           
0D0A4                           ;; Ball palette color table (CBRYGM)
0D0A4                           tbl_BallColorDark:
0D0A4 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D0AA                            
0D0AA                           tbl_BallColorLight:
0D0AA 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D0B0                           
0D0B0                               
0D0B0                           ;; Screen mode drawing routine addresses
0D0B0                           tbl_LoadScreenHi:
0D0B0 CD C9 CD                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D0B3                           
0D0B3                           tbl_LoadScreenLo:
0D0B3 16 5A A5                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D0B6                           
0D0B6                           
0D0B6                           ;; Level data
0D0B6                           .include "game/include/table/level_data.asm"
0D0B6                           lvl_layout_01:
0D0B6 61 21                         .db #$61, #%00100001
0D0B8 52 61                         .db #$52, #%01100001
0D0BA 43 65                         .db #$43, #%01100101
0D0BC 83 05                         .db #$83, #%00000101
0D0BE 93 15                         .db #$93, #%00010101
0D0C0 34 7A                         .db #$34, #%01111010
0D0C2 74 7A                         .db #$74, #%01111010
0D0C4 35 7A                         .db #$35, #%01111010
0D0C6 75 7A                         .db #$75, #%01111010
0D0C8 46 65                         .db #$46, #%01100101
0D0CA 86 25                         .db #$86, #%00100101
0D0CC 57 61                         .db #$57, #%01100001
0D0CE 68 21                         .db #$68, #%00100001
0D0D0 FF                            .db #LEVEL_END
0D0D1                           
0D0D1                           lvl_layout_02:
0D0D1 C0 0A                         .db #$C0, #%00001010
0D0D3 11 15                         .db #$11, #%00010101
0D0D5 21 62                         .db #$21, #%01100010
0D0D7 61 62                         .db #$61, #%01100010
0D0D9 A1 42                         .db #$A1, #%01000010
0D0DB 12 67                         .db #$12, #%01100111
0D0DD 52 67                         .db #$52, #%01100111
0D0DF 92 67                         .db #$92, #%01100111
0D0E1 C3 0D                         .db #$C3, #%00001101
0D0E3 14 11                         .db #$14, #%00010001
0D0E5 24 65                         .db #$24, #%01100101
0D0E7 64 65                         .db #$64, #%01100101
0D0E9 A4 45                         .db #$A4, #%01000101
0D0EB 15 67                         .db #$15, #%01100111
0D0ED 55 67                         .db #$55, #%01100111
0D0EF 95 67                         .db #$95, #%01100111
0D0F1 17 12                         .db #$17, #%00010010
0D0F3 27 61                         .db #$27, #%01100001
0D0F5 67 61                         .db #$67, #%01100001
0D0F7 A7 41                         .db #$A7, #%01000001
0D0F9 38 7A                         .db #$38, #%01111010
0D0FB 98 5A                         .db #$98, #%01011010
0D0FD 18 27                         .db #$18, #%00100111
0D0FF 48 27                         .db #$48, #%00100111
0D101 78 27                         .db #$78, #%00100111
0D103 C8 07                         .db #$C8, #%00000111
0D105 FF                            .db #LEVEL_END
0D106                           
0D106                           lvl_layout_03:
0D106 00 7A                         .db #$00, #%01111010
0D108 40 7A                         .db #$40, #%01111010
0D10A 80 7A                         .db #$80, #%01111010
0D10C C0 1A                         .db #$C0, #%00011010
0D10E 10 A1                         .db #$10, #%10100001
0D110 13 E1                         .db #$13, #%11100001
0D112 17 C1                         .db #$17, #%11000001
0D114 30 C1                         .db #$30, #%11000001
0D116 34 C1                         .db #$34, #%11000001
0D118 38 A1                         .db #$38, #%10100001
0D11A 50 E1                         .db #$50, #%11100001
0D11C 55 81                         .db #$55, #%10000001
0D11E 57 C1                         .db #$57, #%11000001
0D120 70 C1                         .db #$70, #%11000001
0D122 73 A1                         .db #$73, #%10100001
0D124 76 E1                         .db #$76, #%11100001
0D126 90 E1                         .db #$90, #%11100001
0D128 95 81                         .db #$95, #%10000001
0D12A 97 C1                         .db #$97, #%11000001
0D12C B0 C1                         .db #$B0, #%11000001
0D12E B4 C1                         .db #$B4, #%11000001
0D130 B8 A1                         .db #$B8, #%10100001
0D132 D0 A1                         .db #$D0, #%10100001
0D134 D3 E1                         .db #$D3, #%11100001
0D136 D7 C1                         .db #$D7, #%11000001
0D138 FF                            .db #LEVEL_END
0D139                           
0D139                           lvl_layout_04:
0D139 00 4C                         .db #$00, #%01001100
0D13B 40 6C                         .db #$40, #%01101100
0D13D 80 4C                         .db #$80, #%01001100
0D13F 81 AC                         .db #$81, #%10101100
0D141 C1 2C                         .db #$C1, #%00101100
0D143 02 6C                         .db #$02, #%01101100
0D145 42 CC                         .db #$42, #%11001100
0D147 62 EC                         .db #$62, #%11101100
0D149 A2 CC                         .db #$A2, #%11001100
0D14B C3 CC                         .db #$C3, #%11001100
0D14D 04 4C                         .db #$04, #%01001100
0D14F 84 2C                         .db #$84, #%00101100
0D151 25 AC                         .db #$25, #%10101100
0D153 85 AC                         .db #$85, #%10101100
0D155 06 AC                         .db #$06, #%10101100
0D157 36 CC                         .db #$36, #%11001100
0D159 56 CC                         .db #$56, #%11001100
0D15B 66 EC                         .db #$66, #%11101100
0D15D 96 6C                         .db #$96, #%01101100
0D15F C7 AC                         .db #$C7, #%10101100
0D161 08 2C                         .db #$08, #%00101100
0D163 78 6C                         .db #$78, #%01101100
0D165 D8 0C                         .db #$D8, #%00001100
0D167 30 A1                         .db #$30, #%10100001
0D169 B0 21                         .db #$B0, #%00100001
0D16B 01 41                         .db #$01, #%01000001
0D16D 41 61                         .db #$41, #%01100001
0D16F 91 A1                         .db #$91, #%10100001
0D171 A1 21                         .db #$A1, #%00100001
0D173 52 C1                         .db #$52, #%11000001
0D175 72 E1                         .db #$72, #%11100001
0D177 B2 C1                         .db #$B2, #%11000001
0D179 C2 21                         .db #$C2, #%00100001
0D17B 03 41                         .db #$03, #%01000001
0D17D 33 C1                         .db #$33, #%11000001
0D17F 83 21                         .db #$83, #%00100001
0D181 D3 E1                         .db #$D3, #%11100001
0D183 05 21                         .db #$05, #%00100001
0D185 45 E1                         .db #$45, #%11100001
0D187 A5 21                         .db #$A5, #%00100001
0D189 16 A1                         .db #$16, #%10100001
0D18B 76 A1                         .db #$76, #%10100001
0D18D 27 A1                         .db #$27, #%10100001
0D18F 57 21                         .db #$57, #%00100001
0D191 87 41                         .db #$87, #%01000001
0D193 B7 A1                         .db #$B7, #%10100001
0D195 19 21                         .db #$19, #%00100001
0D197 39 41                         .db #$39, #%01000001
0D199 89 41                         .db #$89, #%01000001
0D19B C9 21                         .db #$C9, #%00100001
0D19D D0 1A                         .db #$D0, #%00011010
0D19F 55 1A                         .db #$55, #%00011010
0D1A1 95 1A                         .db #$95, #%00011010
0D1A3 D7 1A                         .db #$D7, #%00011010
0D1A5 09 1A                         .db #$09, #%00011010
0D1A7 79 1A                         .db #$79, #%00011010
0D1A9 FF                            .db #LEVEL_END
0D1AA                           
0D1AA                           lvl_layout_05:
0D1AA 40 0A                         .db #$40, #%00001010
0D1AC 70 1A                         .db #$70, #%00011010
0D1AE B0 42                         .db #$B0, #%01000010
0D1B0 41 A7                         .db #$41, #%10100111
0D1B2 B1 22                         .db #$B1, #%00100010
0D1B4 D1 15                         .db #$D1, #%00010101
0D1B6 22 0A                         .db #$22, #%00001010
0D1B8 52 05                         .db #$52, #%00000101
0D1BA B2 42                         .db #$B2, #%01000010
0D1BC 03 27                         .db #$03, #%00100111
0D1BE 33 67                         .db #$33, #%01100111
0D1C0 73 67                         .db #$73, #%01100111
0D1C2 B3 47                         .db #$B3, #%01000111
0D1C4 05 E5                         .db #$05, #%11100101
0D1C6 25 A5                         .db #$25, #%10100101
0D1C8 35 25                         .db #$35, #%00100101
0D1CA 65 45                         .db #$65, #%01000101
0D1CC A5 45                         .db #$A5, #%01000101
0D1CE 46 E5                         .db #$46, #%11100101
0D1D0 66 E5                         .db #$66, #%11100101
0D1D2 86 E5                         .db #$86, #%11100101
0D1D4 A6 E2                         .db #$A6, #%11100010
0D1D6 C6 E5                         .db #$C6, #%11100101
0D1D8 27 25                         .db #$27, #%00100101
0D1DA 77 05                         .db #$77, #%00000101
0D1DC B7 02                         .db #$B7, #%00000010
0D1DE 09 05                         .db #$09, #%00000101
0D1E0 79 05                         .db #$79, #%00000101
0D1E2 B9 02                         .db #$B9, #%00000010
0D1E4 FF                            .db #LEVEL_END
0D1E5                           
0D1E5                           lvl_layout_06:
0D1E5 00 03                         .db #$00, #%00000011
0D1E7 20 03                         .db #$20, #%00000011
0D1E9 40 03                         .db #$40, #%00000011
0D1EB A0 03                         .db #$A0, #%00000011
0D1ED C0 03                         .db #$C0, #%00000011
0D1EF 11 03                         .db #$11, #%00000011
0D1F1 31 03                         .db #$31, #%00000011
0D1F3 51 03                         .db #$51, #%00000011
0D1F5 91 03                         .db #$91, #%00000011
0D1F7 B1 03                         .db #$B1, #%00000011
0D1F9 D1 03                         .db #$D1, #%00000011
0D1FB 02 03                         .db #$02, #%00000011
0D1FD 22 03                         .db #$22, #%00000011
0D1FF 42 03                         .db #$42, #%00000011
0D201 A2 03                         .db #$A2, #%00000011
0D203 C2 03                         .db #$C2, #%00000011
0D205 13 03                         .db #$13, #%00000011
0D207 33 03                         .db #$33, #%00000011
0D209 53 03                         .db #$53, #%00000011
0D20B 93 03                         .db #$93, #%00000011
0D20D B3 03                         .db #$B3, #%00000011
0D20F D3 03                         .db #$D3, #%00000011
0D211 04 03                         .db #$04, #%00000011
0D213 24 03                         .db #$24, #%00000011
0D215 44 03                         .db #$44, #%00000011
0D217 A4 03                         .db #$A4, #%00000011
0D219 C4 03                         .db #$C4, #%00000011
0D21B 15 03                         .db #$15, #%00000011
0D21D 35 03                         .db #$35, #%00000011
0D21F 55 03                         .db #$55, #%00000011
0D221 95 03                         .db #$95, #%00000011
0D223 B5 03                         .db #$B5, #%00000011
0D225 D5 03                         .db #$D5, #%00000011
0D227 06 03                         .db #$06, #%00000011
0D229 26 03                         .db #$26, #%00000011
0D22B 46 03                         .db #$46, #%00000011
0D22D A6 03                         .db #$A6, #%00000011
0D22F C6 03                         .db #$C6, #%00000011
0D231 17 03                         .db #$17, #%00000011
0D233 37 03                         .db #$37, #%00000011
0D235 57 03                         .db #$57, #%00000011
0D237 97 03                         .db #$97, #%00000011
0D239 B7 03                         .db #$B7, #%00000011
0D23B D7 03                         .db #$D7, #%00000011
0D23D 08 03                         .db #$08, #%00000011
0D23F 28 03                         .db #$28, #%00000011
0D241 48 03                         .db #$48, #%00000011
0D243 A8 03                         .db #$A8, #%00000011
0D245 C8 03                         .db #$C8, #%00000011
0D247 19 03                         .db #$19, #%00000011
0D249 39 03                         .db #$39, #%00000011
0D24B 59 03                         .db #$59, #%00000011
0D24D 99 03                         .db #$99, #%00000011
0D24F B9 03                         .db #$B9, #%00000011
0D251 D9 03                         .db #$D9, #%00000011
0D253 60 4B                         .db #$60, #%01001011
0D255 71 CB                         .db #$71, #%11001011
0D257 62 4B                         .db #$62, #%01001011
0D259 64 4B                         .db #$64, #%01001011
0D25B 75 CB                         .db #$75, #%11001011
0D25D 66 4B                         .db #$66, #%01001011
0D25F 68 4B                         .db #$68, #%01001011
0D261 79 0B                         .db #$79, #%00001011
0D263 70 03                         .db #$70, #%00000011
0D265 72 03                         .db #$72, #%00000011
0D267 74 03                         .db #$74, #%00000011
0D269 76 03                         .db #$76, #%00000011
0D26B 78 03                         .db #$78, #%00000011
0D26D FF                            .db #LEVEL_END
0D26E                           
0D26E                           lvl_layout_07:
0D26E 00 11                         .db #$00, #%00010001
0D270 01 FA                         .db #$01, #%11111010
0D272 12 BA                         .db #$12, #%10111010
0D274 23 DA                         .db #$23, #%11011010
0D276 34 FA                         .db #$34, #%11111010
0D278 05 DA                         .db #$05, #%11011010
0D27A 15 FA                         .db #$15, #%11111010
0D27C 45 BA                         .db #$45, #%10111010
0D27E 56 DA                         .db #$56, #%11011010
0D280 27 BA                         .db #$27, #%10111010
0D282 67 DA                         .db #$67, #%11011010
0D284 38 3A                         .db #$38, #%00111010
0D286 78 BA                         .db #$78, #%10111010
0D288 09 3A                         .db #$09, #%00111010
0D28A 39 3A                         .db #$39, #%00111010
0D28C 89 1A                         .db #$89, #%00011010
0D28E B0 01                         .db #$B0, #%00000001
0D290 D0 01                         .db #$D0, #%00000001
0D292 A1 01                         .db #$A1, #%00000001
0D294 C1 11                         .db #$C1, #%00010001
0D296 B2 01                         .db #$B2, #%00000001
0D298 D2 01                         .db #$D2, #%00000001
0D29A A3 01                         .db #$A3, #%00000001
0D29C C3 01                         .db #$C3, #%00000001
0D29E B4 01                         .db #$B4, #%00000001
0D2A0 D4 01                         .db #$D4, #%00000001
0D2A2 A5 01                         .db #$A5, #%00000001
0D2A4 C5 01                         .db #$C5, #%00000001
0D2A6 B6 01                         .db #$B6, #%00000001
0D2A8 D6 01                         .db #$D6, #%00000001
0D2AA A7 01                         .db #$A7, #%00000001
0D2AC C7 01                         .db #$C7, #%00000001
0D2AE FF                            .db #LEVEL_END
0D2AF                           
0D2AF                           lvl_layout_08:
0D2AF 40 B5                         .db #$40, #%10110101
0D2B1 31 0D                         .db #$31, #%00001101
0D2B3 61 10                         .db #$61, #%00010000
0D2B5 42 C7                         .db #$42, #%11000111
0D2B7 52 67                         .db #$52, #%01100111
0D2B9 63 C7                         .db #$63, #%11000111
0D2BB 83 E7                         .db #$83, #%11100111
0D2BD 05 07                         .db #$05, #%00000111
0D2BF 15 3A                         .db #$15, #%00111010
0D2C1 07 63                         .db #$07, #%01100011
0D2C3 27 13                         .db #$27, #%00010011
0D2C5 38 A5                         .db #$38, #%10100101
0D2C7 09 14                         .db #$09, #%00010100
0D2C9 19 05                         .db #$19, #%00000101
0D2CB D0 E0                         .db #$D0, #%11100000
0D2CD C2 A0                         .db #$C2, #%10100000
0D2CF B3 E0                         .db #$B3, #%11100000
0D2D1 D5 E0                         .db #$D5, #%11100000
0D2D3 C6 E0                         .db #$C6, #%11100000
0D2D5 B0 C4                         .db #$B0, #%11000100
0D2D7 C0 A4                         .db #$C0, #%10100100
0D2D9 D1 A4                         .db #$D1, #%10100100
0D2DB C4 24                         .db #$C4, #%00100100
0D2DD C5 04                         .db #$C5, #%00000100
0D2DF B7 44                         .db #$B7, #%01000100
0D2E1 B8 A4                         .db #$B8, #%10100100
0D2E3 D9 05                         .db #$D9, #%00000101
0D2E5 FF                            .db #LEVEL_END
0D2E6                           
0D2E6                           lvl_layout_09:
0D2E6 81 04                         .db #$81, #%00000100
0D2E8 D1 04                         .db #$D1, #%00000100
0D2EA 32 C4                         .db #$32, #%11000100
0D2EC A2 C4                         .db #$A2, #%11000100
0D2EE C2 24                         .db #$C2, #%00100100
0D2F0 13 24                         .db #$13, #%00100100
0D2F2 53 04                         .db #$53, #%00000100
0D2F4 C3 27                         .db #$C3, #%00100111
0D2F6 15 6C                         .db #$15, #%01101100
0D2F8 55 6C                         .db #$55, #%01101100
0D2FA 95 6C                         .db #$95, #%01101100
0D2FC D5 0C                         .db #$D5, #%00001100
0D2FE 27 C7                         .db #$27, #%11000111
0D300 47 C7                         .db #$47, #%11000111
0D302 67 C7                         .db #$67, #%11000111
0D304 87 C7                         .db #$87, #%11000111
0D306 A7 C7                         .db #$A7, #%11000111
0D308 C7 C7                         .db #$C7, #%11000111
0D30A 08 13                         .db #$08, #%00010011
0D30C 28 15                         .db #$28, #%00010101
0D30E 48 12                         .db #$48, #%00010010
0D310 68 15                         .db #$68, #%00010101
0D312 88 11                         .db #$88, #%00010001
0D314 A8 10                         .db #$A8, #%00010000
0D316 C8 14                         .db #$C8, #%00010100
0D318 09 07                         .db #$09, #%00000111
0D31A 19 03                         .db #$19, #%00000011
0D31C 39 05                         .db #$39, #%00000101
0D31E 59 02                         .db #$59, #%00000010
0D320 79 05                         .db #$79, #%00000101
0D322 99 01                         .db #$99, #%00000001
0D324 B9 00                         .db #$B9, #%00000000
0D326 D9 04                         .db #$D9, #%00000100
0D328 FF                            .db #LEVEL_END
0D329                           
0D329                           lvl_layout_10:
0D329 00 02                         .db #$00, #%00000010
0D32B 10 C9                         .db #$10, #%11001001
0D32D 50 C9                         .db #$50, #%11001001
0D32F 90 C9                         .db #$90, #%11001001
0D331 D0 C9                         .db #$D0, #%11001001
0D333 31 C9                         .db #$31, #%11001001
0D335 71 C9                         .db #$71, #%11001001
0D337 B1 C9                         .db #$B1, #%11001001
0D339 13 C9                         .db #$13, #%11001001
0D33B 53 C9                         .db #$53, #%11001001
0D33D 93 C9                         .db #$93, #%11001001
0D33F D3 C9                         .db #$D3, #%11001001
0D341 34 C9                         .db #$34, #%11001001
0D343 74 C9                         .db #$74, #%11001001
0D345 B4 C9                         .db #$B4, #%11001001
0D347 16 C9                         .db #$16, #%11001001
0D349 56 C9                         .db #$56, #%11001001
0D34B 96 C9                         .db #$96, #%11001001
0D34D D6 C9                         .db #$D6, #%11001001
0D34F 37 C9                         .db #$37, #%11001001
0D351 77 C9                         .db #$77, #%11001001
0D353 B7 C9                         .db #$B7, #%11001001
0D355 D8 12                         .db #$D8, #%00010010
0D357 FF                            .db #LEVEL_END
0D358                           
0D358                           lvl_layout_11:
0D358 00 65                         .db #$00, #%01100101
0D35A 40 45                         .db #$40, #%01000101
0D35C 50 A7                         .db #$50, #%10100111
0D35E 80 05                         .db #$80, #%00000101
0D360 90 A7                         .db #$90, #%10100111
0D362 A0 65                         .db #$A0, #%01100101
0D364 01 43                         .db #$01, #%01000011
0D366 31 23                         .db #$31, #%00100011
0D368 61 A7                         .db #$61, #%10100111
0D36A 81 A7                         .db #$81, #%10100111
0D36C A1 63                         .db #$A1, #%01100011
0D36E 02 44                         .db #$02, #%01000100
0D370 32 44                         .db #$32, #%01000100
0D372 92 04                         .db #$92, #%00000100
0D374 A2 64                         .db #$A2, #%01100100
0D376 03 40                         .db #$03, #%01000000
0D378 33 40                         .db #$33, #%01000000
0D37A 63 A1                         .db #$63, #%10100001
0D37C 83 A2                         .db #$83, #%10100010
0D37E 93 00                         .db #$93, #%00000000
0D380 A3 60                         .db #$A3, #%01100000
0D382 04 41                         .db #$04, #%01000001
0D384 34 41                         .db #$34, #%01000001
0D386 94 02                         .db #$94, #%00000010
0D388 A4 62                         .db #$A4, #%01100010
0D38A 05 47                         .db #$05, #%01000111
0D38C 35 67                         .db #$35, #%01100111
0D38E 75 0A                         .db #$75, #%00001010
0D390 85 47                         .db #$85, #%01000111
0D392 B5 47                         .db #$B5, #%01000111
0D394 06 E7                         .db #$06, #%11100111
0D396 16 5A                         .db #$16, #%01011010
0D398 26 11                         .db #$26, #%00010001
0D39A 46 13                         .db #$46, #%00010011
0D39C 56 1A                         .db #$56, #%00011010
0D39E 66 14                         .db #$66, #%00010100
0D3A0 86 10                         .db #$86, #%00010000
0D3A2 96 5A                         .db #$96, #%01011010
0D3A4 A6 12                         .db #$A6, #%00010010
0D3A6 C6 15                         .db #$C6, #%00010101
0D3A8 D6 E7                         .db #$D6, #%11100111
0D3AA FF                            .db #LEVEL_END
0D3AB                           
0D3AB                           lvl_layout_12:
0D3AB 00 00                         .db #$00, #%00000000
0D3AD 50 C0                         .db #$50, #%11000000
0D3AF 80 00                         .db #$80, #%00000000
0D3B1 61 00                         .db #$61, #%00000000
0D3B3 22 C0                         .db #$22, #%11000000
0D3B5 82 E0                         .db #$82, #%11100000
0D3B7 C2 E0                         .db #$C2, #%11100000
0D3B9 A3 20                         .db #$A3, #%00100000
0D3BB C3 10                         .db #$C3, #%00010000
0D3BD 04 00                         .db #$04, #%00000000
0D3BF 54 20                         .db #$54, #%00100000
0D3C1 15 0A                         .db #$15, #%00001010
0D3C3 25 C0                         .db #$25, #%11000000
0D3C5 55 E0                         .db #$55, #%11100000
0D3C7 86 20                         .db #$86, #%00100000
0D3C9 C6 E0                         .db #$C6, #%11100000
0D3CB C7 A0                         .db #$C7, #%10100000
0D3CD 88 00                         .db #$88, #%00000000
0D3CF 59 00                         .db #$59, #%00000000
0D3D1 89 20                         .db #$89, #%00100000
0D3D3 D9 1A                         .db #$D9, #%00011010
0D3D5 FF                            .db #LEVEL_END
0D3D6                           
0D3D6                           lvl_layout_13:
0D3D6 10 E0                         .db #$10, #%11100000
0D3D8 20 E0                         .db #$20, #%11100000
0D3DA 30 E0                         .db #$30, #%11100000
0D3DC 40 40                         .db #$40, #%01000000
0D3DE 80 60                         .db #$80, #%01100000
0D3E0 C0 E0                         .db #$C0, #%11100000
0D3E2 D0 E0                         .db #$D0, #%11100000
0D3E4 41 40                         .db #$41, #%01000000
0D3E6 71 60                         .db #$71, #%01100000
0D3E8 52 60                         .db #$52, #%01100000
0D3EA A2 20                         .db #$A2, #%00100000
0D3EC 43 60                         .db #$43, #%01100000
0D3EE 83 60                         .db #$83, #%01100000
0D3F0 14 74                         .db #$14, #%01110100
0D3F2 54 74                         .db #$54, #%01110100
0D3F4 94 74                         .db #$94, #%01110100
0D3F6 D4 14                         .db #$D4, #%00010100
0D3F8 15 0D                         .db #$15, #%00001101
0D3FA 55 0D                         .db #$55, #%00001101
0D3FC 95 0D                         .db #$95, #%00001101
0D3FE D5 0D                         .db #$D5, #%00001101
0D400 26 0D                         .db #$26, #%00001101
0D402 46 0D                         .db #$46, #%00001101
0D404 66 0D                         .db #$66, #%00001101
0D406 86 0D                         .db #$86, #%00001101
0D408 A6 0D                         .db #$A6, #%00001101
0D40A C6 0D                         .db #$C6, #%00001101
0D40C 07 10                         .db #$07, #%00010000
0D40E 37 0D                         .db #$37, #%00001101
0D410 77 0D                         .db #$77, #%00001101
0D412 B7 0D                         .db #$B7, #%00001101
0D414 28 0D                         .db #$28, #%00001101
0D416 48 0D                         .db #$48, #%00001101
0D418 68 0D                         .db #$68, #%00001101
0D41A 88 0D                         .db #$88, #%00001101
0D41C A8 0D                         .db #$A8, #%00001101
0D41E C8 0D                         .db #$C8, #%00001101
0D420 19 0D                         .db #$19, #%00001101
0D422 59 0D                         .db #$59, #%00001101
0D424 99 0D                         .db #$99, #%00001101
0D426 D9 0D                         .db #$D9, #%00001101
0D428 FF                            .db #LEVEL_END
0D429                           
0D429                           lvl_layout_14:
0D429 00 67                         .db #$00, #%01100111
0D42B 40 67                         .db #$40, #%01100111
0D42D 80 67                         .db #$80, #%01100111
0D42F C0 27                         .db #$C0, #%00100111
0D431 01 27                         .db #$01, #%00100111
0D433 31 C7                         .db #$31, #%11000111
0D435 51 C7                         .db #$51, #%11000111
0D437 71 C7                         .db #$71, #%11000111
0D439 91 C7                         .db #$91, #%11000111
0D43B B1 C7                         .db #$B1, #%11000111
0D43D D1 07                         .db #$D1, #%00000111
0D43F 02 E7                         .db #$02, #%11100111
0D441 06 E7                         .db #$06, #%11100111
0D443 13 07                         .db #$13, #%00000111
0D445 D3 07                         .db #$D3, #%00000111
0D447 15 07                         .db #$15, #%00000111
0D449 35 07                         .db #$35, #%00000111
0D44B 55 07                         .db #$55, #%00000111
0D44D 75 07                         .db #$75, #%00000111
0D44F 95 07                         .db #$95, #%00000111
0D451 B5 07                         .db #$B5, #%00000111
0D453 D5 07                         .db #$D5, #%00000111
0D455 17 07                         .db #$17, #%00000111
0D457 37 C7                         .db #$37, #%11000111
0D459 57 C7                         .db #$57, #%11000111
0D45B 77 C7                         .db #$77, #%11000111
0D45D 97 C7                         .db #$97, #%11000111
0D45F B7 C7                         .db #$B7, #%11000111
0D461 D7 07                         .db #$D7, #%00000111
0D463 19 07                         .db #$19, #%00000111
0D465 D9 07                         .db #$D9, #%00000111
0D467 22 4C                         .db #$22, #%01001100
0D469 62 4C                         .db #$62, #%01001100
0D46B A2 4C                         .db #$A2, #%01001100
0D46D 24 0C                         .db #$24, #%00001100
0D46F 44 0C                         .db #$44, #%00001100
0D471 64 0C                         .db #$64, #%00001100
0D473 84 0C                         .db #$84, #%00001100
0D475 A4 0C                         .db #$A4, #%00001100
0D477 C4 0C                         .db #$C4, #%00001100
0D479 26 0C                         .db #$26, #%00001100
0D47B 46 0C                         .db #$46, #%00001100
0D47D 66 0C                         .db #$66, #%00001100
0D47F 86 0C                         .db #$86, #%00001100
0D481 A6 0C                         .db #$A6, #%00001100
0D483 C6 0C                         .db #$C6, #%00001100
0D485 28 4C                         .db #$28, #%01001100
0D487 68 4C                         .db #$68, #%01001100
0D489 A8 4C                         .db #$A8, #%01001100
0D48B 32 04                         .db #$32, #%00000100
0D48D 52 04                         .db #$52, #%00000100
0D48F 72 04                         .db #$72, #%00000100
0D491 92 04                         .db #$92, #%00000100
0D493 B2 04                         .db #$B2, #%00000100
0D495 38 04                         .db #$38, #%00000100
0D497 58 04                         .db #$58, #%00000100
0D499 78 04                         .db #$78, #%00000100
0D49B 98 04                         .db #$98, #%00000100
0D49D B8 04                         .db #$B8, #%00000100
0D49F FF                            .db #LEVEL_END
0D4A0                           
0D4A0                           lvl_layout_15:
0D4A0 00 7A                         .db #$00, #%01111010
0D4A2 40 7A                         .db #$40, #%01111010
0D4A4 80 7A                         .db #$80, #%01111010
0D4A6 C0 3A                         .db #$C0, #%00111010
0D4A8 41 04                         .db #$41, #%00000100
0D4AA 61 04                         .db #$61, #%00000100
0D4AC 81 04                         .db #$81, #%00000100
0D4AE A1 04                         .db #$A1, #%00000100
0D4B0 05 E4                         .db #$05, #%11100100
0D4B2 15 64                         .db #$15, #%01100100
0D4B4 55 64                         .db #$55, #%01100100
0D4B6 95 64                         .db #$95, #%01100100
0D4B8 D5 E4                         .db #$D5, #%11100100
0D4BA 26 04                         .db #$26, #%00000100
0D4BC 46 44                         .db #$46, #%01000100
0D4BE 76 64                         .db #$76, #%01100100
0D4C0 C6 04                         .db #$C6, #%00000100
0D4C2 17 04                         .db #$17, #%00000100
0D4C4 37 64                         .db #$37, #%01100100
0D4C6 77 44                         .db #$77, #%01000100
0D4C8 B7 04                         .db #$B7, #%00000100
0D4CA 18 64                         .db #$18, #%01100100
0D4CC 58 64                         .db #$58, #%01100100
0D4CE 98 64                         .db #$98, #%01100100
0D4D0 FF                            .db #LEVEL_END
0D4D1                           
0D4D1                           lvl_layout_16:
0D4D1 10 E1                         .db #$10, #%11100001
0D4D3 20 9A                         .db #$20, #%10011010
0D4D5 30 E1                         .db #$30, #%11100001
0D4D7 40 E1                         .db #$40, #%11100001
0D4D9 50 E1                         .db #$50, #%11100001
0D4DB 60 C1                         .db #$60, #%11000001
0D4DD 70 E1                         .db #$70, #%11100001
0D4DF 80 E1                         .db #$80, #%11100001
0D4E1 90 E1                         .db #$90, #%11100001
0D4E3 A0 61                         .db #$A0, #%01100001
0D4E5 21 C1                         .db #$21, #%11000001
0D4E7 A1 1A                         .db #$A1, #%00011010
0D4E9 B1 41                         .db #$B1, #%01000001
0D4EB A2 E1                         .db #$A2, #%11100001
0D4ED B2 E1                         .db #$B2, #%11100001
0D4EF C2 1A                         .db #$C2, #%00011010
0D4F1 D2 E1                         .db #$D2, #%11100001
0D4F3 63 1A                         .db #$63, #%00011010
0D4F5 C3 C1                         .db #$C3, #%11000001
0D4F7 14 61                         .db #$14, #%01100001
0D4F9 54 61                         .db #$54, #%01100001
0D4FB 94 C1                         .db #$94, #%11000001
0D4FD 15 61                         .db #$15, #%01100001
0D4FF 55 41                         .db #$55, #%01000001
0D501 85 1A                         .db #$85, #%00011010
0D503 16 41                         .db #$16, #%01000001
0D505 46 1A                         .db #$46, #%00011010
0D507 56 61                         .db #$56, #%01100001
0D509 A6 61                         .db #$A6, #%01100001
0D50B 17 67                         .db #$17, #%01100111
0D50D 57 67                         .db #$57, #%01100111
0D50F 97 67                         .db #$97, #%01100111
0D511 D7 07                         .db #$D7, #%00000111
0D513 28 41                         .db #$28, #%01000001
0D515 58 61                         .db #$58, #%01100001
0D517 A8 41                         .db #$A8, #%01000001
0D519 18 11                         .db #$18, #%00010001
0D51B 38 11                         .db #$38, #%00010001
0D51D 98 11                         .db #$98, #%00010001
0D51F B8 11                         .db #$B8, #%00010001
0D521 D8 11                         .db #$D8, #%00010001
0D523 59 09                         .db #$59, #%00001001
0D525 FF                            .db #LEVEL_END
0D526                           
0D526                           lvl_layout_17:
0D526 10 EA                         .db #$10, #%11101010
0D528 20 E2                         .db #$20, #%11100010
0D52A 30 62                         .db #$30, #%01100010
0D52C 70 02                         .db #$70, #%00000010
0D52E 80 6A                         .db #$80, #%01101010
0D530 90 22                         .db #$90, #%00100010
0D532 01 AA                         .db #$01, #%10101010
0D534 31 6A                         .db #$31, #%01101010
0D536 81 2A                         .db #$81, #%00101010
0D538 A1 02                         .db #$A1, #%00000010
0D53A C1 02                         .db #$C1, #%00000010
0D53C D1 0A                         .db #$D1, #%00001010
0D53E 32 EA                         .db #$32, #%11101010
0D540 42 6A                         .db #$42, #%01101010
0D542 62 02                         .db #$62, #%00000010
0D544 92 6A                         .db #$92, #%01101010
0D546 D2 E2                         .db #$D2, #%11100010
0D548 43 1A                         .db #$43, #%00011010
0D54A 53 CA                         .db #$53, #%11001010
0D54C 73 02                         .db #$73, #%00000010
0D54E 83 4A                         .db #$83, #%01001010
0D550 B3 CA                         .db #$B3, #%11001010
0D552 C3 EA                         .db #$C3, #%11101010
0D554 04 0A                         .db #$04, #%00001010
0D556 14 A2                         .db #$14, #%10100010
0D558 24 AA                         .db #$24, #%10101010
0D55A 44 AA                         .db #$44, #%10101010
0D55C 64 6A                         .db #$64, #%01101010
0D55E 65 6A                         .db #$65, #%01101010
0D560 A5 AA                         .db #$A5, #%10101010
0D562 06 EA                         .db #$06, #%11101010
0D564 16 62                         .db #$16, #%01100010
0D566 66 22                         .db #$66, #%00100010
0D568 86 2A                         .db #$86, #%00101010
0D56A 17 42                         .db #$17, #%01000010
0D56C 47 12                         .db #$47, #%00010010
0D56E 57 6A                         .db #$57, #%01101010
0D570 97 4A                         .db #$97, #%01001010
0D572 A7 02                         .db #$A7, #%00000010
0D574 18 02                         .db #$18, #%00000010
0D576 28 0A                         .db #$28, #%00001010
0D578 38 22                         .db #$38, #%00100010
0D57A 68 2A                         .db #$68, #%00101010
0D57C 88 62                         .db #$88, #%01100010
0D57E C8 0A                         .db #$C8, #%00001010
0D580 D8 02                         .db #$D8, #%00000010
0D582 19 2A                         .db #$19, #%00101010
0D584 39 2A                         .db #$39, #%00101010
0D586 69 42                         .db #$69, #%01000010
0D588 99 2A                         .db #$99, #%00101010
0D58A B9 42                         .db #$B9, #%01000010
0D58C FF                            .db #LEVEL_END
0D58D                           
0D58D                           lvl_layout_18:
0D58D 00 12                         .db #$00, #%00010010
0D58F 40 1A                         .db #$40, #%00011010
0D591 50 11                         .db #$50, #%00010001
0D593 70 1A                         .db #$70, #%00011010
0D595 80 10                         .db #$80, #%00010000
0D597 D0 13                         .db #$D0, #%00010011
0D599 01 1A                         .db #$01, #%00011010
0D59B 22 15                         .db #$22, #%00010101
0D59D A2 1A                         .db #$A2, #%00011010
0D59F B2 14                         .db #$B2, #%00010100
0D5A1 03 67                         .db #$03, #%01100111
0D5A3 43 67                         .db #$43, #%01100111
0D5A5 83 67                         .db #$83, #%01100111
0D5A7 24 09                         .db #$24, #%00001001
0D5A9 74 0D                         .db #$74, #%00001101
0D5AB C4 0A                         .db #$C4, #%00001010
0D5AD 05 A7                         .db #$05, #%10100111
0D5AF 45 27                         .db #$45, #%00100111
0D5B1 95 27                         .db #$95, #%00100111
0D5B3 16 C7                         .db #$16, #%11000111
0D5B5 36 67                         .db #$36, #%01100111
0D5B7 86 67                         .db #$86, #%01100111
0D5B9 D6 07                         .db #$D6, #%00000111
0D5BB 07 A3                         .db #$07, #%10100011
0D5BD 27 23                         .db #$27, #%00100011
0D5BF 47 C7                         .db #$47, #%11000111
0D5C1 57 A0                         .db #$57, #%10100000
0D5C3 67 A7                         .db #$67, #%10100111
0D5C5 77 20                         .db #$77, #%00100000
0D5C7 97 C7                         .db #$97, #%11000111
0D5C9 A7 A4                         .db #$A7, #%10100100
0D5CB B7 A7                         .db #$B7, #%10100111
0D5CD C7 24                         .db #$C7, #%00100100
0D5CF 28 0B                         .db #$28, #%00001011
0D5D1 38 A3                         .db #$38, #%10100011
0D5D3 78 08                         .db #$78, #%00001000
0D5D5 88 A0                         .db #$88, #%10100000
0D5D7 C8 0C                         .db #$C8, #%00001100
0D5D9 D8 A4                         .db #$D8, #%10100100
0D5DB 09 43                         .db #$09, #%01000011
0D5DD 59 40                         .db #$59, #%01000000
0D5DF A9 44                         .db #$A9, #%01000100
0D5E1 FF                            .db #LEVEL_END
0D5E2                           
0D5E2                           lvl_layout_19:
0D5E2 11 A8                         .db #$11, #%10101000
0D5E4 21 68                         .db #$21, #%01101000
0D5E6 81 28                         .db #$81, #%00101000
0D5E8 B1 48                         .db #$B1, #%01001000
0D5EA 22 48                         .db #$22, #%01001000
0D5EC 62 68                         .db #$62, #%01101000
0D5EE B2 28                         .db #$B2, #%00101000
0D5F0 23 28                         .db #$23, #%00101000
0D5F2 83 28                         .db #$83, #%00101000
0D5F4 B3 28                         .db #$B3, #%00101000
0D5F6 04 E8                         .db #$04, #%11101000
0D5F8 24 08                         .db #$24, #%00001000
0D5FA 44 08                         .db #$44, #%00001000
0D5FC 64 E8                         .db #$64, #%11101000
0D5FE 84 E8                         .db #$84, #%11101000
0D600 C4 A8                         .db #$C4, #%10101000
0D602 D4 E8                         .db #$D4, #%11101000
0D604 15 48                         .db #$15, #%01001000
0D606 55 C8                         .db #$55, #%11001000
0D608 75 C8                         .db #$75, #%11001000
0D60A A5 08                         .db #$A5, #%00001000
0D60C 36 08                         .db #$36, #%00001000
0D60E B6 08                         .db #$B6, #%00001000
0D610 27 48                         .db #$27, #%01001000
0D612 97 28                         .db #$97, #%00101000
0D614 C7 08                         .db #$C7, #%00001000
0D616 09 61                         .db #$09, #%01100001
0D618 19 11                         .db #$19, #%00010001
0D61A 49 61                         .db #$49, #%01100001
0D61C 89 31                         .db #$89, #%00110001
0D61E A9 61                         .db #$A9, #%01100001
0D620 FF                            .db #LEVEL_END
0D621                           
0D621                           lvl_layout_20:
0D621 00 60                         .db #$00, #%01100000
0D623 10 1A                         .db #$10, #%00011010
0D625 40 A7                         .db #$40, #%10100111
0D627 50 20                         .db #$50, #%00100000
0D629 70 1A                         .db #$70, #%00011010
0D62B 80 40                         .db #$80, #%01000000
0D62D B0 1A                         .db #$B0, #%00011010
0D62F C0 20                         .db #$C0, #%00100000
0D631 01 40                         .db #$01, #%01000000
0D633 31 1A                         .db #$31, #%00011010
0D635 A1 40                         .db #$A1, #%01000000
0D637 D1 1A                         .db #$D1, #%00011010
0D639 43 67                         .db #$43, #%01100111
0D63B 83 47                         .db #$83, #%01000111
0D63D 44 A7                         .db #$44, #%10100111
0D63F 54 25                         .db #$54, #%00100101
0D641 94 08                         .db #$94, #%00001000
0D643 A4 A7                         .db #$A4, #%10100111
0D645 55 05                         .db #$55, #%00000101
0D647 65 08                         .db #$65, #%00001000
0D649 06 27                         .db #$06, #%00100111
0D64B 36 67                         .db #$36, #%01100111
0D64D 76 28                         .db #$76, #%00101000
0D64F A6 27                         .db #$A6, #%00100111
0D651 D6 07                         .db #$D6, #%00000111
0D653 A7 A7                         .db #$A7, #%10100111
0D655 08 60                         .db #$08, #%01100000
0D657 09 60                         .db #$09, #%01100000
0D659 18 A7                         .db #$18, #%10100111
0D65B 48 A7                         .db #$48, #%10100111
0D65D 58 47                         .db #$58, #%01000111
0D65F 88 27                         .db #$88, #%00100111
0D661 B8 20                         .db #$B8, #%00100000
0D663 D8 1A                         .db #$D8, #%00011010
0D665 59 15                         .db #$59, #%00010101
0D667 69 60                         .db #$69, #%01100000
0D669 A9 60                         .db #$A9, #%01100000
0D66B FF                            .db #LEVEL_END
0D66C                           
0D66C                           lvl_layout_21:
0D66C 00 13                         .db #$00, #%00010011
0D66E 10 11                         .db #$10, #%00010001
0D670 20 67                         .db #$20, #%01100111
0D672 60 67                         .db #$60, #%01100111
0D674 A0 47                         .db #$A0, #%01000111
0D676 D0 15                         .db #$D0, #%00010101
0D678 32 63                         .db #$32, #%01100011
0D67A 72 05                         .db #$72, #%00000101
0D67C 82 43                         .db #$82, #%01000011
0D67E B2 43                         .db #$B2, #%01000011
0D680 33 03                         .db #$33, #%00000011
0D682 43 2A                         .db #$43, #%00101010
0D684 63 7A                         .db #$63, #%01111010
0D686 73 2A                         .db #$73, #%00101010
0D688 A3 7A                         .db #$A3, #%01111010
0D68A 34 63                         .db #$34, #%01100011
0D68C 74 63                         .db #$74, #%01100011
0D68E B4 43                         .db #$B4, #%01000011
0D690 06 63                         .db #$06, #%01100011
0D692 46 63                         .db #$46, #%01100011
0D694 86 63                         .db #$86, #%01100011
0D696 C6 C3                         .db #$C6, #%11000011
0D698 07 7A                         .db #$07, #%01111010
0D69A 47 7A                         .db #$47, #%01111010
0D69C 67 0A                         .db #$67, #%00001010
0D69E 87 7A                         .db #$87, #%01111010
0D6A0 08 13                         .db #$08, #%00010011
0D6A2 18 43                         .db #$18, #%01000011
0D6A4 48 63                         .db #$48, #%01100011
0D6A6 88 63                         .db #$88, #%01100011
0D6A8 FF                            .db #LEVEL_END
0D6A9                           
0D6A9                           lvl_layout_22:
0D6A9 00 7A                         .db #$00, #%01111010
0D6AB 40 7A                         .db #$40, #%01111010
0D6AD 80 7A                         .db #$80, #%01111010
0D6AF C0 3A                         .db #$C0, #%00111010
0D6B1 13 67                         .db #$13, #%01100111
0D6B3 83 A7                         .db #$83, #%10100111
0D6B5 B3 07                         .db #$B3, #%00000111
0D6B7 14 07                         .db #$14, #%00000111
0D6B9 44 07                         .db #$44, #%00000111
0D6BB A4 07                         .db #$A4, #%00000111
0D6BD 15 A5                         .db #$15, #%10100101
0D6BF 45 A5                         .db #$45, #%10100101
0D6C1 85 25                         .db #$85, #%00100101
0D6C3 86 05                         .db #$86, #%00000101
0D6C5 A6 05                         .db #$A6, #%00000101
0D6C7 17 11                         .db #$17, #%00010001
0D6C9 47 A1                         .db #$47, #%10100001
0D6CB 87 A1                         .db #$87, #%10100001
0D6CD B7 A1                         .db #$B7, #%10100001
0D6CF 18 41                         .db #$18, #%01000001
0D6D1 68 01                         .db #$68, #%00000001
0D6D3 D8 01                         .db #$D8, #%00000001
0D6D5 FF                            .db #LEVEL_END
0D6D6                           
0D6D6                           lvl_layout_23:
0D6D6 00 71                         .db #$00, #%01110001
0D6D8 40 11                         .db #$40, #%00010001
0D6DA 50 43                         .db #$50, #%01000011
0D6DC 80 D1                         .db #$80, #%11010001
0D6DE 90 E3                         .db #$90, #%11100011
0D6E0 A0 63                         .db #$A0, #%01100011
0D6E2 01 63                         .db #$01, #%01100011
0D6E4 41 63                         .db #$41, #%01100011
0D6E6 A1 63                         .db #$A1, #%01100011
0D6E8 02 63                         .db #$02, #%01100011
0D6EA 42 63                         .db #$42, #%01100011
0D6EC 62 11                         .db #$62, #%00010001
0D6EE A2 67                         .db #$A2, #%01100111
0D6F0 04 63                         .db #$04, #%01100011
0D6F2 44 23                         .db #$44, #%00100011
0D6F4 64 D1                         .db #$64, #%11010001
0D6F6 74 E3                         .db #$74, #%11100011
0D6F8 84 F1                         .db #$84, #%11110001
0D6FA 94 E3                         .db #$94, #%11100011
0D6FC A4 C7                         .db #$A4, #%11000111
0D6FE B4 23                         .db #$B4, #%00100011
0D700 05 63                         .db #$05, #%01100011
0D702 45 23                         .db #$45, #%00100011
0D704 06 71                         .db #$06, #%01110001
0D706 46 11                         .db #$46, #%00010001
0D708 56 E3                         .db #$56, #%11100011
0D70A D6 07                         .db #$D6, #%00000111
0D70C 17 D1                         .db #$17, #%11010001
0D70E 27 43                         .db #$27, #%01000011
0D710 67 D1                         .db #$67, #%11010001
0D712 A7 C7                         .db #$A7, #%11000111
0D714 C7 A7                         .db #$C7, #%10100111
0D716 D7 B3                         .db #$D7, #%10110011
0D718 28 43                         .db #$28, #%01000011
0D71A 78 43                         .db #$78, #%01000011
0D71C 29 43                         .db #$29, #%01000011
0D71E 79 43                         .db #$79, #%01000011
0D720 FF                           .db #LEVEL_END
0D721                           
0D721                           lvl_layout_24:
0D721 02 67                         .db #$02, #%01100111
0D723 42 67                         .db #$42, #%01100111
0D725 82 67                         .db #$82, #%01100111
0D727 05 67                         .db #$05, #%01100111
0D729 45 67                         .db #$45, #%01100111
0D72B 85 67                         .db #$85, #%01100111
0D72D 08 67                         .db #$08, #%01100111
0D72F 48 67                         .db #$48, #%01100111
0D731 88 67                         .db #$88, #%01100111
0D733 30 E7                         .db #$30, #%11100111
0D735 70 E7                         .db #$70, #%11100111
0D737 B0 E7                         .db #$B0, #%11100111
0D739 34 E7                         .db #$34, #%11100111
0D73B 74 E7                         .db #$74, #%11100111
0D73D B4 E7                         .db #$B4, #%11100111
0D73F 20 13                         .db #$20, #%00010011
0D741 40 10                         .db #$40, #%00010000
0D743 80 02                         .db #$80, #%00000010
0D745 41 05                         .db #$41, #%00000101
0D747 B1 09                         .db #$B1, #%00001001
0D749 02 09                         .db #$02, #%00001001
0D74B 52 0C                         .db #$52, #%00001100
0D74D 13 11                         .db #$13, #%00010001
0D74F 33 04                         .db #$33, #%00000100
0D751 74 0C                         .db #$74, #%00001100
0D753 B4 08                         .db #$B4, #%00001000
0D755 15 09                         .db #$15, #%00001001
0D757 55 0C                         .db #$55, #%00001100
0D759 95 0C                         .db #$95, #%00001100
0D75B 47 03                         .db #$47, #%00000011
0D75D A7 12                         .db #$A7, #%00010010
0D75F 18 15                         .db #$18, #%00010101
0D761 09 05                         .db #$09, #%00000101
0D763 19 03                         .db #$19, #%00000011
0D765 FF                            .db #LEVEL_END
0D766                           
0D766                           lvl_layout_25:
0D766 00 12                         .db #$00, #%00010010
0D768 10 63                         .db #$10, #%01100011
0D76A 60 63                         .db #$60, #%01100011
0D76C A0 07                         .db #$A0, #%00000111
0D76E 01 11                         .db #$01, #%00010001
0D770 A1 02                         .db #$A1, #%00000010
0D772 02 67                         .db #$02, #%01100111
0D774 42 07                         .db #$42, #%00000111
0D776 62 67                         .db #$62, #%01100111
0D778 A2 C7                         .db #$A2, #%11000111
0D77A 03 61                         .db #$03, #%01100001
0D77C 43 01                         .db #$43, #%00000001
0D77E 63 61                         .db #$63, #%01100001
0D780 A6 E7                         .db #$A6, #%11100111
0D782 B6 47                         .db #$B6, #%01000111
0D784 C6 01                         .db #$C6, #%00000001
0D786 B7 42                         .db #$B7, #%01000010
0D788 B8 42                         .db #$B8, #%01000010
0D78A C8 0A                         .db #$C8, #%00001010
0D78C 09 7A                         .db #$09, #%01111010
0D78E 49 7A                         .db #$49, #%01111010
0D790 89 3A                         .db #$89, #%00111010
0D792 B9 42                         .db #$B9, #%01000010
0D794 FF                            .db #LEVEL_END
0D795                           
0D795                           ;; Level layout address pointers
0D795                           tbl_lvl_layout_hi:
0D795 D0 D0 D1 D1 D1                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D79A D1 D2 D2 D2 D3                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D79F D3 D3 D3 D4 D4                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D7A4 D4 D5 D5 D5 D6                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D7A9 D6 D6 D6 D7 D7                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D7AE                           
0D7AE                           tbl_lvl_layout_lo:
0D7AE B6 D1 06 39 AA                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D7B3 E5 6E AF E6 29                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D7B8 58 AB D6 29 A0                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D7BD D1 26 8D E2 21                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D7C2 6C A9 D6 21 66                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D7C7                           
0D7C7                           ;; Ball start position (#$YX)
0D7C7                           tbl_lvl_ball_startpos:
0D7C7 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D7CC 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D7D1 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D7D6 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D7DB 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D7E0                               
0D7E0                           ;; Ball start direction, color and tile score
0D7E0                           ;; #% ccc v tttt
0D7E0                           ;;    ||| | ++++-- tile score
0D7E0                           ;;    ||| +------- vertical direction, up (0) or down
0D7E0                           ;;    +++--------- color (CBRYGM)
0D7E0                           tbl_lvl_ball_init:
0D7E0 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D7E5 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D7EA 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D7EF 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D7F4 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D7F9                           
0D7F9                           
0D7F9                           
0D7F9                           ;; Helper table to multiply values by 16
0D7F9                           tbl_Times16:
0D7F9 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D801 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D809                               
0D809                           
0D809                           ;; Helper table to multiply values by 64
0D809                           tbl_Times64:
0D809 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D80D                           
0D80D                           
0D80D                           ;; Metatile ID to CHR data mapper
0D80D                           tbl_GametileTopLeft:
0D80D 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D817                           
0D817                           tbl_GametileTopRight:
0D817 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D821                           
0D821                           tbl_GametileBottomLeft:
0D821 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D82B                           
0D82B                           tbl_GametileBottomRight:
0D82B 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D835                           
0D835                           ;; Metatile ID to RAM byte data mapper
0D835                           tbl_GameTileRamByte:
0D835 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D83A                           
0D83A                           ;; HUD text data
0D83A                           tbl_HudText:
0D83A 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D842 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D849 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D851 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S
0D856                           
0D856                           ;; Move block top left tile based on color
0D856                           tbl_MoveBlockTopLeftTile:
0D856 00 4A 42 4A 42 4A 42          .db #$00, #$4A, #$42, #$4A, #$42, #$4A, #$42
0D85D                           
0D85D                           ;; NMI handler
0D85D                           NMI:
0D85D                               .include "interrupt/nmi.asm"
0D85D                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D85D                           ;;
0D85D                           ;; include/nmi.asm
0D85D                           ;;
0D85D                           ;; Non-maskable interrupt script. This script is being executed
0D85D                           ;; when vBlank hits.
0D85D                           ;;
0D85D                           ;;
0D85D                           
0D85D                               ;; Preserve accumulator through stack
0D85D 48                            PHA
0D85E                           
0D85E                               ;; Should NMI be skipped?
0D85E A5 13                         LDA skip_nmi
0D860 F0 03                         BEQ +
0D862 4C A3 D9                          JMP +skip_nmi
0D865                               +
0D865                           
0D865                               ;; When in NMI, skip additional NMI requests
0D865 A9 01                         LDA #$01
0D867 85 13                         STA skip_nmi
0D869                           
0D869                               ;; Preserve X, Y, and PC through stack
0D869 8A                            TXA
0D86A 48                            PHA
0D86B 98                            TYA
0D86C 48                            PHA
0D86D 08                            PHP
0D86E                               
0D86E                               ;; Check forced NMI skip
0D86E A5 14                         LDA force_skip_nmi
0D870 F0 03                         BEQ +
0D872 4C 92 D9                          JMP +force_skip_nmi
0D875                               +
0D875                           
0D875                               ;; Update PPU mask
0D875                               ;LDA #$00
0D875                               ;STA PPU_CTRL
0D875 A5 12                         LDA soft_ppu_mask
0D877 8D 01 20                      STA PPU_MASK
0D87A                               
0D87A                               
0D87A                               ;; Additional PPU updates go here
0D87A                               .include "game/interrupt/nmi.asm"
0D87A                           
0D87A                               ;; Check if ppu_buffer needs updating
0D87A A5 39                         LDA ppu_buffer_update
0D87C D0 03                         BNE +
0D87E 4C C0 D8                          JMP +no_ppu_buffer_update
0D881                               +
0D881                           
0D881                               ;; Reset ppu control register and mask
0D881 A2 00                         LDX #$00
0D883 8E 00 20                      STX PPU_CTRL
0D886 8E 01 20                      STX PPU_MASK
0D889                           
0D889                               ;; Set up loop
0D889                               -
0D889                                   ;; Reset hi/lo latch
0D889 2C 02 20                          BIT PPU_STATUS
0D88C                           
0D88C                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D88C BD 00 03                          LDA ppu_buffer,x
0D88F 8D 06 20                          STA PPU_ADDR
0D892 E8                                INX
0D893 BD 00 03                          LDA ppu_buffer,x
0D896 8D 06 20                          STA PPU_ADDR
0D899                           
0D899                                   ;; Write ppu_buffer data to PPU_ADDR
0D899 E8                                INX
0D89A BD 00 03                          LDA ppu_buffer,x
0D89D 8D 07 20                          STA PPU_DATA
0D8A0                           
0D8A0                                   ;; Check if updating is done (eg. X is at pointer)
0D8A0 E8                                INX
0D8A1 E4 3A                             CPX ppu_buffer_pointer
0D8A3 F0 03                             BEQ +
0D8A5 4C 89 D8                      JMP -
0D8A8                           +
0D8A8                           
0D8A8                               ;; Reset ppu buffer update and pointer
0D8A8 A9 00                         LDA #$00
0D8AA 85 39                         STA ppu_buffer_update
0D8AC 85 3A                         STA ppu_buffer_pointer
0D8AE                               
0D8AE                               ;; Reset scrolling position
0D8AE 8D 05 20                      STA PPU_SCROLL
0D8B1 8D 05 20                      STA PPU_SCROLL
0D8B4                           
0D8B4                               ;; Restore ppu control register and mask
0D8B4 A9 90                         LDA #%10010000
0D8B6 8D 00 20                      STA PPU_CTRL
0D8B9 A5 12                         LDA soft_ppu_mask
0D8BB 8D 01 20                      STA PPU_MASK
0D8BE A9 00                         LDA #$00
0D8C0                           
0D8C0                           ;; Continue other NMI stuff
0D8C0                           +no_ppu_buffer_update:
0D8C0                           
0D8C0                               ;; Reset sprite RAM, draw sprites
0D8C0 8D 03 20                      STA OAM_ADDR
0D8C3 A9 02                         LDA #$02
0D8C5 8D 14 40                      STA OAM_DMA
0D8C8                           
0D8C8                               ;; Decrease explosion and move block timers
0D8C8 A0 04                         LDY #MAX_ANIMATIONS
0D8CA A2 00                         LDX #$00
0D8CC                               -
0D8CC BD 60 03                          LDA explosion_timer,x
0D8CF F0 03                             BEQ +
0D8D1 DE 60 03                              DEC explosion_timer,x
0D8D4                                   +
0D8D4                           
0D8D4 BD 80 03                          LDA move_block_timer,x
0D8D7 F0 03                             BEQ +
0D8D9 DE 80 03                              DEC move_block_timer,x
0D8DC                                   +
0D8DC                                   
0D8DC E8                                INX
0D8DD 88                                DEY
0D8DE F0 03                             BEQ +done
0D8E0 4C CC D8                      JMP -
0D8E3                           +done:
0D8E3                           
0D8E3                               ;; Decrease nudge timer
0D8E3 A5 3E                         LDA nudge_timer
0D8E5 F0 02                         BEQ +
0D8E7 C6 3E                             DEC nudge_timer
0D8E9                               +
0D8E9                           
0D8E9                               ;; Decrease bonus timer
0D8E9 A5 3F                         LDA bonus_timer
0D8EB F0 02                         BEQ +
0D8ED C6 3F                             DEC bonus_timer
0D8EF                               +
0D8EF                           
0D8EF                               ;; Decrease kill timer
0D8EF A5 40                         LDA kill_timer
0D8F1 F0 02                         BEQ +
0D8F3 C6 40                             DEC kill_timer
0D8F5                               +
0D8F5                           
0D8F5                               ;; Play background noise
0D8F5 A5 38                         LDA screen_mode
0D8F7 29 01                         AND #IS_GAME_SCREEN
0D8F9 F0 21                         BEQ +
0D8FB                                   .include "game/include/main/background_sound.asm"
0D8FB                               ;; At random times, set max_noise period to $03-$0A
0D8FB A5 44                         LDA max_noise
0D8FD D0 1D                         BNE +
0D8FF 20 FF C4                          JSR sub_GetRandomNumber
0D902 29 EF                             AND #%11101111
0D904 D0 16                             BNE +
0D906                                   
0D906 A5 15                             LDA frame_counter
0D908 85 16                             STA random_seed
0D90A 20 FF C4                          JSR sub_GetRandomNumber
0D90D 29 07                             AND #$07
0D90F 69 03                             ADC #$03
0D911 85 44                             STA max_noise
0D913 A9 01                             LDA #$01
0D915 85 45                             STA sweep_noise
0D917 A9 34                             LDA #$34
0D919 8D 0C 40                          STA NOISE_VOLUME
0D91C                           
0D91C                               +
0D91C                           
0D91C                               ;; if sweep noise = $00: constant noise
0D91C                               ;; else if sweep noise > $80: decrease pitch
0D91C                               ;; else: increase pitch
0D91C A5 45                         LDA sweep_noise
0D91E F0 18                         BEQ +constantNoise
0D920 30 2A                         BMI +decreaseNoise
0D922                           
0D922                           ;; Sweep noise up to max noise pitch
0D922                           +increaseNoise:
0D922 C6 46                         DEC current_noise
0D924 A5 46                         LDA current_noise
0D926 8D 0E 40                      STA NOISE_PERIOD
0D929 C5 44                         CMP max_noise
0D92B D0 08                         BNE +
0D92D A9 00                             LDA #$00
0D92F 85 45                             STA sweep_noise
0D931 A9 0A                             LDA #$0A
0D933 85 47                             STA noise_timer
0D935                               +
0D935 4C 60 D9                      JMP +endNoise
0D938                           
0D938                           ;; Keep noise at constant pitch
0D938                           +constantNoise:
0D938 A5 44                         LDA max_noise
0D93A F0 24                         BEQ +endNoise
0D93C                           
0D93C A5 47                         LDA noise_timer
0D93E D0 07                         BNE +
0D940 A9 80                             LDA #$80
0D942 85 45                             STA sweep_noise
0D944 4C 60 D9                          JMP +endNoise
0D947                               +
0D947 C6 47                         DEC noise_timer
0D949 4C 60 D9                      JMP +endNoise
0D94C                           
0D94C                           ;; Sweep noise down to initial pitch
0D94C                           +decreaseNoise:
0D94C E6 46                         INC current_noise
0D94E A5 46                         LDA current_noise
0D950 8D 0E 40                      STA NOISE_PERIOD
0D953 C9 0E                         CMP #$0E
0D955 D0 09                         BNE +endNoise
0D957                           
0D957 20 8F C5                      JSR sub_BackgroundNoise
0D95A A9 00                         LDA #$00
0D95C 85 44                         STA max_noise
0D95E 85 45                         STA sweep_noise
0D960                           
0D960                           +endNoise:
0D960                           
0D960                               +
0D960                           
0D960                               ;; Test: random bleeps
0D960                               .include "game/test/random_descending_bleeps.asm"
0D960                           ;; Random bleepy noises
0D960 A5 48                         LDA do_beeps
0D962 F0 2E                         BEQ +continue
0D964                               
0D964 C9 02                         CMP #$02
0D966 D0 12                         BNE +beep
0D968                              
0D968                           +stopBeep:
0D968 A9 00                         LDA #$00
0D96A 85 48                         STA do_beeps
0D96C A9 08                         LDA #$08
0D96E 8D 15 40                      STA APU_STATUS
0D971 8D 0F 40                      STA NOISE_LENGTH
0D974 20 8F C5                      JSR sub_BackgroundNoise
0D977 4C 92 D9                      JMP +continue
0D97A                               
0D97A                           +beep:
0D97A A9 01                         LDA #$01
0D97C 8D 15 40                      STA APU_STATUS
0D97F A9 B8                         LDA #$B8
0D981 8D 00 40                      STA PULSE1_VOLUME
0D984 20 FF C4                      JSR sub_GetRandomNumber
0D987 8D 02 40                      STA PULSE1_TIMER_LO
0D98A 20 FF C4                      JSR sub_GetRandomNumber
0D98D 29 01                         AND #$01
0D98F 8D 03 40                      STA PULSE1_TIMER_HI
0D992                           
0D992                           +continue:0D992                               
0D992                           
0D992                           
0D992                           ;; This is what happens when we forced nmi skip
0D992                           +force_skip_nmi:
0D992                           
0D992                               ;; Increase frame timers
0D992 E6 15                         INC frame_counter
0D994                           
0D994                               ;; reset sprites_update_position
0D994 A9 00                         LDA #$00
0D996 85 35                         STA sprites_update_position
0D998                           
0D998                               ;; Don't skip next NMI request
0D998 A9 00                         LDA #$00
0D99A 85 13                         STA skip_nmi
0D99C 85 49                         STA check_nmi
0D99E                           
0D99E                               ;; Restore X, Y and PC from stack
0D99E 28                            PLP
0D99F 68                            PLA
0D9A0 A8                            TAY
0D9A1 68                            PLA
0D9A2 AA                            TAX
0D9A3                           
0D9A3                           +skip_nmi:
0D9A3                               ;; Restore accumulator from stack
0D9A3 68                            PLA
0D9A4                           
0D9A4                               ;; Return
0D9A4 40                            RTI
0D9A5                           
0D9A5                           ;; IRQ handler (empty)
0D9A5                           IRQ:
0D9A5                               .include "interrupt/irq.asm"
0D9A5 40                            RTI0D9A6                           
0D9A6                           ;; Interrupt vectors
0D9A6 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 5D D8                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE A5 D9                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
