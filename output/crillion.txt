	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$F0        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge frames
	                            NUDGE_FRAMES    = #$05
	                            
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU Noise registers
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           ball_update_position   .dsb 1
00036                           
00036                           
00036                           ;; Ball flags
00036                           ;; #% c c c v . f n a
00036                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00036                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00036                           ;;    | | | | | +------ ball is frozen (not moving)
00036                           ;;    | | | | +-------- (unused for now)
00036                           ;;    | | | +---------- ball moves up (0) or down (1)
00036                           ;;    +-+-+------------ ball color (1-6)
00036                           ball_flags             .dsb 1
00037                           
00037                           
00037                           ;; Screen mode
00037                           ;; #% u . . . . . t t
00037                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00037                           ;;    | +-+-+-+-+------------- unused
00037                           ;;    +----------------------- should the screen update
00037                           screen_mode            .dsb 1
00038                           
00038                           
00038                           
00038                           ;; PPU buffer variables
00038                           ppu_buffer_update      .dsb 1
00039                           ppu_buffer_pointer     .dsb 1
0003A                           
0003A                           ;; Pointer to keep track of the number of explosions
0003A                           explosion_pointer      .dsb 1
0003B                           
0003B                           ;; Sprite RAM pointer to keep track of sprites to update
0003B                           sprite_ram_pointer     .dsb 1
0003C                           
0003C                           ;; Nudge counter
0003C                           nudge_counter          .dsb 1
0003D                           
0003D                           ;; Current level (doubles as level select variable)
0003D                           current_level          .dsb 1
0003E                           
0003E                           ;; Tile type the ball is currently colliding with
0003E                           colliding_tile         .dsb 1
0003F                           
0003F                           ;; Background noise variables
0003F                           max_noise              .dsb 1
00040                           sweep_noise            .dsb 1
00041                           current_noise          .dsb 1
00042                           noise_counter          .dsb 1
00043                           
00043                           ;; Additional NMI check for timed PPU fade
00043                           check_nmi              .dsb 1
00044                               00044                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 F4 C3                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 F4 C3                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 37                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 3D                         STA current_level
0C057                           
0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 3B                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 D7 C3                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 37                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 37                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 61 CD                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 5E CD                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 1B C5                      JSR sub_DisableRendering
0C08A 20 B9 C7                      JSR sub_JumpToPointer
0C08D 20 2F C5                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 37                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 37                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; Check if we're on the game screen
0C096 A5 37                         LDA screen_mode
0C098 C9 01                         CMP #IS_GAME_SCREEN
0C09A F0 03                         BEQ +
0C09C 4C C7 C2                          JMP +checkNextScreen
0C09F                               +
0C09F                           
0C09F                               ;; Load sprite 0 in place
0C09F A9 28                         LDA #$28
0C0A1 8D 00 02                      STA ADDR_SPRITERAM
0C0A4 A9 0F                         LDA #$0F
0C0A6 8D 01 02                      STA ADDR_SPRITERAM+1
0C0A9 A9 22                         LDA #$22
0C0AB 8D 02 02                      STA ADDR_SPRITERAM+2
0C0AE A9 F8                         LDA #$F8
0C0B0 8D 03 02                      STA ADDR_SPRITERAM+3
0C0B3 A9 04                         LDA #$04
0C0B5 85 3B                         STA sprite_ram_pointer
0C0B7                           
0C0B7                               ;; We're on the game screen
0C0B7                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0B7 A5 35                         LDA ball_update_position
0C0B9 F0 03                         BEQ +
0C0BB 4C A8 C2                          JMP +skipBallMovement
0C0BE                               +
0C0BE                               
0C0BE                               ;; Move the ball
0C0BE                               .include "game/include/main/move_ball.asm"
0C0BE                           
0C0BE                               ;; Check if ball goes up or down
0C0BE A5 36                         LDA ball_flags
0C0C0 29 10                         AND #BALL_MOVES_DOWN
0C0C2 F0 2B                         BEQ +moveBallUp
0C0C4                           
0C0C4                           
0C0C4                           +moveBallDown:
0C0C4                               ;; update the low byte
0C0C4 A5 1A                         LDA ball_ypos_lo
0C0C6 85 1C                         STA ball_ypos_lo_prev
0C0C8 18                            CLC
0C0C9 69 F0                         ADC #BALL_SPEED_LO
0C0CB 85 1A                         STA ball_ypos_lo
0C0CD                           
0C0CD                               ;; update the high byte with carry
0C0CD A5 19                         LDA ball_ypos_hi
0C0CF 85 1B                         STA ball_ypos_hi_prev
0C0D1 69 01                         ADC #BALL_SPEED_HI
0C0D3 85 19                         STA ball_ypos_hi
0C0D5                               
0C0D5                               ;; Check bottom bound
0C0D5 C9 C8                         CMP #BOUND_BOTTOM
0C0D7 90 3C                         BCC +checkHorizontalMovement
0C0D9 F0 3A                         BEQ +checkHorizontalMovement
0C0DB                           
0C0DB                           
0C0DB                               ;; Change ball direction to "up"
0C0DB A9 C8                         LDA #BOUND_BOTTOM
0C0DD 38                            SEC
0C0DE E9 01                         SBC #$01
0C0E0 85 19                         STA ball_ypos_hi
0C0E2 A9 00                         LDA #$00
0C0E4 85 1A                         STA ball_ypos_lo
0C0E6 A5 36                         LDA ball_flags
0C0E8 29 EF                         AND #MOVE_BALL_UP
0C0EA 85 36                         STA ball_flags
0C0EC 4C 15 C1                      JMP +checkHorizontalMovement
0C0EF                           
0C0EF                           
0C0EF                           +moveBallUp:
0C0EF                               ;; update the low byte
0C0EF A5 1A                         LDA ball_ypos_lo
0C0F1 85 1C                         STA ball_ypos_lo_prev
0C0F3 38                            SEC
0C0F4 E9 F0                         SBC #BALL_SPEED_LO
0C0F6 85 1A                         STA ball_ypos_lo
0C0F8                           
0C0F8                               ;; update the high byte with carry
0C0F8 A5 19                         LDA ball_ypos_hi
0C0FA 85 1B                         STA ball_ypos_hi_prev
0C0FC E9 01                         SBC #BALL_SPEED_HI
0C0FE 85 19                         STA ball_ypos_hi
0C100                               
0C100                               ;; Check top bound
0C100 C9 30                         CMP #BOUND_TOP
0C102 B0 11                         BCS +checkHorizontalMovement
0C104                           
0C104                               ;; Change ball direction to "down"
0C104 A9 30                         LDA #BOUND_TOP
0C106 18                            CLC
0C107 69 01                         ADC #$01
0C109 85 19                         STA ball_ypos_hi
0C10B A9 00                         LDA #$00
0C10D 85 1A                         STA ball_ypos_lo
0C10F A5 36                         LDA ball_flags
0C111 09 10                         ORA #MOVE_BALL_DOWN
0C113 85 36                         STA ball_flags
0C115                           
0C115                           
0C115                           +checkHorizontalMovement:
0C115                           
0C115                               ;; Check if ball is being nudged
0C115 A5 3C                         LDA nudge_counter
0C117 D0 41                         BNE +doneBallMovement
0C119                           
0C119                               ;; Check if left button is held
0C119 A5 0F                         LDA buttons_held
0C11B 29 02                         AND #BUTTON_LEFT
0C11D F0 1B                         BEQ +
0C11F                                   ;; update the low byte
0C11F A5 18                             LDA ball_xpos_lo
0C121 38                                SEC
0C122 E9 F0                             SBC #BALL_SPEED_LO
0C124 85 18                             STA ball_xpos_lo
0C126                           
0C126                                   ;; update the high byte
0C126 A5 17                             LDA ball_xpos_hi
0C128 E9 01                             SBC #BALL_SPEED_HI
0C12A 85 17                             STA ball_xpos_hi
0C12C                                   
0C12C                                   ;; Check left bound
0C12C C9 10                             CMP #BOUND_LEFT
0C12E B0 2A                             BCS +doneBallMovement
0C130                                   
0C130                                   ;; Set flag to nudge right and set nudge counter
0C130 A5 36                             LDA ball_flags
0C132 09 02                             ORA #NUDGE_BALL_RIGHT
0C134 20 B2 C7                          JSR sub_InitiateNudge
0C137                           
0C137 4C 5A C1                          JMP +doneBallMovement        
0C13A                               +
0C13A                           
0C13A                               ;; Check if right button is held
0C13A A5 0F                         LDA buttons_held
0C13C 29 01                         AND #BUTTON_RIGHT
0C13E F0 1A                         BEQ +
0C140                                   ;; update the low byte
0C140 A5 18                             LDA ball_xpos_lo
0C142 18                                CLC
0C143 69 F0                             ADC #BALL_SPEED_LO
0C145 85 18                             STA ball_xpos_lo
0C147                           
0C147                                   ;; update the high byte
0C147 A5 17                             LDA ball_xpos_hi
0C149 69 01                             ADC #BALL_SPEED_HI
0C14B 85 17                             STA ball_xpos_hi     
0C14D                           
0C14D                                  ;; Check right bound
0C14D C9 E8                             CMP #BOUND_RIGHT
0C14F 90 09                             BCC +doneBallMovement
0C151 F0 07                             BEQ +doneBallMovement
0C153                                   
0C153                                   ;; Set flag to nudge left and set nudge timer
0C153 A5 36                             LDA ball_flags
0C155 29 FD                             AND #NUDGE_BALL_LEFT
0C157 20 B2 C7                          JSR sub_InitiateNudge
0C15A                               +
0C15A                           
0C15A                           
0C15A                           +doneBallMovement:
0C15A                           
0C15A                               ;; Check nudge
0C15A A5 3C                         LDA nudge_counter
0C15C F0 23                         BEQ +doneBallNudging
0C15E A5 36                             LDA ball_flags
0C160 29 02                             AND #NUDGE_BALL_RIGHT
0C162 F0 10                             BEQ +nudgeBallLeft
0C164                                   
0C164                                       ;; update the low byte
0C164 A5 18                                 LDA ball_xpos_lo
0C166 18                                    CLC
0C167 69 F0                                 ADC #BALL_SPEED_LO
0C169 85 18                                 STA ball_xpos_lo
0C16B                           
0C16B                                       ;; update the high byte
0C16B A5 17                                 LDA ball_xpos_hi
0C16D 69 01                                 ADC #BALL_SPEED_HI
0C16F 85 17                                 STA ball_xpos_hi  
0C171 4C 81 C1                              JMP +doneBallNudging
0C174                                   +nudgeBallLeft:
0C174                                   
0C174                                   ;; update the low byte
0C174 A5 18                             LDA ball_xpos_lo
0C176 38                                SEC
0C177 E9 F0                             SBC #BALL_SPEED_LO
0C179 85 18                             STA ball_xpos_lo
0C17B                           
0C17B                                   ;; update the high byte
0C17B A5 17                             LDA ball_xpos_hi
0C17D E9 01                             SBC #BALL_SPEED_HI
0C17F 85 17                             STA ball_xpos_hi
0C181                               +doneBallNudging:
0C181                           
0C181                               ;; Don't update position again until next frame
0C181 E6 35                         INC ball_update_position
0C183                           
0C183                               
0C183                               ;; Do collision detection
0C183                               .include "game/include/main/collision_detection.asm"
0C183                           
0C183                               ;; Get ball's x-left, x-center, x-right position
0C183 A5 17                         LDA ball_xpos_hi
0C185 18                            CLC
0C186 69 F0                         ADC #BALL_LEFT_WGA
0C188 85 2F                         STA ball_left
0C18A 18                            CLC
0C18B 69 04                         ADC #BALL_HALF_SIZE
0C18D 85 30                         STA ball_center
0C18F 18                            CLC
0C190 69 04                         ADC #BALL_HALF_SIZE
0C192 85 31                         STA ball_right
0C194                           
0C194                               ;; Get ball's y-top, y-middle, y-bottom position
0C194 A5 19                         LDA ball_ypos_hi
0C196 18                            CLC
0C197 69 D0                         ADC #BALL_TOP_WGA
0C199 85 32                         STA ball_top
0C19B 18                            CLC
0C19C 69 04                         ADC #BALL_HALF_SIZE
0C19E 85 33                         STA ball_middle
0C1A0 18                            CLC
0C1A1 69 04                         ADC #BALL_HALF_SIZE
0C1A3 85 34                         STA ball_bottom
0C1A5                           
0C1A5                           +checkRightCollision:
0C1A5                               ;; Check if ball moves right
0C1A5                               ;; No need to check nudging here as that will never collide with a tile
0C1A5 A5 0F                         LDA buttons_held
0C1A7 29 01                         AND #BUTTON_RIGHT
0C1A9 F0 1C                         BEQ +checkLeftCollision
0C1AB                           
0C1AB                               ;; Check tile at right position
0C1AB A5 33                         LDA ball_middle
0C1AD 85 00                         STA temp
0C1AF A5 31                         LDA ball_right
0C1B1 85 01                         STA temp+1
0C1B3 20 03 C5                      JSR sub_ConvertXYToTileType
0C1B6 29 01                         AND #TILE_IS_SOLID
0C1B8 F0 2C                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1BA                           
0C1BA                               ;; Tile is solid; nudge ball and evaluate tile type
0C1BA A5 36                         LDA ball_flags
0C1BC 29 FD                         AND #NUDGE_BALL_LEFT
0C1BE 20 B2 C7                      JSR sub_InitiateNudge
0C1C1 20 5C C5                      JSR sub_EvaluateTileType
0C1C4 4C E6 C1                      JMP +checkTopCollision
0C1C7                           
0C1C7                           +checkLeftCollision:
0C1C7                               ;; Check if ball moves right
0C1C7                               ;; No need to check nudging here as that will never collide with a tile
0C1C7 A5 0F                         LDA buttons_held
0C1C9 29 02                         AND #BUTTON_LEFT
0C1CB F0 19                         BEQ +checkTopCollision
0C1CD                           
0C1CD                               ;; Check tile at right position
0C1CD A5 33                         LDA ball_middle
0C1CF 85 00                         STA temp
0C1D1 A5 2F                         LDA ball_left
0C1D3 85 01                         STA temp+1
0C1D5 20 03 C5                      JSR sub_ConvertXYToTileType
0C1D8 29 01                         AND #TILE_IS_SOLID
0C1DA F0 0A                         BEQ +checkTopCollision
0C1DC                           
0C1DC                               ;; Tile is solid; nudge ball and evaluate tile type
0C1DC A5 36                         LDA ball_flags
0C1DE 09 02                         ORA #NUDGE_BALL_RIGHT
0C1E0 20 B2 C7                      JSR sub_InitiateNudge
0C1E3 20 5C C5                      JSR sub_EvaluateTileType
0C1E6                               
0C1E6                               
0C1E6                           +checkTopCollision:
0C1E6                               ;; Check if ball moves up
0C1E6 A5 36                         LDA ball_flags
0C1E8 29 10                         AND #BALL_MOVES_DOWN
0C1EA D0 23                         BNE +checkBottomCollision
0C1EC                           
0C1EC                               ;; Check tile at top position
0C1EC A5 32                         LDA ball_top
0C1EE 85 00                         STA temp
0C1F0 A5 30                         LDA ball_center
0C1F2 85 01                         STA temp+1
0C1F4 20 03 C5                      JSR sub_ConvertXYToTileType
0C1F7 29 01                         AND #TILE_IS_SOLID
0C1F9 F0 34                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C1FB                           
0C1FB                               ;; Tile is solid; move ball down and evaluate tile type
0C1FB A5 1C                         LDA ball_ypos_lo_prev
0C1FD 85 1A                         STA ball_ypos_lo
0C1FF A5 1B                         LDA ball_ypos_hi_prev
0C201 85 19                         STA ball_ypos_hi
0C203 A5 36                         LDA ball_flags
0C205 09 10                         ORA #MOVE_BALL_DOWN
0C207 85 36                         STA ball_flags
0C209 20 5C C5                      JSR sub_EvaluateTileType
0C20C 4C 2F C2                      JMP +doneCheckingCollision
0C20F                           
0C20F                           +checkBottomCollision:
0C20F                               ;; No movement check needed: since ball is not moving up, it must move down
0C20F                           
0C20F                               ;; Check tile at bottom position
0C20F A5 34                         LDA ball_bottom
0C211 85 00                         STA temp
0C213 A5 30                         LDA ball_center
0C215 85 01                         STA temp+1
0C217 20 03 C5                      JSR sub_ConvertXYToTileType
0C21A 29 01                         AND #TILE_IS_SOLID
0C21C F0 11                         BEQ +doneCheckingCollision
0C21E                           
0C21E                               ;; Tile is solid; move ball up and evaluate tile type
0C21E A5 1C                         LDA ball_ypos_lo_prev
0C220 85 1A                         STA ball_ypos_lo
0C222 A5 1B                         LDA ball_ypos_hi_prev
0C224 85 19                         STA ball_ypos_hi
0C226 A5 36                         LDA ball_flags
0C228 29 EF                         AND #MOVE_BALL_UP
0C22A 85 36                         STA ball_flags
0C22C 20 5C C5                      JSR sub_EvaluateTileType
0C22F                           
0C22F                           +doneCheckingCollision:
0C22F                           
0C22F                           
0C22F                               ;; Testinging timed PPU scroll concept
0C22F                               .include "game/test/timed_ppuscroll_test.asm"
0C22F                           ;; Timed updates (test)
0C22F                           
0C22F                               ;; If B button is pressed
0C22F A5 10                         LDA buttons_pressed
0C231 29 10                         AND #BUTTON_START
0C233 F0 73                         BEQ +end
0C235                           
0C235                               ;; Disable noise channel
0C235 A9 00                         LDA #$00
0C237 8D 15 40                      STA APU_STATUS
0C23A 8D 0C 40                      STA NOISE_VOLUME
0C23D                               
0C23D                               ;; Set up loop fading
0C23D A9 00                         LDA #$00
0C23F 85 07                         STA temp+7
0C241 A0 08                         LDY #$08
0C243                               -fadeLoop:
0C243 84 08                             STY temp+8
0C245                           
0C245                                   ;; Wait for NMI to pass
0C245 20 EB C3                          JSR sub_WaitForNMI
0C248                                   
0C248                                   ;; Now wait for No-sprite 0
0C248                                   -
0C248 AD 02 20                              LDA PPU_STATUS
0C24B 29 40                                 AND #SPRITE_0_HIT
0C24D D0 F9                             BNE -
0C24F                               
0C24F                                   ;; Now wait for Sprite 0
0C24F                                   -
0C24F AD 02 20                              LDA PPU_STATUS
0C252 29 40                                 AND #SPRITE_0_HIT
0C254 F0 F9                             BEQ -
0C256                                       
0C256                                   ;; Setup tile row loop
0C256 A0 16                             LDY #22
0C258                                   -tileLoop:
0C258                                   
0C258                                       ;; Disable drawing
0C258 A5 12                                 LDA soft_ppu_mask
0C25A 29 F7                                 AND #%11110111
0C25C 8D 01 20                              STA PPU_MASK
0C25F                                       
0C25F                                       ;; Set up scanline loop
0C25F A2 08                                 LDX #$08
0C261                                       -scanlineLoop:
0C261 E4 08                                     CPX temp+8
0C263 D0 0A                                     BNE +wasteTime
0C265                                           
0C265                                           ;; Restore drawing
0C265 A5 12                                     LDA soft_ppu_mask
0C267 09 08                                     ORA #%00001000
0C269 8D 01 20                                  STA PPU_MASK
0C26C 4C 75 C2                                  JMP +wasteMoreTime
0C26F                           
0C26F                                           ;; Waste 12 frames
0C26F                                           +wasteTime:
0C26F E6 09                                     INC temp+9   ;+5
0C271 C6 09                                     DEC temp+9   ;+5
0C273 49 00                                     EOR #$00     ;+2
0C275                                           
0C275                                           ;; Waste about 100 frames
0C275                                           +wasteMoreTime:
0C275                                           
0C275 86 01                                     STX temp+1     ;  3 down, 97 to go
0C277 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C279                                           -wasteLoop:
0C279 EA                                            NOP
0C27A 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C27C CA                                            DEX        ;  5+5L down,  95-5L to go
0C27D D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C27F                           
0C27F A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C281 CA                                        DEX            ;  9+8L down, 91-8L to go
0C282 D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C284                           
0C284 88                                    DEY
0C285 D0 D1                             BNE -tileLoop
0C287                           
0C287 A4 08                             LDY temp+8
0C289                                   
0C289 E6 07                             INC temp+7
0C28B A5 07                             LDA temp+7
0C28D C9 02                             CMP #$02
0C28F D0 B2                             BNE -fadeLoop
0C291                           
0C291 A9 00                             LDA #$00
0C293 85 07                             STA temp+7
0C295 88                                DEY
0C296 D0 AB                         BNE -fadeLoop
0C298                               
0C298                               ;; Load the next level
0C298 E6 3D                         INC current_level
0C29A A5 3D                         LDA current_level
0C29C C9 19                         CMP #25
0C29E D0 04                         BNE +
0C2A0 A9 00                             LDA #$00
0C2A2 85 3D                             STA current_level
0C2A4                               +
0C2A4                               
0C2A4 A9 81                         LDA #LOAD_GAME_SCREEN
0C2A6 85 37                         STA screen_mode
0C2A8                           
0C2A8                           
0C2A8                           +end:
0C2A8                           
0C2A8                           
0C2A8                           +skipBallMovement:
0C2A8                               ;; Add to sprite buffer
0C2A8 A6 3B                         LDX sprite_ram_pointer
0C2AA A5 19                         LDA ball_ypos_hi
0C2AC 9D 00 02                      STA ADDR_SPRITERAM,x
0C2AF E8                            INX
0C2B0 A9 01                         LDA #BALL_TILE_CHR
0C2B2 9D 00 02                      STA ADDR_SPRITERAM,x
0C2B5 E8                            INX
0C2B6 A9 00                         LDA #BALL_ATTR
0C2B8 9D 00 02                      STA ADDR_SPRITERAM,x
0C2BB E8                            INX
0C2BC A5 17                         LDA ball_xpos_hi
0C2BE 9D 00 02                      STA ADDR_SPRITERAM,x
0C2C1 E8                            INX
0C2C2 86 3B                         STX sprite_ram_pointer
0C2C4 4C 13 C3                      JMP +doneScreenLoad
0C2C7                           
0C2C7                           
0C2C7                           +checkNextScreen:
0C2C7                           
0C2C7                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C2C7                               ;; Upon pressing START, the selected level will start
0C2C7                               .include "game/include/main/select_level.asm"
0C2C7 A5 10                         LDA buttons_pressed
0C2C9 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C2CB F0 3C                         BEQ +checkStartPress
0C2CD                           
0C2CD                                   ;; Select next level (1, 5, 9, 13, 17)
0C2CD A5 3D                             LDA current_level
0C2CF 18                                CLC
0C2D0 69 04                             ADC #$04
0C2D2 C9 14                             CMP #$14
0C2D4 D0 02                             BNE +
0C2D6 A9 00                                 LDA #$00
0C2D8                                   +
0C2D8 85 3D                             STA current_level
0C2DA                                   
0C2DA                                   ;; Convert level number to two-byte value
0C2DA A9 00                             LDA #$00
0C2DC 85 03                             STA temp+3
0C2DE A5 3D                             LDA current_level
0C2E0 18                                CLC
0C2E1 69 01                             ADC #$01
0C2E3                           
0C2E3                               -
0C2E3 C9 0A                             CMP #$0A
0C2E5 90 08                             BCC +
0C2E7 E6 03                                 INC temp+3
0C2E9 38                                    SEC
0C2EA E9 0A                                 SBC #$0A
0C2EC 4C E3 C2                              JMP -
0C2EF                                   +
0C2EF                           
0C2EF                                   ;; Add level number to PPU buffer
0C2EF 18                                CLC
0C2F0 69 01                             ADC #$01
0C2F2 85 02                             STA temp+2
0C2F4 A9 20                             LDA #$20
0C2F6 85 00                             STA temp
0C2F8 A9 D0                             LDA #$D0
0C2FA 85 01                             STA temp+1
0C2FC 20 F4 CB                          JSR sub_WriteByteToPPUBuffer
0C2FF                                   
0C2FF C6 01                             DEC temp+1
0C301 A4 03                             LDY temp+3
0C303 C8                                INY
0C304 84 02                             STY temp+2
0C306 20 F4 CB                          JSR sub_WriteByteToPPUBuffer
0C309                                   
0C309                               +checkStartPress:
0C309                           
0C309                           
0C309                           
0C309                               ;; If START button is pressed
0C309 A5 10                         LDA buttons_pressed
0C30B 29 10                         AND #BUTTON_START
0C30D F0 04                         BEQ +
0C30F                                   ;; Start the level
0C30F A9 81                             LDA #LOAD_GAME_SCREEN
0C311 85 37                             STA screen_mode
0C313                               +
0C313                           
0C313                           
0C313                           
0C313                           +doneScreenLoad:
0C313                           
0C313                               ;; Load animations (if any)
0C313                               .include "game/include/main/load_animations.asm"
0C313                               ;; Set up loop
0C313 A2 00                         LDX #$00
0C315                               -loop_load_animation:
0C315                                   ;; Check if current animation is active. If not, goto next
0C315 BD 44 03                          LDA explosion_active,x
0C318 D0 03                             BNE +
0C31A 4C B4 C3                              JMP +next
0C31D                                   +
0C31D                           
0C31D                                   ;; Check the explosion framecounter
0C31D BD 30 03                          LDA explosion_framecounter,x
0C320 D0 26                             BNE +
0C322                                       ;; Framecounter is 0
0C322                                       ;; Reset to animation speed
0C322 A9 04                                 LDA #ANIMATION_SPEED
0C324 9D 30 03                              STA explosion_framecounter,x
0C327                           
0C327                                       ;; Set next animation frame, and check if we're done yet
0C327 FE 34 03                              INC explosion_currentframe,x
0C32A BD 34 03                              LDA explosion_currentframe,x
0C32D C9 0A                                 CMP #ANIM_SLIDES
0C32F D0 17                                 BNE +
0C331                           
0C331                                       ;; If we're done, inactivate current explosion, clean
0C331                                       ;; up sprite RAM and go to the next one
0C331 A9 00                                 LDA #$00
0C333 9D 44 03                              STA explosion_active,x
0C336                                       
0C336 A9 09                                 LDA #SLIDE_SIZE
0C338 0A                                    ASL
0C339 0A                                    ASL
0C33A A8                                    TAY
0C33B A9 EF                                 LDA #$EF
0C33D                                       -
0C33D 88                                        DEY
0C33E 99 00 02                                  STA ADDR_SPRITERAM,y
0C341 C0 00                                     CPY #00
0C343 D0 F8                                 BNE -
0C345                                       
0C345 4C B4 C3                              JMP +next
0C348                                   +
0C348                           
0C348                                   ;; Load (x,y) position in temp variables
0C348 BD 3C 03                          LDA explosion_x,x
0C34B 85 01                             STA temp+1
0C34D 85 03                             STA temp+3
0C34F BD 40 03                          LDA explosion_y,x
0C352 85 02                             STA temp+2
0C354                           
0C354                                   ;; Load attribute in temp variable
0C354 BD 38 03                          LDA explosion_attributes,x
0C357 85 04                             STA temp+4
0C359                           
0C359                                   ;; Load current frame into Y-register
0C359 BC 34 03                          LDY explosion_currentframe,x
0C35C                           
0C35C                                   ;; Load current frame ROM address from table
0C35C B9 48 CD                          LDA explosion_anim_lo,y
0C35F 85 0C                             STA pointer
0C361 B9 3E CD                          LDA explosion_anim_hi,y
0C364 85 0D                             STA pointer+1
0C366                           
0C366                                   ;; Save x-register on stack
0C366 8A                                TXA
0C367 48                                PHA
0C368                           
0C368                                   ;; Load sprites into sprite RAM
0C368 A6 3B                             LDX sprite_ram_pointer
0C36A A0 00                             LDY #$00
0C36C                           
0C36C                                   ;; Prepare (x,y) offset for loop
0C36C 84 00                             STY temp
0C36E                           
0C36E                                   -loop_load_sprite:
0C36E                                   
0C36E                                       ;; Do not draw empty sprites
0C36E B1 0C                                 LDA (pointer),y
0C370 F0 18                                 BEQ +nextSprite
0C372                                   
0C372                                           ;; Add y-position to sprite ram buffer
0C372 A5 02                                     LDA temp+2
0C374 9D 00 02                                  STA ADDR_SPRITERAM,x
0C377 E8                                        INX
0C378                           
0C378                                           ;; Get tile number from frame ROM address, and
0C378                                           ;; add it to sprite ram buffer
0C378 B1 0C                                     LDA (pointer),y
0C37A 9D 00 02                                  STA ADDR_SPRITERAM,x
0C37D E8                                        INX
0C37E                           
0C37E                                           ;; Add attribute data to sprite ram buffer
0C37E A5 04                                     LDA temp+4
0C380 9D 00 02                                  STA ADDR_SPRITERAM,x
0C383 E8                                        INX
0C384                           
0C384                                           ;; Add x-position to sprite ram buffer
0C384 A5 03                                     LDA temp+3
0C386 9D 00 02                                  STA ADDR_SPRITERAM,x
0C389 E8                                        INX
0C38A                           
0C38A                                       +nextSprite:
0C38A                           
0C38A                                       ;; Check if all sprites are done
0C38A C8                                    INY
0C38B C0 09                                 CPY #SLIDE_SIZE
0C38D F0 21                                 BEQ +done
0C38F                           
0C38F                                       ;; Update x value
0C38F A5 03                                 LDA temp+3
0C391 18                                    CLC
0C392 69 08                                 ADC #$08
0C394 85 03                                 STA temp+3
0C396                           
0C396                                       ;; Update temp for x,y position
0C396 E6 00                                 INC temp
0C398 A5 00                                 LDA temp
0C39A C9 03                                 CMP #SLIDE_WIDTH
0C39C D0 0F                                 BNE +
0C39E                                           ;; Row is done; reset x-position
0C39E A5 01                                     LDA temp+1
0C3A0 85 03                                     STA temp+3
0C3A2                           
0C3A2                                           ;; Update y-position
0C3A2 A5 02                                     LDA temp+2
0C3A4 18                                        CLC
0C3A5 69 08                                     ADC #$08
0C3A7 85 02                                     STA temp+2
0C3A9                           
0C3A9                                           ;; Reset row counter
0C3A9 A9 00                                     LDA #$00
0C3AB 85 00                                     STA temp
0C3AD                                       +
0C3AD                           
0C3AD 4C 6E C3                          JMP -loop_load_sprite
0C3B0                           
0C3B0                               +done:
0C3B0 86 3B                             STX sprite_ram_pointer
0C3B2                           
0C3B2                                   ;; Retrieve x-register from stack
0C3B2 68                                PLA
0C3B3 AA                                TAX
0C3B4                           
0C3B4                               +next:
0C3B4                                   ;; Check if all animations have been updated
0C3B4 E8                                INX
0C3B5 E0 04                             CPX #MAX_ANIMATIONS
0C3B7 F0 03                             BEQ +done
0C3B9                           
0C3B9 4C 15 C3                      JMP -loop_load_animation
0C3BC                           +done:
0C3BC                           
0C3BC                               ;; Sprite clean-up
0C3BC A6 3B                         LDX sprite_ram_pointer
0C3BE A9 EF                         LDA #$EF
0C3C0                               -
0C3C0 9D 00 02                          STA ADDR_SPRITERAM,x
0C3C3 E8                                INX
0C3C4 D0 FA                         BNE -
0C3C6 4C 57 C0                      JMP MainGameLoop
0C3C9                           
0C3C9                           ;; Subroutines
0C3C9                           .include "include/subroutines.asm"
0C3C9                           
0C3C9                           ;; RNG
0C3C9                           .include "subroutine/GetRandomNumber.asm"
0C3C9                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3C9                           ;;
0C3C9                           ;; subroutine/GetRandomNumber.asm
0C3C9                           ;;
0C3C9                           ;; Simple and fast random number generator by White Flame.
0C3C9                           ;;
0C3C9                           ;; Set random_seed to an arbitrary number to randomize between
0C3C9                           ;; gaming sessions, for instance using the frame counter upon
0C3C9                           ;; pressing START on the intro screen.
0C3C9                           ;;
0C3C9                           ;;     ;; IF START PRESSED:
0C3C9                           ;;     LDA frame_counter
0C3C9                           ;;     STA random_seed
0C3C9                           ;;
0C3C9                           ;; Source:
0C3C9                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C3C9                           ;;
0C3C9                           ;;
0C3C9                           
0C3C9                           sub_GetRandomNumber:
0C3C9                               ;; Force EOR if random_seed is zero
0C3C9 A5 16                         LDA random_seed
0C3CB F0 05                         BEQ +doEor
0C3CD                           
0C3CD                               ;; Shift left, and EOR if the high bit is set
0C3CD 0A                            ASL
0C3CE F0 04                         BEQ +noEor
0C3D0 90 02                         BCC +noEor
0C3D2                           
0C3D2                           +doEor:
0C3D2 49 1D                         EOR #$1D
0C3D4                           
0C3D4                           +noEor:
0C3D4 85 16                         STA random_seed
0C3D6                           
0C3D6 60                            RTS
0C3D7                           
0C3D7                           
0C3D7                           ;; Read controller input
0C3D7                           .include "subroutine/ReadController.asm"
0C3D7                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3D7                           ;;
0C3D7                           ;; subroutine/ReadController.asm
0C3D7                           ;;
0C3D7                           ;; Subroutine that polls the controller and stores the input
0C3D7                           ;; buttons in a variable. This version only handles controller
0C3D7                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C3D7                           ;;
0C3D7                           ;;
0C3D7                           
0C3D7                           sub_ReadController:
0C3D7                           
0C3D7                               ;; Set strobe bit
0C3D7 A9 01                         LDA #$01
0C3D9 8D 16 40                      STA JOYPAD_1
0C3DC                           
0C3DC                               ;; Set up ring counter
0C3DC 85 0F                         STA buttons_held
0C3DE                           
0C3DE                               ;; Clear strobe bit
0C3DE 4A                            LSR
0C3DF 8D 16 40                      STA JOYPAD_1
0C3E2                           
0C3E2                               ;; Loop through button presses
0C3E2                               -
0C3E2 AD 16 40                          LDA JOYPAD_1
0C3E5 4A                                LSR
0C3E6 26 0F                             ROL buttons_held
0C3E8                           
0C3E8                               ;; Check if ring counter is done
0C3E8 90 F8                         BCC -
0C3EA                           
0C3EA                               ;; Return from subroutine
0C3EA 60                            RTS
0C3EB                           
0C3EB                           
0C3EB                           ;; vBlank/NMI wait
0C3EB                           .include "subroutine/WaitForNMI.asm"
0C3EB                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3EB                           ;;
0C3EB                           ;; subroutine/WaitForVBlank.asm
0C3EB                           ;;
0C3EB                           ;; Subroutine that essentially pauses script execution until
0C3EB                           ;; vBlank happens.
0C3EB                           ;;
0C3EB                           ;;
0C3EB                           
0C3EB                           sub_WaitForNMI:
0C3EB A9 01                         LDA #$01
0C3ED 85 43                         STA check_nmi
0C3EF                               -
0C3EF A5 43                             LDA check_nmi
0C3F1 D0 FC                         BNE -
0C3F3 60                            RTS
0C3F4                           
0C3F4                           .include "subroutine/WaitForVBlank.asm"
0C3F4                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3F4                           ;;
0C3F4                           ;; subroutine/WaitForVBlank.asm
0C3F4                           ;;
0C3F4                           ;; Subroutine that essentially pauses script execution until
0C3F4                           ;; vBlank happens.
0C3F4                           ;;
0C3F4                           ;;
0C3F4                           
0C3F4                           sub_WaitForVBlank:
0C3F4 2C 02 20                      BIT $2002
0C3F7 10 FB                         BPL sub_WaitForVBlank
0C3F9 60                            RTS
0C3FA                           
0C3FA                           
0C3FA                           ;; Game specific subroutines
0C3FA                           .include "game/include/subroutines.asm"
0C3FA                           ;; additional game-specific subroutines go here
0C3FA                           
0C3FA                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C3FA                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3FA                           ;;
0C3FA                           ;;  sub_AddAccumulatorToScore.asm
0C3FA                           ;;
0C3FA                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C3FA                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C3FA                           ;;  actual score.
0C3FA                           ;;
0C3FA                           ;;
0C3FA                           
0C3FA                           
0C3FA                           sub_AddAccumulatorToScore:
0C3FA                           
0C3FA                               ;; Clear old add_to_score
0C3FA A2 05                         LDX #$05
0C3FC A0 00                         LDY #$00
0C3FE                               -
0C3FE 94 26                             STY add_to_score,x
0C400 CA                                DEX
0C401 10 FB                         BPL -
0C403                           
0C403                               ;; Set accumulator to add_to_score variables
0C403                               ;; Check and update 100s
0C403                               -checkHundreds:
0C403 C9 64                             CMP #100
0C405 90 08                             BCC +checkTens
0C407 38                                    SEC
0C408 E9 64                                 SBC #100
0C40A E6 29                                 INC add_to_score+3
0C40C 4C 03 C4                              JMP -checkHundreds
0C40F                                   +checkTens:
0C40F                           
0C40F                               ;; Check and update 10s
0C40F                               -checkTens:
0C40F C9 0A                             CMP #10
0C411 90 08                             BCC +setOnes
0C413 38                                    SEC
0C414 E9 0A                                 SBC #10
0C416 E6 2A                                 INC add_to_score+4
0C418 4C 0F C4                              JMP -checkTens
0C41B                                   +setOnes:
0C41B                           
0C41B                               ;; We're left with 1s
0C41B 85 2B                         STA add_to_score+5
0C41D                           
0C41D                               ;; Byte for byte, add add_to_score to ball_score
0C41D A9 00                         LDA #$00
0C41F 85 38                         STA ppu_buffer_update
0C421 A4 39                         LDY ppu_buffer_pointer
0C423 A2 05                         LDX #$05
0C425                               -
0C425 B5 26                             LDA add_to_score,x
0C427 18                                CLC
0C428 75 20                             ADC ball_score,x
0C42A C9 0A                             CMP #10
0C42C 90 05                             BCC +
0C42E 38                                    SEC
0C42F E9 0A                                 SBC #10
0C431 F6 1F                                 INC ball_score-1,x
0C433                                   +
0C433                                   
0C433                                   ;; Update new score digit
0C433 95 20                             STA ball_score,x
0C435                           
0C435                                   ;; Update score tile in PPU
0C435 A9 20                             LDA #$20
0C437 99 00 03                          STA ppu_buffer,y
0C43A C8                                INY
0C43B 8A                                TXA
0C43C 18                                CLC
0C43D 69 83                             ADC #$83
0C43F 99 00 03                          STA ppu_buffer,y
0C442 C8                                INY
0C443 B5 20                             LDA ball_score,x
0C445 18                                CLC
0C446 69 01                             ADC #$01
0C448 99 00 03                          STA ppu_buffer,y
0C44B C8                                INY
0C44C                           
0C44C                                   ;; Check next digit (if any left)
0C44C CA                                DEX
0C44D 30 03                             BMI +done
0C44F 4C 25 C4                      JMP -
0C452                           
0C452                           +done:
0C452                               ;; Update PPU buffer pointer and status
0C452 84 39                         STY ppu_buffer_pointer
0C454 A9 01                         LDA #$01
0C456 85 38                         STA ppu_buffer_update
0C458                           
0C458                               ;; Done: return 
0C458 60                            RTS
0C459                           
0C459                           .include "game/subroutine/BackgroundNoise.asm"
0C459                           
0C459                           sub_BackgroundNoise:
0C459 A9 32                         LDA #$32
0C45B 8D 0C 40                      STA NOISE_VOLUME
0C45E A9 0E                         LDA #$0E
0C460 8D 0E 40                      STA NOISE_PERIOD
0C463 85 41                         STA current_noise
0C465 60                            RTS0C466                           .include "game/subroutine/ClearScreen.asm"
0C466                           ;; Subroutine to clear the screen
0C466                           ;; If it's a game screen, add noise
0C466                           
0C466                           sub_ClearScreen:
0C466                               ;; Check of game screen or not
0C466 A5 37                         LDA screen_mode
0C468 29 03                         AND #CHECK_SCREEN_MODE
0C46A C9 01                         CMP #IS_GAME_SCREEN
0C46C F0 02                         BEQ +
0C46E A9 00                             LDA #$00
0C470                               +
0C470 85 01                         STA temp+1
0C472                               
0C472                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C472 2C 02 20                      BIT PPU_STATUS
0C475 A9 20                         LDA #$20
0C477 8D 06 20                      STA PPU_ADDR
0C47A A9 00                         LDA #$00
0C47C 8D 06 20                      STA PPU_ADDR
0C47F                               
0C47F                               ;; Set up tile to draw and loop
0C47F 85 00                         STA temp
0C481 AA                            TAX
0C482 A8                            TAY
0C483                           
0C483                               -     
0C483                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C483 A5 00                             LDA temp
0C485 8D 07 20                          STA PPU_DATA
0C488                           
0C488                                   ;; Check if we should draw noise next. Noise is drawn if:
0C488                                   ;; - Screen mode is game screen
0C488                                   ;; - Y between #$06 and #$19 (inclusive)
0C488                                   ;; - X between #$02 and #$1D (inclusive)
0C488                                   
0C488                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C488 A5 01                             LDA temp+1
0C48A F0 1C                             BEQ +nextTileInRow
0C48C                                   
0C48C                                   ;; If Y < $6, skip the check
0C48C C0 06                             CPY #$06
0C48E 90 18                             BCC +nextTileInRow
0C490                                   
0C490                                   ;; If X < $1, skip the check
0C490 E0 01                             CPX #$01
0C492 90 14                             BCC +nextTileInRow
0C494                                   
0C494                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C494 E0 1D                             CPX #$1D
0C496 D0 04                             BNE +
0C498 A9 00                                 LDA #$00
0C49A 85 00                                 STA temp
0C49C                                   +
0C49C B0 0A                             BCS +nextTileInRow
0C49E                                   
0C49E                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C49E 20 C9 C3                          JSR sub_GetRandomNumber
0C4A1 29 07                             AND #%00000111
0C4A3 18                                CLC
0C4A4 69 68                             ADC #$68
0C4A6 85 00                             STA temp
0C4A8                           
0C4A8                           +nextTileInRow:
0C4A8                                   
0C4A8                                   ;; Check if a row has been done. If not, draw the next
0C4A8 E8                                INX
0C4A9 E0 20                             CPX #$20
0C4AB D0 D6                             BNE -
0C4AD                                   
0C4AD                                   ;; Go to the next row (if any left)
0C4AD A2 00                             LDX #00
0C4AF C8                                INY
0C4B0                                   
0C4B0                                   ;; If Y is 1A, skip noise tile check until done drawing
0C4B0 C0 1A                             CPY #$1A
0C4B2 D0 04                             BNE +
0C4B4 A9 00                                 LDA #$00
0C4B6 85 01                                 STA temp+1
0C4B8                                   +
0C4B8                                   
0C4B8 C0 1E                             CPY #$1E
0C4BA D0 C7                         BNE -
0C4BC                           
0C4BC                               ;; Clear attribute table
0C4BC A9 23                         LDA #$23
0C4BE 8D 06 20                      STA PPU_ADDR
0C4C1 A9 C0                         LDA #$C0
0C4C3 8D 06 20                      STA PPU_ADDR
0C4C6 A9 00                         LDA #$00
0C4C8 A2 40                         LDX #$40
0C4CA                               -
0C4CA 8D 07 20                          STA PPU_DATA
0C4CD CA                                DEX
0C4CE D0 FA                         BNE -
0C4D0                               
0C4D0 60                            RTS0C4D1                           .include "game/subroutine/ColorizeBall.asm"
0C4D1                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4D1                           ;;
0C4D1                           ;;  Subroutine: ColorizeBall
0C4D1                           ;;
0C4D1                           ;;  Applies the color set through ball_flags to the ball sprite.
0C4D1                           ;;
0C4D1                           ;;
0C4D1                           
0C4D1                           
0C4D1                           sub_ColorizeBall:
0C4D1                           
0C4D1                               ;; Get color from ball_flags
0C4D1 4A                            LSR
0C4D2 4A                            LSR
0C4D3 4A                            LSR
0C4D4 4A                            LSR
0C4D5 4A                            LSR
0C4D6 AA                            TAX
0C4D7                           
0C4D7                               ;; Add new light color of ball to PPU palette
0C4D7 A9 3F                         LDA #$3F
0C4D9 85 00                         STA temp
0C4DB A9 11                         LDA #$11
0C4DD 85 01                         STA temp+1
0C4DF BD 58 CD                      LDA tbl_BallColorLight,x
0C4E2 85 02                         STA temp+2
0C4E4 20 F4 CB                      JSR sub_WriteByteToPPUBuffer
0C4E7                               
0C4E7                               ;; Add new dark color of ball to PPU palette
0C4E7 E6 01                         INC temp+1
0C4E9 BD 52 CD                      LDA tbl_BallColorDark,x
0C4EC 85 02                         STA temp+2
0C4EE 20 F4 CB                      JSR sub_WriteByteToPPUBuffer
0C4F1                               
0C4F1 60                            RTS
0C4F2                           
0C4F2                           .include "game/subroutine/ColorsMatch.asm"
0C4F2                           
0C4F2                           ;; Subroutine to check if ball color matches colliding tile color
0C4F2                           
0C4F2                           sub_ColorsMatch:
0C4F2                               ;; Save tile color in temp variable
0C4F2 A5 3E                         LDA colliding_tile
0C4F4 29 0E                         AND #%00001110
0C4F6 85 00                         STA temp
0C4F8                           
0C4F8                               ;; Get ball color
0C4F8 A5 36                         LDA ball_flags
0C4FA 29 E0                         AND #%11100000
0C4FC 4A                            LSR
0C4FD 4A                            LSR
0C4FE 4A                            LSR
0C4FF 4A                            LSR
0C500                           
0C500                               ;; Compare with tile color
0C500 C5 00                         CMP temp
0C502 60                            RTS
0C503                           
0C503                           .include "game/subroutine/ConvertXYToTileType.asm"
0C503                           
0C503                           ;; Subroutine to convert the ball's position to a tile type
0C503                           ;; - Expects temp to be y-position of ball within game area
0C503                           ;; - Expects temp+1 to be x-position of ball within game area
0C503                           ;; - Puts result in accumulator and zp variable
0C503                           ;; - Corrupts X-register
0C503                           
0C503                           sub_ConvertXYToTileType:
0C503 A5 01                         LDA temp+1
0C505 4A                            LSR
0C506 4A                            LSR
0C507 4A                            LSR
0C508 4A                            LSR
0C509 85 09                         STA temp+9
0C50B A5 00                         LDA temp
0C50D 29 F0                         AND #%11110000
0C50F 18                            CLC
0C510 65 09                         ADC temp+9
0C512 85 09                         STA temp+9
0C514 AA                            TAX
0C515 BD 00 04                      LDA tile_type, x
0C518 85 3E                         STA colliding_tile
0C51A 60                            RTS
0C51B                           
0C51B                           .include "game/subroutine/DisableEnableRendering.asm"
0C51B                           sub_DisableRendering:
0C51B                               ;; Force NMI skip, disable rendering
0C51B A9 01                     	LDA #$01
0C51D 85 14                     	STA force_skip_nmi
0C51F 20 F4 C3                      JSR sub_WaitForVBlank
0C522 A5 12                         LDA soft_ppu_mask
0C524 29 E7                         AND #%11100111
0C526 8D 01 20                      STA PPU_MASK
0C529 85 12                         STA soft_ppu_mask
0C52B 20 F4 C3                      JSR sub_WaitForVBlank
0C52E 60                            RTS
0C52F                           
0C52F                           sub_EnableRendering:
0C52F                               ;; Enable rendering
0C52F A9 00                     	LDA #$00
0C531 8D 05 20                  	STA PPU_SCROLL
0C534 8D 05 20                  	STA PPU_SCROLL
0C537 20 F4 C3                      JSR sub_WaitForVBlank
0C53A 85 14                     	STA force_skip_nmi
0C53C A5 12                         LDA soft_ppu_mask
0C53E 09 18                         ORA #%00011000
0C540 85 12                         STA soft_ppu_mask
0C542 8D 01 20                      STA PPU_MASK
0C545 20 F4 C3                      JSR sub_WaitForVBlank
0C548 60                            RTS
0C549                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C549                           sub_drawIntroScreenLogoTile:
0C549 B9 3A CC                      LDA tbl_IntroScreenLogoChr,y
0C54C C9 60                         CMP #$60
0C54E D0 08                         BNE +
0C550 20 C9 C3                          JSR sub_GetRandomNumber
0C553 29 07                             AND #$07
0C555 18                                CLC
0C556 69 60                             ADC #$60
0C558                               +
0C558 8D 07 20                      STA PPU_DATA
0C55B 60                            RTS
0C55C                           .include "game/subroutine/EvaluateTileType.asm"
0C55C                           
0C55C                           ;; Subroutine to evaluate the colliding tile type and take its
0C55C                           ;; corresponding action (move block, kill player, ...)
0C55C                           ;; - Expects X-register to be the tile_type offset
0C55C                           ;; - Uses zp variable colliding_tile
0C55C                           
0C55C                           sub_EvaluateTileType:
0C55C                           
0C55C                               ;; Check if collided tile is a color block
0C55C A5 3E                         LDA colliding_tile
0C55E 29 80                         AND #IS_COLOR_BLOCK
0C560 D0 03                         BNE +
0C562 4C 7D C7                          JMP +checkIfPaintBlock
0C565                               +
0C565                               
0C565                               ;; It's a color block. Check if the colors match
0C565 20 F2 C4                      JSR sub_ColorsMatch
0C568 F0 01                         BEQ +
0C56A                                   ;; Colors don't match - return
0C56A 60                                RTS
0C56B                               +
0C56B                           
0C56B                               ;; Colors match. Destroy color block
0C56B A4 39                         LDY ppu_buffer_pointer
0C56D                               
0C56D                               ;; (this will be a subroutine)
0C56D                               ;; Get PPU address from YX index
0C56D                               ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C56D                               ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C56D 8A                            TXA
0C56E 29 C0                         AND #%11000000
0C570 18                            CLC
0C571 2A                            ROL
0C572 2A                            ROL
0C573 2A                            ROL
0C574 69 20                         ADC #$20
0C576 85 00                         STA temp
0C578 8A                            TXA
0C579 29 0F                         AND #%00001111
0C57B 0A                            ASL
0C57C 85 01                         STA temp+1
0C57E 8A                            TXA
0C57F 29 30                         AND #%00110000
0C581 0A                            ASL
0C582 0A                            ASL
0C583 18                            CLC
0C584 65 01                         ADC temp+1
0C586 85 01                         STA temp+1
0C588 A5 00                         LDA temp
0C58A 69 00                         ADC #$00
0C58C 85 00                         STA temp
0C58E A5 01                         LDA temp+1
0C590 18                            CLC
0C591 69 C2                         ADC #$C2
0C593 85 01                         STA temp+1
0C595 A5 00                         LDA temp
0C597 69 00                         ADC #$00
0C599 85 00                         STA temp
0C59B                           
0C59B                               
0C59B                               ;; (this will also be a subroutine eventually)
0C59B                               ;; TILE 1: if metatile on top left is solid, draw
0C59B                               ;; null tile, else draw random noise tile
0C59B A9 00                         LDA #$00
0C59D 85 38                         STA ppu_buffer_update
0C59F                               
0C59F A5 00                         LDA temp
0C5A1 99 00 03                      STA ppu_buffer,y
0C5A4 C8                            INY
0C5A5 A5 01                         LDA temp+1
0C5A7 99 00 03                      STA ppu_buffer,y
0C5AA C8                            INY
0C5AB                               
0C5AB 8A                            TXA
0C5AC 29 0F                         AND #%00001111
0C5AE F0 11                         BEQ +drawRandomTile
0C5B0                           
0C5B0 8A                            TXA
0C5B1 29 F0                         AND #%11110000
0C5B3 F0 0C                         BEQ +drawRandomTile
0C5B5                           
0C5B5 BD EF 03                      LDA tile_type-17,x
0C5B8 29 01                         AND #%00000001
0C5BA F0 05                         BEQ +drawRandomTile  
0C5BC                           
0C5BC                               ;; Draw a null tile
0C5BC A9 00                         LDA #$00
0C5BE 4C C9 C5                      JMP +addToPPUBuffer
0C5C1                               
0C5C1                           +drawRandomTile:
0C5C1                               ;; Draw a random tile
0C5C1 20 C9 C3                      JSR sub_GetRandomNumber
0C5C4 29 07                         AND #%00000111
0C5C6 18                            CLC
0C5C7 69 68                         ADC #$68
0C5C9                               
0C5C9                               ;; Add tile to ppu buffer
0C5C9                           +addToPPUBuffer:
0C5C9 99 00 03                      STA ppu_buffer,y
0C5CC C8                            INY
0C5CD                           
0C5CD                               ;; TILE 2: If metatile above is solid, draw null,
0C5CD                               ;; else draw random noise.
0C5CD E6 01                         INC temp+1
0C5CF A5 00                         LDA temp
0C5D1 99 00 03                      STA ppu_buffer,y
0C5D4 C8                            INY
0C5D5 A5 01                         LDA temp+1
0C5D7 99 00 03                      STA ppu_buffer,y
0C5DA C8                            INY
0C5DB                               
0C5DB 8A                            TXA
0C5DC 29 F0                         AND #%11110000
0C5DE F0 0C                         BEQ +drawRandomTile
0C5E0                               
0C5E0 BD F0 03                      LDA tile_type-16,x
0C5E3 29 01                         AND #%00000001
0C5E5 F0 05                         BEQ +drawRandomTile
0C5E7                               
0C5E7 A9 00                         LDA #%00
0C5E9 4C F4 C5                      JMP +addToPPUBuffer
0C5EC                           
0C5EC                           +drawRandomTile:
0C5EC 20 C9 C3                      JSR sub_GetRandomNumber
0C5EF 29 07                         AND #%00000111
0C5F1 18                            CLC
0C5F2 69 68                         ADC #$68
0C5F4                           
0C5F4                           +addToPPUBuffer:
0C5F4 99 00 03                      STA ppu_buffer,y
0C5F7 C8                            INY
0C5F8                               
0C5F8                               ;; TILE 3 - If metatile left is solid, draw null,
0C5F8                               ;; else draw random noise.
0C5F8 A5 01                         LDA temp+1
0C5FA 18                            CLC
0C5FB 69 1F                         ADC #$1F
0C5FD 85 01                         STA temp+1
0C5FF A5 00                         LDA temp
0C601 69 00                         ADC #$00
0C603 85 00                         STA temp
0C605 99 00 03                      STA ppu_buffer,y
0C608 C8                            INY
0C609 A5 01                         LDA temp+1
0C60B 99 00 03                      STA ppu_buffer,y
0C60E C8                            INY
0C60F                               
0C60F 8A                            TXA
0C610 29 0F                         AND #%00001111
0C612 F0 0C                         BEQ +drawRandomTile
0C614                               
0C614 BD FF 03                      LDA tile_type-1,x
0C617 29 01                         AND #%00000001
0C619 F0 05                         BEQ +drawRandomTile
0C61B                               
0C61B A9 00                         LDA #%00
0C61D 4C 28 C6                      JMP +addToPPUBuffer
0C620                           
0C620                           +drawRandomTile:
0C620 20 C9 C3                      JSR sub_GetRandomNumber
0C623 29 07                         AND #%00000111
0C625 18                            CLC
0C626 69 68                         ADC #$68
0C628                               
0C628                           +addToPPUBuffer:
0C628 99 00 03                      STA ppu_buffer,y
0C62B C8                            INY
0C62C                               
0C62C                               ;; TILE 4 - Always random noise
0C62C E6 01                         INC temp+1
0C62E A5 00                         LDA temp
0C630 99 00 03                      STA ppu_buffer,y
0C633 C8                            INY
0C634 A5 01                         LDA temp+1
0C636 99 00 03                      STA ppu_buffer,y
0C639 C8                            INY
0C63A 20 C9 C3                      JSR sub_GetRandomNumber
0C63D 29 07                         AND #%00000111
0C63F 18                            CLC
0C640 69 68                         ADC #$68
0C642 99 00 03                      STA ppu_buffer,y
0C645 C8                            INY
0C646                           
0C646                               ;; TILE 5 - If tile on the right is solid, skip,
0C646                               ;; else draw random noise tile
0C646 E6 01                         INC temp+1
0C648                               
0C648 8A                            TXA
0C649 29 0F                         AND #%00001111
0C64B C9 0D                         CMP #$0D
0C64D F0 1F                         BEQ +skipTile
0C64F                               
0C64F BD 01 04                      LDA tile_type+1,x
0C652 29 01                         AND #%00000001
0C654 D0 18                         BNE +skipTile
0C656 A5 00                             LDA temp
0C658 99 00 03                          STA ppu_buffer,y
0C65B C8                                INY
0C65C A5 01                             LDA temp+1
0C65E 99 00 03                          STA ppu_buffer,y
0C661 C8                                INY
0C662 20 C9 C3                          JSR sub_GetRandomNumber
0C665 29 07                             AND #%00000111
0C667 18                                CLC
0C668 69 68                             ADC #$68
0C66A 99 00 03                          STA ppu_buffer,y
0C66D C8                                INY    
0C66E                               +skipTile:
0C66E                           
0C66E                               ;; TILE 6 - If tile on bottom is solid, skip,
0C66E                               ;; else draw random noise
0C66E A5 01                         LDA temp+1
0C670 18                            CLC
0C671 69 1F                         ADC #$1F
0C673 85 01                         STA temp+1
0C675 A5 00                         LDA temp
0C677 69 00                         ADC #$00
0C679 85 00                         STA temp
0C67B                           
0C67B 8A                            TXA
0C67C 29 F0                         AND #%11110000
0C67E C9 90                         CMP #$90
0C680 F0 1F                         BEQ +skipTile
0C682                           
0C682 BD 10 04                      LDA tile_type+16,x
0C685 29 01                         AND #%00000001
0C687 D0 18                         BNE +skipTile
0C689 A5 00                             LDA temp
0C68B 99 00 03                          STA ppu_buffer,y
0C68E C8                                INY
0C68F A5 01                             LDA temp+1
0C691 99 00 03                          STA ppu_buffer,y
0C694 C8                                INY
0C695 20 C9 C3                          JSR sub_GetRandomNumber
0C698 29 07                             AND #%00000111
0C69A 18                                CLC
0C69B 69 68                             ADC #$68
0C69D 99 00 03                          STA ppu_buffer,y
0C6A0 C8                                INY    
0C6A1                               +skipTile:
0C6A1                               
0C6A1                               ;; TILE 7 - If tile on bottom right is solid, skip,
0C6A1                               ;; else draw random noise
0C6A1 E6 01                         INC temp+1
0C6A3                           
0C6A3 8A                            TXA
0C6A4 29 F0                         AND #%11110000
0C6A6 C9 90                         CMP #$90
0C6A8 F0 26                         BEQ +skipTile
0C6AA                               
0C6AA 8A                            TXA
0C6AB 29 0F                         AND #%00001111
0C6AD C9 0D                         CMP #$0D
0C6AF F0 1F                         BEQ +skipTile
0C6B1                               
0C6B1 BD 11 04                      LDA tile_type+17,x
0C6B4 29 01                         AND #%00000001
0C6B6 D0 18                         BNE +skipTile
0C6B8 A5 00                             LDA temp
0C6BA 99 00 03                          STA ppu_buffer,y
0C6BD C8                                INY
0C6BE A5 01                             LDA temp+1
0C6C0 99 00 03                          STA ppu_buffer,y
0C6C3 C8                                INY
0C6C4 20 C9 C3                          JSR sub_GetRandomNumber
0C6C7 29 07                             AND #%00000111
0C6C9 18                                CLC
0C6CA 69 68                             ADC #$68
0C6CC 99 00 03                          STA ppu_buffer,y
0C6CF C8                                INY    
0C6D0                               +skipTile:   
0C6D0                           
0C6D0                           
0C6D0                               ;; - Update attribute table accordingly through ppu buffer
0C6D0 A9 23                         LDA #$23
0C6D2 99 00 03                      STA ppu_buffer,y
0C6D5 C8                            INY
0C6D6                               
0C6D6 8A                            TXA
0C6D7 29 F0                         AND #%11110000
0C6D9 4A                            LSR
0C6DA 4A                            LSR
0C6DB 4A                            LSR
0C6DC 4A                            LSR
0C6DD 18                            CLC
0C6DE 69 01                         ADC #1
0C6E0 4A                            LSR
0C6E1 0A                            ASL
0C6E2 0A                            ASL
0C6E3 0A                            ASL
0C6E4 18                            CLC
0C6E5 69 C8                         ADC #$C8
0C6E7 85 00                         STA temp
0C6E9 8A                            TXA
0C6EA 29 0F                         AND #%00001111
0C6EC 18                            CLC
0C6ED 69 01                         ADC #$01
0C6EF 4A                            LSR
0C6F0 18                            CLC
0C6F1 65 00                         ADC temp
0C6F3 85 00                         STA temp
0C6F5 99 00 03                      STA ppu_buffer,y
0C6F8 C8                            INY
0C6F9                                  
0C6F9 8A                            TXA
0C6FA 29 10                         AND #%00010000
0C6FC F0 05                         BEQ +
0C6FE A9 F0                             LDA #%11110000
0C700 4C 05 C7                          JMP ++
0C703                               +
0C703 A9 0F                         LDA #%00001111
0C705                               ++
0C705 85 02                         STA temp+2
0C707                               
0C707 8A                            TXA
0C708 48                            PHA
0C709 29 01                         AND #%00000001
0C70B F0 07                         BEQ +
0C70D A5 02                             LDA temp+2
0C70F 09 CC                             ORA #%11001100
0C711 4C 18 C7                          JMP ++
0C714                               +
0C714 A5 02                         LDA temp+2
0C716 09 33                         ORA #%00110011
0C718                               ++
0C718 85 02                         STA temp+2
0C71A                               
0C71A A5 00                         LDA temp
0C71C 38                            SEC
0C71D E9 C0                         SBC #$C0
0C71F AA                            TAX
0C720 BD A0 04                      LDA tile_attributes,x
0C723 25 02                         AND temp+2
0C725 9D A0 04                      STA tile_attributes,x
0C728 99 00 03                      STA ppu_buffer,y
0C72B C8                            INY
0C72C 68                            PLA
0C72D AA                            TAX
0C72E                           
0C72E                               ;; Tell PPU to update tiles and attributes next frame
0C72E 84 39                         STY ppu_buffer_pointer
0C730 A9 01                         LDA #$01
0C732 85 38                         STA ppu_buffer_update
0C734                            
0C734                               
0C734                               ;; - Load destruction animation on tile
0C734                               ;; Get most recent slot for explosion    
0C734 8A                            TXA
0C735 85 02                         STA temp+2
0C737 A6 3A                         LDX explosion_pointer
0C739                           
0C739                               ;; If 0, use max pointer value
0C739 D0 02                         BNE +
0C73B A2 04                             LDX #MAX_ANIMATIONS
0C73D                               +
0C73D                           
0C73D                               ;; Decrease pointer by one
0C73D CA                            DEX
0C73E 86 3A                         STX explosion_pointer
0C740                           
0C740                               ;; Load explosion data into RAM
0C740 A9 00                         LDA #$00
0C742 9D 34 03                      STA explosion_currentframe,x
0C745                           
0C745 A9 04                         LDA #ANIMATION_SPEED
0C747 9D 30 03                      STA explosion_framecounter,x
0C74A                           
0C74A A5 02                         LDA temp+2
0C74C 29 0F                         AND #%00001111
0C74E A8                            TAY
0C74F B9 A7 D4                      LDA tbl_Times16,y
0C752 18                            CLC
0C753 69 0E                         ADC #$0E
0C755 9D 3C 03                      STA explosion_x,x
0C758                           
0C758 A5 02                         LDA temp+2
0C75A 29 F0                         AND #%11110000
0C75C 18                            CLC
0C75D 69 29                         ADC #$29
0C75F 9D 40 03                      STA explosion_y,x
0C762                           
0C762 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C764 9D 38 03                      STA explosion_attributes,x
0C767 A9 01                         LDA #$01
0C769 9D 44 03                      STA explosion_active,x
0C76C                           
0C76C A5 02                         LDA temp+2
0C76E AA                            TAX
0C76F                               
0C76F                               
0C76F                               ;; - Write #$00 in tile type ram (makes not-solid)
0C76F A9 00                         LDA #$00
0C771 9D 00 04                      STA tile_type, x
0C774                           
0C774                           
0C774                               ;; Add (80 + level number) to score
0C774 A5 3D                         LDA current_level
0C776 18                            CLC
0C777 69 51                         ADC #81
0C779 20 FA C3                      JSR sub_AddAccumulatorToScore
0C77C                           
0C77C                           
0C77C                               ;; - If there are no color blocks left:
0C77C                               ;;   - Freeze ball
0C77C                               ;;   - Initiate level-win state
0C77C                               ;; [@TODO]
0C77C                               
0C77C 60                            RTS
0C77D                           
0C77D                           +checkIfPaintBlock:
0C77D                           
0C77D                           
0C77D                               ;; Check if collided tile is a paint block
0C77D A5 3E                         LDA colliding_tile
0C77F 29 20                         AND #IS_PAINT_BLOCK
0C781 F0 1A                         BEQ +checkIfDeathBlock
0C783                                   ;; It's a paint block. Update ball color
0C783                                   ;; Save x-register
0C783 8A                                TXA
0C784 48                                PHA
0C785                           
0C785                                   ;; Get tile color
0C785 A5 3E                             LDA colliding_tile
0C787 29 0E                             AND #%00001110
0C789 0A                                ASL
0C78A 0A                                ASL
0C78B 0A                                ASL
0C78C 0A                                ASL
0C78D 85 00                             STA temp
0C78F                           
0C78F                                   ;; Apply tile color to ball
0C78F A5 36                             LDA ball_flags
0C791 29 1F                             AND #%00011111
0C793 05 00                             ORA temp
0C795 85 36                             STA ball_flags
0C797 20 D1 C4                          JSR sub_ColorizeBall
0C79A                           
0C79A                                   ;; Restore x-register
0C79A 68                                PLA
0C79B AA                                TAX
0C79C                           
0C79C                                   ;; Return
0C79C 60                                RTS
0C79D                               +checkIfDeathBlock:
0C79D                           
0C79D                               ;; Check if collided tile is a death block
0C79D A5 3E                         LDA colliding_tile
0C79F 29 10                         AND #IS_DEATH_BLOCK
0C7A1 F0 01                         BEQ +checkIfMoveBlock
0C7A3                                   ;; It is a death block. Kill player and return (@TODO)
0C7A3                           ;        LDA ball_flags
0C7A3                           ;        ORA #%00000101
0C7A3                           ;        STA ball_flags
0C7A3 60                                RTS
0C7A4                               +checkIfMoveBlock:
0C7A4                           
0C7A4                               ;; Check if collided tile is a move block
0C7A4 A5 3E                         LDA colliding_tile
0C7A6 29 40                         AND #IS_MOVE_BLOCK
0C7A8 F0 07                         BEQ +done
0C7AA                                   ;; It is a move block. Check if colors match
0C7AA 20 F2 C4                          JSR sub_ColorsMatch
0C7AD F0 01                             BEQ +
0C7AF                                       ;; Colors don't match - return
0C7AF 60                                    RTS
0C7B0                                   +
0C7B0                           
0C7B0                                   ;; Colors match.
0C7B0                                   ;; - Check if next tile is a solid
0C7B0                                   ;; - If not, move the tile:
0C7B0                                   ;;   - Add the tiles that need updating to ppu buffer
0C7B0                                   ;;   - Add move tile sprite over the original tile
0C7B0                                   ;;   - Initiate moving the sprite that way for 16px
0C7B0                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C7B0                                   ;;   - Update attribute table accordingly through ppu buffer
0C7B0                                   ;; - After moving the sprite, in a different routine:
0C7B0                                   ;;   - Add move tile data on the new tile location
0C7B0                                   ;;   - Write the original tile type data on new position in ram
0C7B0                                   ;;   - Destroy sprite
0C7B0                                   ;;   - Update attribute table accordingly through ppu buffer
0C7B0                                   ;; (@TODO)
0C7B0 60                                RTS
0C7B1                               +done:
0C7B1                           
0C7B1                               ;; Return
0C7B1 60                            RTS
0C7B2                           
0C7B2                           .include "game/subroutine/InitiateNudge.asm"
0C7B2                           
0C7B2                           sub_InitiateNudge:
0C7B2 85 36                         STA ball_flags
0C7B4 A9 05                         LDA #NUDGE_FRAMES
0C7B6 85 3C                         STA nudge_counter
0C7B8 60                            RTS
0C7B9                           
0C7B9                           .include "game/subroutine/JumpToPointer.asm"
0C7B9                           sub_JumpToPointer:
0C7B9 6C 0C 00                      JMP (pointer)
0C7BC                               ;RTS must be handled by the routine (pointer) jumps to
0C7BC                           .include "game/subroutine/LoadGameScreen.asm"
0C7BC                           sub_LoadGameScreen:
0C7BC                           
0C7BC                               ;; Clear the screen
0C7BC 20 66 C4                      JSR sub_ClearScreen
0C7BF                               
0C7BF                               ;; Clear collision and attribute data
0C7BF A2 00                         LDX #$00
0C7C1 8A                            TXA
0C7C2                               -
0C7C2 9D 00 04                          STA tile_type,x
0C7C5 E8                                INX
0C7C6 D0 FA                         BNE -
0C7C8                               
0C7C8                               ;; Get pointer from current level
0C7C8 A6 3D                         LDX current_level
0C7CA BD 5C D4                      LDA tbl_lvl_layout_lo,x
0C7CD 85 0C                         STA pointer
0C7CF BD 43 D4                      LDA tbl_lvl_layout_hi,x
0C7D2 85 0D                         STA pointer+1
0C7D4                           
0C7D4                               ;; Set up the loop
0C7D4 A0 00                         LDY #$00
0C7D6                           -drawRowColumnLoop:
0C7D6                           
0C7D6                               ;; Load (x,y) of current set of tiles
0C7D6 B1 0C                         LDA (pointer),y
0C7D8                           
0C7D8                               ;; Check if level is done; if so, skip the loop
0C7D8 C9 FF                         CMP #LEVEL_END
0C7DA D0 03                         BNE +
0C7DC 4C 25 C9                          JMP +doneLevelLoad
0C7DF                               +
0C7DF                           
0C7DF                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C7DF 85 00                         STA temp
0C7E1 C8                            INY
0C7E2 B1 0C                         LDA (pointer),y
0C7E4 85 01                         STA temp+1
0C7E6                               
0C7E6                               ;; Convert (x,y) to PPU address
0C7E6                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C7E6 A5 00                         LDA temp
0C7E8 29 0F                         AND #%00001111
0C7EA 4A                            LSR
0C7EB 4A                            LSR
0C7EC 09 20                         ORA #$20
0C7EE 85 02                         STA temp+2
0C7F0                               
0C7F0                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C7F0 A5 00                         LDA temp
0C7F2 29 F0                         AND #%11110000
0C7F4 4A                            LSR
0C7F5 4A                            LSR
0C7F6 4A                            LSR
0C7F7 85 03                         STA temp+3
0C7F9                               
0C7F9 A5 00                         LDA temp
0C7FB 29 03                         AND #%00000011
0C7FD AA                            TAX
0C7FE BD B7 D4                      LDA tbl_Times64,x
0C801 18                            CLC
0C802 65 03                         ADC temp+3
0C804 18                            CLC
0C805 69 C2                         ADC #$C2
0C807 85 03                         STA temp+3
0C809                               
0C809                               ;; Add carry to temp+2
0C809 A5 02                         LDA temp+2
0C80B 69 00                         ADC #$00
0C80D 85 02                         STA temp+2
0C80F                           
0C80F                               ;; Convert tile data to loop count and tile type
0C80F                               ;; temp+4 = color
0C80F A5 01                         LDA temp+1
0C811 29 07                         AND #%00000111
0C813 85 04                         STA temp+4
0C815                               
0C815                               ;; If color = 7, this is a wall
0C815 C9 07                         CMP #%00000111
0C817 F0 12                         BEQ +wallHack
0C819                                   
0C819                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C819 29 01                             AND #%00000001
0C81B F0 02                             BEQ +
0C81D A9 05                                 LDA #$05
0C81F                                   +
0C81F 85 07                             STA temp+7
0C821                                
0C821                                   ;; temp+5 = tile type
0C821 A5 01                             LDA temp+1
0C823 4A                                LSR
0C824 4A                                LSR
0C825 4A                                LSR
0C826 29 03                             AND #%00000011
0C828 4C 31 C8                          JMP +setTileType
0C82B                               +wallHack:
0C82B                               
0C82B                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C82B A9 00                         LDA #$00
0C82D 85 07                         STA temp+7
0C82F A9 04                         LDA #$04
0C831                           
0C831                           +setTileType:    
0C831 85 05                         STA temp+5
0C833                               
0C833                               ;; X = tile offset
0C833 18                            CLC
0C834 65 07                         ADC temp+7
0C836 AA                            TAX
0C837                               
0C837                               ;; temp+6 = number of tiles
0C837 A5 01                         LDA temp+1
0C839 29 60                         AND #%01100000
0C83B 4A                            LSR
0C83C 4A                            LSR
0C83D 4A                            LSR
0C83E 4A                            LSR
0C83F 4A                            LSR
0C840 85 06                         STA temp+6
0C842                               
0C842                               ;; Translate (x,y) to (y,x) for tile RAM
0C842 A5 00                         LDA temp
0C844 0A                            ASL
0C845 0A                            ASL
0C846 0A                            ASL
0C847 0A                            ASL
0C848 85 08                         STA temp+8
0C84A A5 00                         LDA temp
0C84C 4A                            LSR
0C84D 4A                            LSR
0C84E 4A                            LSR
0C84F 4A                            LSR
0C850 05 08                         ORA temp+8
0C852 85 00                         STA temp
0C854                               
0C854                               ;; Set up loop
0C854 98                            TYA
0C855 48                            PHA
0C856 A4 06                         LDY temp+6
0C858                           
0C858                               -drawTileLoop:
0C858                                   ;; Write PPU address
0C858 2C 02 20                          BIT PPU_STATUS
0C85B A5 02                             LDA temp+2
0C85D 8D 06 20                          STA PPU_ADDR
0C860 A5 03                             LDA temp+3
0C862 8D 06 20                          STA PPU_ADDR
0C865                                   
0C865                                   ;; Write first and second tile
0C865 BD BB D4                          LDA tbl_GametileTopLeft,x
0C868 8D 07 20                          STA PPU_DATA
0C86B BD C5 D4                          LDA tbl_GametileTopRight,x
0C86E 8D 07 20                          STA PPU_DATA
0C871                                   
0C871                                   ;; Update PPU address
0C871 2C 02 20                          BIT PPU_STATUS
0C874 A5 02                             LDA temp+2
0C876 8D 06 20                          STA PPU_ADDR
0C879 A5 03                             LDA temp+3
0C87B 18                                CLC
0C87C 69 20                             ADC #$20
0C87E 8D 06 20                          STA PPU_ADDR
0C881                                   
0C881                                   ;; Write third and fourth tile
0C881 BD CF D4                          LDA tbl_GametileBottomLeft,x
0C884 8D 07 20                          STA PPU_DATA
0C887 BD D9 D4                          LDA tbl_GametileBottomRight,x
0C88A 8D 07 20                          STA PPU_DATA
0C88D                           
0C88D                                   ;; Push x-register to stack
0C88D 8A                                TXA
0C88E 48                                PHA
0C88F                                   
0C88F                                   ;; Update tile RAM (aka collision table)
0C88F A6 05                             LDX temp+5
0C891 BD E3 D4                          LDA tbl_GameTileRamByte,x
0C894 05 04                             ORA temp+4
0C896 0A                                ASL
0C897 09 01                             ORA #%00000001
0C899 A6 00                             LDX temp
0C89B 9D 00 04                          STA tile_type,x
0C89E                           
0C89E                                   ;; Check if shade 1 should be drawn
0C89E E8                                INX
0C89F BD 00 04                          LDA tile_type,x
0C8A2 D0 05                             BNE +
0C8A4 A9 00                                 LDA #$00
0C8A6 8D 07 20                              STA PPU_DATA
0C8A9                                   +
0C8A9                                   
0C8A9                                   ;; Check if shade 2 should be drawn
0C8A9 A5 03                             LDA temp+3
0C8AB 18                                CLC
0C8AC 69 41                             ADC #$41
0C8AE 85 03                             STA temp+3
0C8B0 A5 02                             LDA temp+2
0C8B2 69 00                             ADC #$00
0C8B4 85 02                             STA temp+2
0C8B6                                   
0C8B6 8A                                TXA
0C8B7 18                                CLC
0C8B8 69 0F                             ADC #$0F
0C8BA AA                                TAX
0C8BB                                   
0C8BB BD 00 04                          LDA tile_type,x
0C8BE D0 0F                             BNE +
0C8C0 A5 02                                 LDA temp+2
0C8C2 8D 06 20                              STA PPU_ADDR
0C8C5 A5 03                                 LDA temp+3
0C8C7 8D 06 20                              STA PPU_ADDR
0C8CA A9 00                                 LDA #$00
0C8CC 8D 07 20                              STA PPU_DATA
0C8CF                                   +
0C8CF                           
0C8CF                                   ;; Check if shade 3 should be drawn
0C8CF E8                                INX
0C8D0 E6 03                             INC temp+3
0C8D2 BD 00 04                          LDA tile_type,x
0C8D5 D0 0F                             BNE +
0C8D7 A5 02                                 LDA temp+2
0C8D9 8D 06 20                              STA PPU_ADDR
0C8DC A5 03                                 LDA temp+3
0C8DE 8D 06 20                              STA PPU_ADDR
0C8E1 A9 00                                 LDA #$00
0C8E3 8D 07 20                              STA PPU_DATA
0C8E6                                   +
0C8E6                                   
0C8E6                                   ;; Restore x-register from stack
0C8E6 68                                PLA
0C8E7 AA                                TAX
0C8E8                                   
0C8E8                                   ;; Reset pointer for next tile
0C8E8 A5 03                             LDA temp+3
0C8EA 38                                SEC
0C8EB E9 42                             SBC #$42
0C8ED 85 03                             STA temp+3
0C8EF A5 02                             LDA temp+2
0C8F1 E9 00                             SBC #$00
0C8F3 85 02                             STA temp+2
0C8F5                                   
0C8F5                                   ;; Draw next metatile in this loop (if any left)
0C8F5 88                                DEY
0C8F6 30 27                             BMI +doneDrawingRowColumn
0C8F8                                   
0C8F8                                   ;; Is it a row or a column?
0C8F8 A5 01                             LDA temp+1
0C8FA 10 17                             BPL +
0C8FC                                       ;; It is a column: move pointer down (+$40)
0C8FC A5 03                                 LDA temp+3
0C8FE 18                                    CLC
0C8FF 69 40                                 ADC #$40
0C901 85 03                                 STA temp+3
0C903 A5 02                                 LDA temp+2
0C905 69 00                                 ADC #$00
0C907 85 02                                 STA temp+2
0C909                                       
0C909                                       ;; Add 16 to temp (as a tile RAM pointer)
0C909 A5 00                                 LDA temp
0C90B 18                                    CLC
0C90C 69 10                                 ADC #$10
0C90E 85 00                                 STA temp
0C910 4C 1C C9                              JMP +drawNextTile
0C913                                   +
0C913                                   
0C913                                   ;; It is a row: move pointer right (+$02)
0C913 A5 03                             LDA temp+3
0C915 18                                CLC
0C916 69 02                             ADC #$02
0C918 85 03                             STA temp+3
0C91A                                   
0C91A                                   ;; Add 1 to temp (as a tile RAM pointer)
0C91A E6 00                             INC temp
0C91C                           
0C91C                               
0C91C                               ;; Next tile in the row/column
0C91C                                   +drawNextTile:
0C91C 4C 58 C8                      JMP -drawTileLoop
0C91F                           
0C91F                               ;; Go to the next set of tiles
0C91F                           +doneDrawingRowColumn:
0C91F 68                            PLA
0C920 A8                            TAY
0C921 C8                            INY
0C922 4C D6 C7                      JMP -drawRowColumnLoop
0C925                           
0C925                           ;; Level loading is done
0C925                           +doneLevelLoad:
0C925                           
0C925                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C925 A9 20                         LDA #$20
0C927 8D 06 20                      STA PPU_ADDR
0C92A A9 A2                         LDA #$A2
0C92C 8D 06 20                      STA PPU_ADDR
0C92F A9 35                         LDA #$35
0C931 20 5B CB                      JSR sub_Draw28HorizontalTiles
0C934                           
0C934                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C934 A9 23                         LDA #$23
0C936 8D 06 20                      STA PPU_ADDR
0C939 A9 42                         LDA #$42
0C93B 8D 06 20                      STA PPU_ADDR
0C93E A9 31                         LDA #$31
0C940 20 5B CB                      JSR sub_Draw28HorizontalTiles
0C943                           
0C943                               ;; Left & right game bounds
0C943                               ;; Set PPU_ADDR and store in temp variables
0C943 A9 20                         LDA #$20
0C945 85 00                         STA temp
0C947 8D 06 20                      STA PPU_ADDR
0C94A A9 C1                         LDA #$C1
0C94C 85 01                         STA temp+1
0C94E 8D 06 20                      STA PPU_ADDR
0C951                               
0C951                               ;; Set vertical bound tile and set up loop
0C951 A0 33                         LDY #$33
0C953 A2 14                         LDX #20
0C955                               -
0C955                                   ;; Show left tile
0C955 8C 07 20                          STY PPU_DATA
0C958                                   
0C958                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C958 A5 00                             LDA temp
0C95A 8D 06 20                          STA PPU_ADDR
0C95D A5 01                             LDA temp+1
0C95F 18                                CLC
0C960 69 1D                             ADC #29
0C962 85 01                             STA temp+1
0C964 8D 06 20                          STA PPU_ADDR
0C967                           
0C967                                   ;; Show right tile
0C967 8C 07 20                          STY PPU_DATA
0C96A                           
0C96A                                   ;; Check if we're done yet
0C96A CA                                DEX
0C96B F0 18                             BEQ +drawCorners
0C96D                                   
0C96D                                   ;; Not done yet: add 3 to low byte for next left bound
0C96D A5 01                             LDA temp+1
0C96F 18                                CLC
0C970 69 03                             ADC #3
0C972 85 01                             STA temp+1
0C974                                   
0C974                                   ;; Apply carry to high byte
0C974 A5 00                             LDA temp
0C976 69 00                             ADC #$00
0C978 85 00                             STA temp
0C97A                                   
0C97A                                   ;; Store next PPU_ADDR to draw at
0C97A 8D 06 20                          STA PPU_ADDR
0C97D A5 01                             LDA temp+1
0C97F 8D 06 20                          STA PPU_ADDR
0C982 4C 55 C9                      JMP -
0C985                               
0C985                               
0C985                           
0C985                           +drawCorners:
0C985                               ;; Draw the corners of the playing field
0C985 A9 20                         LDA #$20
0C987 8D 06 20                      STA PPU_ADDR
0C98A A9 A1                         LDA #$A1
0C98C 8D 06 20                      STA PPU_ADDR
0C98F A9 39                         LDA #$39
0C991 8D 07 20                      STA PPU_DATA
0C994                           
0C994 A9 20                         LDA #$20
0C996 8D 06 20                      STA PPU_ADDR
0C999 A9 BE                         LDA #$BE
0C99B 8D 06 20                      STA PPU_ADDR
0C99E A9 3A                         LDA #$3A
0C9A0 8D 07 20                      STA PPU_DATA
0C9A3                               ;; (added background tile for Sprite-0 hit)
0C9A3 A9 3F                         LDA #$3F
0C9A5 8D 07 20                      STA PPU_DATA
0C9A8                           
0C9A8 A9 23                         LDA #$23
0C9AA 8D 06 20                      STA PPU_ADDR
0C9AD A9 41                         LDA #$41
0C9AF 8D 06 20                      STA PPU_ADDR
0C9B2 A9 36                         LDA #$36
0C9B4 8D 07 20                      STA PPU_DATA
0C9B7                           
0C9B7 A9 23                         LDA #$23
0C9B9 8D 06 20                      STA PPU_ADDR
0C9BC A9 5E                         LDA #$5E
0C9BE 8D 06 20                      STA PPU_ADDR
0C9C1 A9 34                         LDA #$34
0C9C3 8D 07 20                      STA PPU_DATA
0C9C6                           
0C9C6                           
0C9C6                               ;; Draw the hud labels
0C9C6 A9 20                         LDA #$20
0C9C8 8D 06 20                      STA PPU_ADDR
0C9CB A9 62                         LDA #$62
0C9CD 8D 06 20                      STA PPU_ADDR
0C9D0 A2 00                         LDX #$00
0C9D2                               -
0C9D2 BD E8 D4                          LDA tbl_HudText,x
0C9D5 8D 07 20                          STA PPU_DATA
0C9D8 E8                                INX
0C9D9 E0 1C                             CPX #28
0C9DB D0 F5                         BNE -
0C9DD                           
0C9DD                           
0C9DD                               ;; Draw the current score
0C9DD A9 20                         LDA #$20
0C9DF 8D 06 20                      STA PPU_ADDR
0C9E2 A9 83                         LDA #$83
0C9E4 8D 06 20                      STA PPU_ADDR
0C9E7 A2 00                         LDX #$00
0C9E9                               -
0C9E9 B5 20                             LDA ball_score,x
0C9EB 18                                CLC
0C9EC 69 01                             ADC #$01
0C9EE 8D 07 20                          STA PPU_DATA
0C9F1 E8                                INX
0C9F2 E0 06                             CPX #$06
0C9F4 D0 F3                         BNE -
0C9F6                           
0C9F6                           
0C9F6                               ;; Draw the level number
0C9F6                               ;; (with primitive HEX>DEC)
0C9F6 A5 3D                         LDA current_level
0C9F8 18                            CLC
0C9F9 69 01                         ADC #$01
0C9FB 85 01                         STA temp+1
0C9FD                               
0C9FD C9 14                         CMP #20
0C9FF B0 13                         BCS +tempIsTwo
0CA01                               
0CA01 C9 0A                         CMP #10
0CA03 B0 05                         BCS +tempIsOne
0CA05                               
0CA05 A9 00                         LDA #$00
0CA07 4C 1B CA                      JMP +setTemp
0CA0A                               
0CA0A                           +tempIsOne:
0CA0A 38                            SEC
0CA0B E9 0A                         SBC #10
0CA0D 85 01                         STA temp+1
0CA0F A9 01                         LDA #$01
0CA11 4C 1B CA                      JMP +setTemp
0CA14                               
0CA14                           +tempIsTwo:
0CA14 38                            SEC
0CA15 E9 14                         SBC #20
0CA17 85 01                         STA temp+1
0CA19 A9 02                         LDA #$02
0CA1B                           
0CA1B                           +setTemp:
0CA1B 85 00                         STA temp
0CA1D                               
0CA1D E6 00                         INC temp
0CA1F E6 01                         INC temp+1
0CA21                               
0CA21 A9 20                         LDA #$20
0CA23 8D 06 20                      STA PPU_ADDR
0CA26 A9 8B                         LDA #$8B
0CA28 8D 06 20                      STA PPU_ADDR
0CA2B A5 00                         LDA temp
0CA2D 8D 07 20                      STA PPU_DATA
0CA30 A5 01                         LDA temp+1
0CA32 8D 07 20                      STA PPU_DATA
0CA35                           
0CA35                           
0CA35                               ;; Draw lives (presumes lives to be capped at 9)
0CA35 A9 20                         LDA #$20
0CA37 8D 06 20                      STA PPU_ADDR
0CA3A A9 92                         LDA #$92
0CA3C 8D 06 20                      STA PPU_ADDR
0CA3F A6 1F                         LDX ball_lives
0CA41 E8                            INX
0CA42 8E 07 20                      STX PPU_DATA
0CA45                           
0CA45                           
0CA45                               ;; Set and draw bonus
0CA45 A9 07                         LDA #$07
0CA47 85 2C                         STA ball_bonus
0CA49 A9 09                         LDA #$09
0CA4B 85 2D                         STA ball_bonus+1
0CA4D 85 2E                         STA ball_bonus+2
0CA4F                               
0CA4F A9 20                         LDA #$20
0CA51 8D 06 20                      STA PPU_ADDR
0CA54 A9 9A                         LDA #$9A
0CA56 8D 06 20                      STA PPU_ADDR
0CA59 A2 00                         LDX #$00
0CA5B                               -
0CA5B B5 2C                             LDA ball_bonus,x
0CA5D 18                                CLC
0CA5E 69 01                             ADC #$01
0CA60 8D 07 20                          STA PPU_DATA
0CA63 E8                                INX
0CA64 E0 03                             CPX #$03
0CA66 D0 F3                         BNE -
0CA68                           
0CA68                           
0CA68                               ;; Set attribute data to RAM
0CA68                               
0CA68                               ;; Byte 0-7 of attribute ram should be #%10100000
0CA68 A2 00                         LDX #$00
0CA6A A9 A0                         LDA #$A0
0CA6C                               -
0CA6C 9D A0 04                          STA tile_attributes,x
0CA6F E8                                INX
0CA70 E0 08                             CPX #$08
0CA72 D0 F8                         BNE -
0CA74                           
0CA74                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CA74                           
0CA74                           -attributeLoop:
0CA74                               ;; Reset current attribute value
0CA74 A9 00                         LDA #$00
0CA76 85 02                         STA temp+2
0CA78                           
0CA78                               ;; Get first metatile in tile ram based on attribute index
0CA78                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CA78 8A                            TXA
0CA79                           
0CA79 38                            SEC
0CA7A E9 08                         SBC #$08
0CA7C 85 01                         STA temp+1      ; attr - 8 (temp1)
0CA7E 0A                            ASL             ; * 2
0CA7F 85 00                         STA temp        ; temp = temp1 * 2
0CA81                           
0CA81 A5 01                         LDA temp+1      ; temp1
0CA83 29 F8                         AND #%11111000  ; rounded down to 8's
0CA85 0A                            ASL             ; * 2
0CA86 18                            CLC
0CA87 65 00                         ADC temp        ; + temp1 * 2
0CA89 85 00                         STA temp        ; first metatile
0CA8B                           
0CA8B                               ;; Store first metatile in y-register
0CA8B A8                            TAY
0CA8C                           
0CA8C                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CA8C 8A                            TXA
0CA8D 29 07                         AND #%00000111
0CA8F C9 07                         CMP #%00000111
0CA91 F0 0B                         BEQ +
0CA93                           
0CA93                               ;; If X >= $30, don't apply bottom right metatile
0CA93 E0 30                         CPX #$30
0CA95 B0 07                         BCS +
0CA97                               
0CA97                               ;; Add metatile1 subpalette to attribute value
0CA97 B9 00 04                      LDA tile_type,y
0CA9A 29 0C                         AND #%00001100
0CA9C 85 02                         STA temp+2
0CA9E                               +
0CA9E                           
0CA9E                           
0CA9E                               ;; Apply second metatile
0CA9E 88                            DEY
0CA9F                           
0CA9F                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CA9F 8A                            TXA
0CAA0 29 07                         AND #%00000111
0CAA2 F0 10                         BEQ +
0CAA4                           
0CAA4                               ;; If X >= $30, don't apply bottom left metatile
0CAA4 E0 30                         CPX #$30
0CAA6 B0 0C                         BCS +
0CAA8                           
0CAA8                           
0CAA8                           
0CAA8                               ;; Add metatile2 subpalette to attribute value
0CAA8 B9 00 04                      LDA tile_type,y
0CAAB 29 0C                         AND #%00001100
0CAAD 4A                            LSR
0CAAE 4A                            LSR
0CAAF 05 02                         ORA temp+2
0CAB1 4C B6 CA                      JMP ++
0CAB4                               +
0CAB4 A5 02                         LDA temp+2
0CAB6                               ++
0CAB6 0A                            ASL
0CAB7 0A                            ASL
0CAB8 85 02                         STA temp+2
0CABA                           
0CABA                           
0CABA                               ;; Apply third metatile
0CABA 98                            TYA
0CABB 38                            SEC
0CABC E9 0F                         SBC #$0F
0CABE A8                            TAY
0CABF                           
0CABF                               ;; If X MOD 8 == 7, don't apply top right metatile
0CABF 8A                            TXA
0CAC0 29 07                         AND #%00000111
0CAC2 C9 07                         CMP #%00000111
0CAC4 F0 11                         BEQ +
0CAC6                           
0CAC6                               ;; If X < $10, don't apply top right metatile
0CAC6 8A                            TXA
0CAC7 29 F0                         AND #%11110000
0CAC9 F0 0C                         BEQ +
0CACB                           
0CACB                               ;; Add metatile3 subpalette to attribute value
0CACB B9 00 04                      LDA tile_type,y
0CACE 29 0C                         AND #%00001100
0CAD0 4A                            LSR
0CAD1 4A                            LSR
0CAD2 05 02                         ORA temp+2
0CAD4 4C D9 CA                      JMP ++
0CAD7                               +
0CAD7 A5 02                         LDA temp+2
0CAD9                               ++
0CAD9 0A                            ASL
0CADA 0A                            ASL
0CADB 85 02                         STA temp+2
0CADD                           
0CADD                           
0CADD                               ;; Apply fourth metatile
0CADD 88                            DEY
0CADE                           
0CADE                               ;; If X MOD 8 == 0, don't apply top left metatile
0CADE 8A                            TXA
0CADF 29 07                         AND #%00000111
0CAE1 F0 11                         BEQ +
0CAE3                           
0CAE3                               ;; If X < $10, don't apply top left metatile
0CAE3 8A                            TXA
0CAE4 29 F0                         AND #%11110000
0CAE6 F0 0C                         BEQ +
0CAE8                           
0CAE8                               ;; Add metatile4 subpalette to attribute value
0CAE8 B9 00 04                      LDA tile_type,y
0CAEB 29 0C                         AND #%00001100
0CAED 4A                            LSR
0CAEE 4A                            LSR
0CAEF 05 02                         ORA temp+2
0CAF1 4C F6 CA                      JMP ++
0CAF4                               +
0CAF4 A5 02                         LDA temp+2
0CAF6                               ++
0CAF6 9D A0 04                      STA tile_attributes,x
0CAF9                           
0CAF9                               ;; Check the next attribute, if any left
0CAF9 E8                            INX
0CAFA E0 38                         CPX #$38
0CAFC F0 03                         BEQ +
0CAFE 4C 74 CA                          JMP -attributeLoop
0CB01                               +
0CB01                           
0CB01                               ;; Stream attribute RAM to PPU
0CB01 2C 02 20                      BIT PPU_STATUS
0CB04 A9 23                         LDA #$23
0CB06 8D 06 20                      STA PPU_ADDR
0CB09 A9 C0                         LDA #$C0
0CB0B 8D 06 20                      STA PPU_ADDR
0CB0E A2 00                         LDX #$00
0CB10                               -
0CB10 BD A0 04                          LDA tile_attributes,x
0CB13 8D 07 20                          STA PPU_DATA
0CB16 E8                                INX
0CB17 E0 40                             CPX #$40
0CB19 D0 F5                         BNE -
0CB1B                           
0CB1B                               ;; Set initial ball position
0CB1B A6 3D                         LDX current_level
0CB1D BD 75 D4                      LDA tbl_lvl_ball_startpos,x
0CB20 29 F0                         AND #%11110000
0CB22 18                            CLC
0CB23 69 34                         ADC #$34
0CB25 85 19                         STA ball_ypos_hi
0CB27 BD 75 D4                      LDA tbl_lvl_ball_startpos,x
0CB2A 0A                            ASL
0CB2B 0A                            ASL
0CB2C 0A                            ASL
0CB2D 0A                            ASL
0CB2E 18                            CLC
0CB2F 69 14                         ADC #$14
0CB31 85 17                         STA ball_xpos_hi
0CB33 A9 00                         LDA #$00
0CB35 85 18                         STA ball_xpos_lo
0CB37 85 1A                         STA ball_ypos_lo
0CB39                               
0CB39                               ;; Set initial ball color and direction
0CB39 BD 8E D4                      LDA tbl_lvl_ball_init,x
0CB3C 29 F0                         AND #%11110000
0CB3E 85 36                         STA ball_flags
0CB40 20 D1 C4                      JSR sub_ColorizeBall
0CB43                               
0CB43                               ;; Play background noise
0CB43 A9 08                         LDA #$08
0CB45 8D 15 40                      STA APU_STATUS
0CB48 8D 0F 40                      STA NOISE_LENGTH
0CB4B A9 0E                         LDA #$0E
0CB4D 85 41                         STA current_noise
0CB4F A9 00                         LDA #$00
0CB51 85 3F                         STA max_noise
0CB53 85 42                         STA noise_counter
0CB55 85 40                         STA sweep_noise
0CB57 20 59 C4                      JSR sub_BackgroundNoise
0CB5A                           
0CB5A                               ;; Return
0CB5A 60                            RTS
0CB5B                           
0CB5B                           
0CB5B                           ;; Subroutine: draw 28 tiles in a row
0CB5B                           sub_Draw28HorizontalTiles:
0CB5B A2 1C                         LDX #28
0CB5D                               -
0CB5D 8D 07 20                          STA PPU_DATA
0CB60 CA                                DEX
0CB61 D0 FA                         BNE -
0CB63 60                            RTS0CB64                           .include "game/subroutine/LoadIntroScreen.asm"
0CB64                           sub_LoadIntroScreen:
0CB64                           
0CB64                               ;; Load intro palette
0CB64 2C 02 20                      BIT PPU_STATUS
0CB67 A9 3F                         LDA #$3F
0CB69 8D 06 20                      STA PPU_ADDR
0CB6C A9 00                         LDA #$00
0CB6E 8D 06 20                      STA PPU_ADDR
0CB71 A2 00                         LDX #$00
0CB73                               -
0CB73 BD 1A CC                          LDA tbl_IntroScreenPalette,x
0CB76 8D 07 20                          STA PPU_DATA
0CB79 E8                                INX
0CB7A E0 20                             CPX #$20
0CB7C D0 F5                         BNE -
0CB7E                               
0CB7E                               ;; Put ball in the middle
0CB7E A9 7C                         LDA #$7C
0CB80 85 17                         STA ball_xpos_hi
0CB82 85 19                         STA ball_ypos_hi
0CB84                           
0CB84                               ;; Clear the screen
0CB84 20 66 C4                      JSR sub_ClearScreen
0CB87                           
0CB87                               ;; Set up intro screen draw loop
0CB87 A2 00                         LDX #$00
0CB89                           
0CB89                           -loop_IntroScreenData:
0CB89                           
0CB89                               ;; Get current byte from intro screen data
0CB89 BD 42 CC                      LDA tbl_IntroScreenData,x
0CB8C                           
0CB8C                               ;; If current byte is #$3F, we're done drawing.
0CB8C C9 3F                         CMP #$3F
0CB8E D0 03                         BNE +
0CB90 4C DD CB                          JMP +goToEndIntroScreen
0CB93                               +
0CB93                           
0CB93                               ;; If highest bits are %11, draw a plain tile
0CB93 29 C0                         AND #%11000000
0CB95 D0 03                         BNE +
0CB97 4C BD CB                          JMP +drawTile
0CB9A                               +
0CB9A                               
0CB9A                               ;; If highest bits are %01, set the PPU address
0CB9A                               ;; If not, draw two logo tiles
0CB9A C9 40                         CMP #%01000000
0CB9C D0 03                         BNE +drawLogo
0CB9E 4C C7 CB                          JMP +setPpuAddr
0CBA1                           
0CBA1                           +drawLogo:
0CBA1                               ;; Get bits 0-2 and store in a temp variable
0CBA1 BD 42 CC                      LDA tbl_IntroScreenData,x
0CBA4 29 07                         AND #%00000111
0CBA6 85 00                         STA temp
0CBA8                               
0CBA8                               ;; Get bits 3-5, shift over to get a value from 0-7
0CBA8 BD 42 CC                      LDA tbl_IntroScreenData,x
0CBAB 4A                            LSR
0CBAC 4A                            LSR
0CBAD 4A                            LSR
0CBAE 29 07                         AND #%00000111
0CBB0                               
0CBB0                               ;; Draw the tile that corresponds with that value
0CBB0 A8                            TAY
0CBB1 20 49 C5                      JSR sub_drawIntroScreenLogoTile
0CBB4                               
0CBB4                               ;; Do the same for the value stored in temp
0CBB4 A4 00                         LDY temp
0CBB6 20 49 C5                      JSR sub_drawIntroScreenLogoTile
0CBB9                           
0CBB9                               ;; Next byte please
0CBB9 E8                            INX
0CBBA 4C 89 CB                      JMP -loop_IntroScreenData
0CBBD                           
0CBBD                           +drawTile:
0CBBD                               ;; Just draw the tile value on screen
0CBBD BD 42 CC                      LDA tbl_IntroScreenData,x
0CBC0 8D 07 20                      STA PPU_DATA
0CBC3                               
0CBC3                               ;; Next byte please
0CBC3 E8                            INX
0CBC4 4C 89 CB                      JMP -loop_IntroScreenData
0CBC7                           
0CBC7                           
0CBC7                           +setPpuAddr:
0CBC7                               ;; Reset the PPU latch
0CBC7 2C 02 20                      BIT PPU_STATUS
0CBCA                               
0CBCA                               ;; Sanitize and write the high byte of the PPU address
0CBCA BD 42 CC                      LDA tbl_IntroScreenData,x
0CBCD 29 3F                         AND #%00111111
0CBCF 8D 06 20                      STA PPU_ADDR
0CBD2                           
0CBD2                               ;; Write the low byte of the PPU address
0CBD2 E8                            INX
0CBD3 BD 42 CC                      LDA tbl_IntroScreenData,x
0CBD6 8D 06 20                      STA PPU_ADDR
0CBD9                               
0CBD9                               ;; PPU has been set up to draw tiles at the correct spot now.
0CBD9                               
0CBD9                               ;; Next byte please.
0CBD9 E8                            INX
0CBDA 4C 89 CB                      JMP -loop_IntroScreenData
0CBDD                           
0CBDD                           +goToEndIntroScreen:
0CBDD                           
0CBDD                               ;; To color the 1.LEVEL: line green, we need to update two
0CBDD                               ;; values in the PPU attribute data.
0CBDD 2C 02 20                      BIT PPU_STATUS
0CBE0 A9 23                         LDA #$23
0CBE2 8D 06 20                      STA PPU_ADDR
0CBE5 A9 CB                         LDA #$CB
0CBE7 8D 06 20                      STA PPU_ADDR
0CBEA A9 0A                         LDA #%00001010
0CBEC 8D 07 20                      STA PPU_DATA
0CBEF 8D 07 20                      STA PPU_DATA
0CBF2                           
0CBF2 60                            RTS
0CBF3                           
0CBF3                           .include "game/subroutine/LoadWinScreen.asm"
0CBF3                           sub_LoadWinScreen:
0CBF3 60                            RTS
0CBF4                           
0CBF4                           .include "game/subroutine/WriteByteToPPU.asm"
0CBF4                           sub_WriteByteToPPUBuffer:
0CBF4                           
0CBF4                               ;; Prevent updating until full 3-byte buffer is filled,
0CBF4                               ;; so that graphics won't glitch out if NMI happens during
0CBF4                               ;; updating the buffer
0CBF4 A9 00                         LDA #$00
0CBF6 85 38                         STA ppu_buffer_update
0CBF8                           
0CBF8                               ;; Check if buffer full; if so, wait a frame and force update
0CBF8 A4 39                         LDY ppu_buffer_pointer
0CBFA C0 30                         CPY #$30
0CBFC D0 05                         BNE +
0CBFE E6 38                             INC ppu_buffer_update
0CC00 20 F4 C3                          JSR sub_WaitForVBlank
0CC03                               +
0CC03                           
0CC03                               ;; Add ppu_addr high byte to buffer
0CC03 A5 00                         LDA temp
0CC05 99 00 03                      STA ppu_buffer,y
0CC08                           
0CC08                               ;; Add ppu_addr low byte to buffer
0CC08 C8                            INY
0CC09 A5 01                         LDA temp+1
0CC0B 99 00 03                      STA ppu_buffer,y
0CC0E                           
0CC0E                               ;; Add ppu_data to buffer
0CC0E C8                            INY
0CC0F A5 02                         LDA temp+2
0CC11 99 00 03                      STA ppu_buffer,y
0CC14                           
0CC14                               ;; Update buffer pointer
0CC14 C8                            INY
0CC15 84 39                         STY ppu_buffer_pointer
0CC17                           
0CC17                               ;; Tell NMI to update next round
0CC17 E6 38                         INC ppu_buffer_update
0CC19                           
0CC19                               ;; Return
0CC19 60                            RTS0CC1A                           
0CC1A                           
0CC1A                           ;; LUTs
0CC1A                           .include "game/include/tables.asm"
0CC1A                           
0CC1A                           ;; Initial screen palette
0CC1A                           tbl_IntroScreenPalette:
0CC1A 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CC1E 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CC22 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0CC26 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CC2A                           
0CC2A 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0CC2E 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0CC32 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0CC36 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0CC3A                           
0CC3A                           
0CC3A                           ;; Intro: mapping logo index to chr tile
0CC3A                           tbl_IntroScreenLogoChr:
0CC3A 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0CC42                           
0CC42                           
0CC42                           ;; Intro screen data
0CC42                           tbl_IntroScreenData:
0CC42                           
0CC42                               ;; Set PPU address $20AC and draw
0CC42 60 AC                         .db #$60, #$AC
0CC44 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0CC4C                           
0CC4C                               ;; Set PPU address $20CF and draw
0CC4C 60 CF                         .db #$60, #$CF
0CC4E 01 02                         .db #_0, #_1
0CC50                               
0CC50                               ;; Set PPU address $2122 and draw
0CC50 61 22                         .db #$61, #$22
0CC52 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0CC59 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0CC5F 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0CC67 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0CC6C                               
0CC6C                               ;; Set PPU address $2147 and draw
0CC6C 61 47                         .db #$61, #$47
0CC6E 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0CC75 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CC79 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0CC7F 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0CC85                               
0CC85                               ;; Set PPU address $218B and draw
0CC85 61 8B                         .db #$61, #$8B
0CC87 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0CC8D 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0CC92                               
0CC92                               ;; Set PPU address $21E6 and draw
0CC92 61 E6                         .db #$61, #$E6
0CC94 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0CC9C 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0CCA0 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0CCA7                               
0CCA7                               ;; Set PPU address $222D and draw
0CCA7 62 2D                         .db #$62, #$2D
0CCA9 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0CCAF                               
0CCAF                               ;; Set PPU address $2281
0CCAF 62 81                         .db #$62, #$81
0CCB1                               
0CCB1                               ;; Draw the Crillion logo
0CCB1 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0CCB5 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CCB9 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0CCBD E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0CCC1                               
0CCC1 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0CCC5 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CCC9 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CCCD D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CCD1                               
0CCD1 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0CCD5 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CCD9 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CCDD D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CCE1                           
0CCE1 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CCE5 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CCE9 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CCED D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CCF1                               
0CCF1 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0CCF5 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0CCF9 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0CCFD D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0CD01                           
0CD01 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0CD05 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0CD09 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0CD0D F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0CD10                           
0CD10                               ;; End of intro
0CD10 3F                            .db #$3F
0CD11                           
0CD11                           
0CD11                           ;; Animation frames table
0CD11                           .include "game/include/table/animation_frames.asm"
0CD11                           ;; CHR tile-id's per slide of explosion
0CD11                           explosion_slide0:
0CD11 00 00 00                      .db #$00, #$00, #$00
0CD14 2C 2D 2E                      .db #$2C, #$2D, #$2E
0CD17 3C 3D 3E                      .db #$3C, #$3D, #$3E
0CD1A                           
0CD1A                           explosion_slide1:
0CD1A 00 00 00                      .db #$00, #$00, #$00
0CD1D 29 2A 2B                      .db #$29, #$2A, #$2B
0CD20 39 3A 3B                      .db #$39, #$3A, #$3B
0CD23                           
0CD23                           explosion_slide2:
0CD23 16 00 00                      .db #$16, #$00, #$00
0CD26 26 27 28                      .db #$26, #$27, #$28
0CD29 36 37 38                      .db #$36, #$37, #$38
0CD2C                           
0CD2C                           explosion_slide3:
0CD2C 00 14 15                      .db #$00, #$14, #$15
0CD2F 23 24 25                      .db #$23, #$24, #$25
0CD32 33 34 35                      .db #$33, #$34, #$35
0CD35                           
0CD35                           explosion_slide4:
0CD35 10 11 12                      .db #$10, #$11, #$12
0CD38 20 21 22                      .db #$20, #$21, #$22
0CD3B 30 31 32                      .db #$30, #$31, #$32
0CD3E                           
0CD3E                           ;; High and low bytes of animation slides
0CD3E                           explosion_anim_hi:
0CD3E CD                            .db >#explosion_slide0
0CD3F CD                            .db >#explosion_slide1
0CD40 CD                            .db >#explosion_slide2
0CD41 CD                            .db >#explosion_slide3
0CD42 CD                            .db >#explosion_slide4
0CD43 CD                            .db >#explosion_slide4
0CD44 CD                            .db >#explosion_slide3
0CD45 CD                            .db >#explosion_slide2
0CD46 CD                            .db >#explosion_slide1
0CD47 CD                            .db >#explosion_slide0
0CD48                           
0CD48                           explosion_anim_lo:
0CD48 11                            .db <#explosion_slide0
0CD49 1A                            .db <#explosion_slide1
0CD4A 23                            .db <#explosion_slide2
0CD4B 2C                            .db <#explosion_slide3
0CD4C 35                            .db <#explosion_slide4
0CD4D 35                            .db <#explosion_slide4
0CD4E 2C                            .db <#explosion_slide3
0CD4F 23                            .db <#explosion_slide2
0CD50 1A                            .db <#explosion_slide1
0CD51 11                            .db <#explosion_slide0
0CD52                           
0CD52                           
0CD52                           
0CD52                           ;; Ball palette color table (CBRYGM)
0CD52                           tbl_BallColorDark:
0CD52 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0CD58                            
0CD58                           tbl_BallColorLight:
0CD58 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0CD5E                           
0CD5E                               
0CD5E                           ;; Screen mode drawing routine addresses
0CD5E                           tbl_LoadScreenHi:
0CD5E CB C7 CB                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0CD61                           
0CD61                           tbl_LoadScreenLo:
0CD61 64 BC F3                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0CD64                           
0CD64                           
0CD64                           ;; Level data
0CD64                           .include "game/include/table/level_data.asm"
0CD64                           lvl_layout_01:
0CD64 61 21                         .db #$61, #%00100001
0CD66 52 61                         .db #$52, #%01100001
0CD68 43 65                         .db #$43, #%01100101
0CD6A 83 05                         .db #$83, #%00000101
0CD6C 93 15                         .db #$93, #%00010101
0CD6E 34 7A                         .db #$34, #%01111010
0CD70 74 7A                         .db #$74, #%01111010
0CD72 35 7A                         .db #$35, #%01111010
0CD74 75 7A                         .db #$75, #%01111010
0CD76 46 65                         .db #$46, #%01100101
0CD78 86 25                         .db #$86, #%00100101
0CD7A 57 61                         .db #$57, #%01100001
0CD7C 68 21                         .db #$68, #%00100001
0CD7E FF                            .db #LEVEL_END
0CD7F                           
0CD7F                           lvl_layout_02:
0CD7F C0 0A                         .db #$C0, #%00001010
0CD81 11 15                         .db #$11, #%00010101
0CD83 21 62                         .db #$21, #%01100010
0CD85 61 62                         .db #$61, #%01100010
0CD87 A1 42                         .db #$A1, #%01000010
0CD89 12 67                         .db #$12, #%01100111
0CD8B 52 67                         .db #$52, #%01100111
0CD8D 92 67                         .db #$92, #%01100111
0CD8F C3 0D                         .db #$C3, #%00001101
0CD91 14 11                         .db #$14, #%00010001
0CD93 24 65                         .db #$24, #%01100101
0CD95 64 65                         .db #$64, #%01100101
0CD97 A4 45                         .db #$A4, #%01000101
0CD99 15 67                         .db #$15, #%01100111
0CD9B 55 67                         .db #$55, #%01100111
0CD9D 95 67                         .db #$95, #%01100111
0CD9F 17 12                         .db #$17, #%00010010
0CDA1 27 61                         .db #$27, #%01100001
0CDA3 67 61                         .db #$67, #%01100001
0CDA5 A7 41                         .db #$A7, #%01000001
0CDA7 38 7A                         .db #$38, #%01111010
0CDA9 98 5A                         .db #$98, #%01011010
0CDAB 18 27                         .db #$18, #%00100111
0CDAD 48 27                         .db #$48, #%00100111
0CDAF 78 27                         .db #$78, #%00100111
0CDB1 C8 07                         .db #$C8, #%00000111
0CDB3 FF                            .db #LEVEL_END
0CDB4                           
0CDB4                           lvl_layout_03:
0CDB4 00 7A                         .db #$00, #%01111010
0CDB6 40 7A                         .db #$40, #%01111010
0CDB8 80 7A                         .db #$80, #%01111010
0CDBA C0 1A                         .db #$C0, #%00011010
0CDBC 10 A1                         .db #$10, #%10100001
0CDBE 13 E1                         .db #$13, #%11100001
0CDC0 17 C1                         .db #$17, #%11000001
0CDC2 30 C1                         .db #$30, #%11000001
0CDC4 34 C1                         .db #$34, #%11000001
0CDC6 38 A1                         .db #$38, #%10100001
0CDC8 50 E1                         .db #$50, #%11100001
0CDCA 55 81                         .db #$55, #%10000001
0CDCC 57 C1                         .db #$57, #%11000001
0CDCE 70 C1                         .db #$70, #%11000001
0CDD0 73 A1                         .db #$73, #%10100001
0CDD2 76 E1                         .db #$76, #%11100001
0CDD4 90 E1                         .db #$90, #%11100001
0CDD6 95 81                         .db #$95, #%10000001
0CDD8 97 C1                         .db #$97, #%11000001
0CDDA B0 C1                         .db #$B0, #%11000001
0CDDC B4 C1                         .db #$B4, #%11000001
0CDDE B8 A1                         .db #$B8, #%10100001
0CDE0 D0 A1                         .db #$D0, #%10100001
0CDE2 D3 E1                         .db #$D3, #%11100001
0CDE4 D7 C1                         .db #$D7, #%11000001
0CDE6 FF                            .db #LEVEL_END
0CDE7                           
0CDE7                           lvl_layout_04:
0CDE7 00 4C                         .db #$00, #%01001100
0CDE9 40 6C                         .db #$40, #%01101100
0CDEB 80 4C                         .db #$80, #%01001100
0CDED 81 AC                         .db #$81, #%10101100
0CDEF C1 2C                         .db #$C1, #%00101100
0CDF1 02 6C                         .db #$02, #%01101100
0CDF3 42 CC                         .db #$42, #%11001100
0CDF5 62 EC                         .db #$62, #%11101100
0CDF7 A2 CC                         .db #$A2, #%11001100
0CDF9 C3 CC                         .db #$C3, #%11001100
0CDFB 04 4C                         .db #$04, #%01001100
0CDFD 84 2C                         .db #$84, #%00101100
0CDFF 25 AC                         .db #$25, #%10101100
0CE01 85 AC                         .db #$85, #%10101100
0CE03 06 AC                         .db #$06, #%10101100
0CE05 36 CC                         .db #$36, #%11001100
0CE07 56 CC                         .db #$56, #%11001100
0CE09 66 EC                         .db #$66, #%11101100
0CE0B 96 6C                         .db #$96, #%01101100
0CE0D C7 AC                         .db #$C7, #%10101100
0CE0F 08 2C                         .db #$08, #%00101100
0CE11 78 6C                         .db #$78, #%01101100
0CE13 D8 0C                         .db #$D8, #%00001100
0CE15 30 A1                         .db #$30, #%10100001
0CE17 B0 21                         .db #$B0, #%00100001
0CE19 01 41                         .db #$01, #%01000001
0CE1B 41 61                         .db #$41, #%01100001
0CE1D 91 A1                         .db #$91, #%10100001
0CE1F A1 21                         .db #$A1, #%00100001
0CE21 52 C1                         .db #$52, #%11000001
0CE23 72 E1                         .db #$72, #%11100001
0CE25 B2 C1                         .db #$B2, #%11000001
0CE27 C2 21                         .db #$C2, #%00100001
0CE29 03 41                         .db #$03, #%01000001
0CE2B 33 C1                         .db #$33, #%11000001
0CE2D 83 21                         .db #$83, #%00100001
0CE2F D3 E1                         .db #$D3, #%11100001
0CE31 05 21                         .db #$05, #%00100001
0CE33 45 E1                         .db #$45, #%11100001
0CE35 A5 21                         .db #$A5, #%00100001
0CE37 16 A1                         .db #$16, #%10100001
0CE39 76 A1                         .db #$76, #%10100001
0CE3B 27 A1                         .db #$27, #%10100001
0CE3D 57 01                         .db #$57, #%00000001
0CE3F 87 41                         .db #$87, #%01000001
0CE41 B7 A1                         .db #$B7, #%10100001
0CE43 19 21                         .db #$19, #%00100001
0CE45 39 41                         .db #$39, #%01000001
0CE47 89 41                         .db #$89, #%01000001
0CE49 C9 21                         .db #$C9, #%00100001
0CE4B D0 1A                         .db #$D0, #%00011010
0CE4D 55 1A                         .db #$55, #%00011010
0CE4F 95 1A                         .db #$95, #%00011010
0CE51 D7 1A                         .db #$D7, #%00011010
0CE53 09 1A                         .db #$09, #%00011010
0CE55 79 1A                         .db #$79, #%00011010
0CE57 FF                            .db #LEVEL_END
0CE58                           
0CE58                           lvl_layout_05:
0CE58 40 0A                         .db #$40, #%00001010
0CE5A 70 1A                         .db #$70, #%00011010
0CE5C B0 42                         .db #$B0, #%01000010
0CE5E 41 A7                         .db #$41, #%10100111
0CE60 B1 22                         .db #$B1, #%00100010
0CE62 D1 15                         .db #$D1, #%00010101
0CE64 22 0A                         .db #$22, #%00001010
0CE66 52 05                         .db #$52, #%00000101
0CE68 B2 42                         .db #$B2, #%01000010
0CE6A 03 27                         .db #$03, #%00100111
0CE6C 33 67                         .db #$33, #%01100111
0CE6E 73 67                         .db #$73, #%01100111
0CE70 B3 47                         .db #$B3, #%01000111
0CE72 05 E5                         .db #$05, #%11100101
0CE74 25 A5                         .db #$25, #%10100101
0CE76 35 25                         .db #$35, #%00100101
0CE78 65 45                         .db #$65, #%01000101
0CE7A A5 45                         .db #$A5, #%01000101
0CE7C 46 E5                         .db #$46, #%11100101
0CE7E 66 E5                         .db #$66, #%11100101
0CE80 86 E5                         .db #$86, #%11100101
0CE82 A6 E2                         .db #$A6, #%11100010
0CE84 C6 E5                         .db #$C6, #%11100101
0CE86 27 25                         .db #$27, #%00100101
0CE88 77 05                         .db #$77, #%00000101
0CE8A B7 02                         .db #$B7, #%00000010
0CE8C 09 05                         .db #$09, #%00000101
0CE8E 79 05                         .db #$79, #%00000101
0CE90 B9 02                         .db #$B9, #%00000010
0CE92 FF                            .db #LEVEL_END
0CE93                           
0CE93                           lvl_layout_06:
0CE93 00 03                         .db #$00, #%00000011
0CE95 20 03                         .db #$20, #%00000011
0CE97 40 03                         .db #$40, #%00000011
0CE99 A0 03                         .db #$A0, #%00000011
0CE9B C0 03                         .db #$C0, #%00000011
0CE9D 11 03                         .db #$11, #%00000011
0CE9F 31 03                         .db #$31, #%00000011
0CEA1 51 03                         .db #$51, #%00000011
0CEA3 91 03                         .db #$91, #%00000011
0CEA5 B1 03                         .db #$B1, #%00000011
0CEA7 D1 03                         .db #$D1, #%00000011
0CEA9 02 03                         .db #$02, #%00000011
0CEAB 22 03                         .db #$22, #%00000011
0CEAD 42 03                         .db #$42, #%00000011
0CEAF A2 03                         .db #$A2, #%00000011
0CEB1 C2 03                         .db #$C2, #%00000011
0CEB3 13 03                         .db #$13, #%00000011
0CEB5 33 03                         .db #$33, #%00000011
0CEB7 53 03                         .db #$53, #%00000011
0CEB9 93 03                         .db #$93, #%00000011
0CEBB B3 03                         .db #$B3, #%00000011
0CEBD D3 03                         .db #$D3, #%00000011
0CEBF 04 03                         .db #$04, #%00000011
0CEC1 24 03                         .db #$24, #%00000011
0CEC3 44 03                         .db #$44, #%00000011
0CEC5 A4 03                         .db #$A4, #%00000011
0CEC7 C4 03                         .db #$C4, #%00000011
0CEC9 15 03                         .db #$15, #%00000011
0CECB 35 03                         .db #$35, #%00000011
0CECD 55 03                         .db #$55, #%00000011
0CECF 95 03                         .db #$95, #%00000011
0CED1 B5 03                         .db #$B5, #%00000011
0CED3 D5 03                         .db #$D5, #%00000011
0CED5 06 03                         .db #$06, #%00000011
0CED7 26 03                         .db #$26, #%00000011
0CED9 46 03                         .db #$46, #%00000011
0CEDB A6 03                         .db #$A6, #%00000011
0CEDD C6 03                         .db #$C6, #%00000011
0CEDF 17 03                         .db #$17, #%00000011
0CEE1 37 03                         .db #$37, #%00000011
0CEE3 57 03                         .db #$57, #%00000011
0CEE5 97 03                         .db #$97, #%00000011
0CEE7 B7 03                         .db #$B7, #%00000011
0CEE9 D7 03                         .db #$D7, #%00000011
0CEEB 08 03                         .db #$08, #%00000011
0CEED 28 03                         .db #$28, #%00000011
0CEEF 48 03                         .db #$48, #%00000011
0CEF1 A8 03                         .db #$A8, #%00000011
0CEF3 C8 03                         .db #$C8, #%00000011
0CEF5 19 03                         .db #$19, #%00000011
0CEF7 39 03                         .db #$39, #%00000011
0CEF9 59 03                         .db #$59, #%00000011
0CEFB 99 03                         .db #$99, #%00000011
0CEFD B9 03                         .db #$B9, #%00000011
0CEFF D9 03                         .db #$D9, #%00000011
0CF01 60 4B                         .db #$60, #%01001011
0CF03 71 CB                         .db #$71, #%11001011
0CF05 62 4B                         .db #$62, #%01001011
0CF07 64 4B                         .db #$64, #%01001011
0CF09 75 CB                         .db #$75, #%11001011
0CF0B 66 4B                         .db #$66, #%01001011
0CF0D 68 4B                         .db #$68, #%01001011
0CF0F 79 0B                         .db #$79, #%00001011
0CF11 70 03                         .db #$70, #%00000011
0CF13 72 03                         .db #$72, #%00000011
0CF15 74 03                         .db #$74, #%00000011
0CF17 76 03                         .db #$76, #%00000011
0CF19 78 03                         .db #$78, #%00000011
0CF1B FF                            .db #LEVEL_END
0CF1C                           
0CF1C                           lvl_layout_07:
0CF1C 00 11                         .db #$00, #%00010001
0CF1E 01 FA                         .db #$01, #%11111010
0CF20 12 BA                         .db #$12, #%10111010
0CF22 23 DA                         .db #$23, #%11011010
0CF24 34 FA                         .db #$34, #%11111010
0CF26 05 DA                         .db #$05, #%11011010
0CF28 15 FA                         .db #$15, #%11111010
0CF2A 45 BA                         .db #$45, #%10111010
0CF2C 56 DA                         .db #$56, #%11011010
0CF2E 27 BA                         .db #$27, #%10111010
0CF30 67 DA                         .db #$67, #%11011010
0CF32 38 3A                         .db #$38, #%00111010
0CF34 78 BA                         .db #$78, #%10111010
0CF36 09 3A                         .db #$09, #%00111010
0CF38 39 3A                         .db #$39, #%00111010
0CF3A 89 1A                         .db #$89, #%00011010
0CF3C B0 01                         .db #$B0, #%00000001
0CF3E D0 01                         .db #$D0, #%00000001
0CF40 A1 01                         .db #$A1, #%00000001
0CF42 C1 11                         .db #$C1, #%00010001
0CF44 B2 01                         .db #$B2, #%00000001
0CF46 D2 01                         .db #$D2, #%00000001
0CF48 A3 01                         .db #$A3, #%00000001
0CF4A C3 01                         .db #$C3, #%00000001
0CF4C B4 01                         .db #$B4, #%00000001
0CF4E D4 01                         .db #$D4, #%00000001
0CF50 A5 01                         .db #$A5, #%00000001
0CF52 C5 01                         .db #$C5, #%00000001
0CF54 B6 01                         .db #$B6, #%00000001
0CF56 D6 01                         .db #$D6, #%00000001
0CF58 A7 01                         .db #$A7, #%00000001
0CF5A C7 01                         .db #$C7, #%00000001
0CF5C FF                            .db #LEVEL_END
0CF5D                           
0CF5D                           lvl_layout_08:
0CF5D 40 B5                         .db #$40, #%10110101
0CF5F 31 0D                         .db #$31, #%00001101
0CF61 61 10                         .db #$61, #%00010000
0CF63 42 C7                         .db #$42, #%11000111
0CF65 52 67                         .db #$52, #%01100111
0CF67 63 C7                         .db #$63, #%11000111
0CF69 83 E7                         .db #$83, #%11100111
0CF6B 05 07                         .db #$05, #%00000111
0CF6D 15 3A                         .db #$15, #%00111010
0CF6F 07 63                         .db #$07, #%01100011
0CF71 27 13                         .db #$27, #%00010011
0CF73 38 A5                         .db #$38, #%10100101
0CF75 09 14                         .db #$09, #%00010100
0CF77 19 05                         .db #$19, #%00000101
0CF79 D0 E0                         .db #$D0, #%11100000
0CF7B C2 A0                         .db #$C2, #%10100000
0CF7D B3 E0                         .db #$B3, #%11100000
0CF7F D5 E0                         .db #$D5, #%11100000
0CF81 C6 E0                         .db #$C6, #%11100000
0CF83 B0 C4                         .db #$B0, #%11000100
0CF85 C0 A4                         .db #$C0, #%10100100
0CF87 D1 A4                         .db #$D1, #%10100100
0CF89 C4 24                         .db #$C4, #%00100100
0CF8B C5 04                         .db #$C5, #%00000100
0CF8D B7 44                         .db #$B7, #%01000100
0CF8F B8 A4                         .db #$B8, #%10100100
0CF91 D9 05                         .db #$D9, #%00000101
0CF93 FF                            .db #LEVEL_END
0CF94                           
0CF94                           lvl_layout_09:
0CF94 81 04                         .db #$81, #%00000100
0CF96 D1 04                         .db #$D1, #%00000100
0CF98 32 C4                         .db #$32, #%11000100
0CF9A A2 C4                         .db #$A2, #%11000100
0CF9C C2 24                         .db #$C2, #%00100100
0CF9E 13 24                         .db #$13, #%00100100
0CFA0 53 04                         .db #$53, #%00000100
0CFA2 C3 27                         .db #$C3, #%00100111
0CFA4 15 6C                         .db #$15, #%01101100
0CFA6 55 6C                         .db #$55, #%01101100
0CFA8 95 6C                         .db #$95, #%01101100
0CFAA D5 0C                         .db #$D5, #%00001100
0CFAC 27 C7                         .db #$27, #%11000111
0CFAE 47 C7                         .db #$47, #%11000111
0CFB0 67 C7                         .db #$67, #%11000111
0CFB2 87 C7                         .db #$87, #%11000111
0CFB4 A7 C7                         .db #$A7, #%11000111
0CFB6 C7 C7                         .db #$C7, #%11000111
0CFB8 08 13                         .db #$08, #%00010011
0CFBA 28 15                         .db #$28, #%00010101
0CFBC 48 12                         .db #$48, #%00010010
0CFBE 68 15                         .db #$68, #%00010101
0CFC0 88 11                         .db #$88, #%00010001
0CFC2 A8 10                         .db #$A8, #%00010000
0CFC4 C8 14                         .db #$C8, #%00010100
0CFC6 09 07                         .db #$09, #%00000111
0CFC8 19 03                         .db #$19, #%00000011
0CFCA 39 05                         .db #$39, #%00000101
0CFCC 59 02                         .db #$59, #%00000010
0CFCE 79 05                         .db #$79, #%00000101
0CFD0 99 01                         .db #$99, #%00000001
0CFD2 B9 00                         .db #$B9, #%00000000
0CFD4 D9 04                         .db #$D9, #%00000100
0CFD6 FF                            .db #LEVEL_END
0CFD7                           
0CFD7                           lvl_layout_10:
0CFD7 00 02                         .db #$00, #%00000010
0CFD9 10 C9                         .db #$10, #%11001001
0CFDB 50 C9                         .db #$50, #%11001001
0CFDD 90 C9                         .db #$90, #%11001001
0CFDF D0 C9                         .db #$D0, #%11001001
0CFE1 31 C9                         .db #$31, #%11001001
0CFE3 71 C9                         .db #$71, #%11001001
0CFE5 B1 C9                         .db #$B1, #%11001001
0CFE7 13 C9                         .db #$13, #%11001001
0CFE9 53 C9                         .db #$53, #%11001001
0CFEB 93 C9                         .db #$93, #%11001001
0CFED D3 C9                         .db #$D3, #%11001001
0CFEF 34 C9                         .db #$34, #%11001001
0CFF1 74 C9                         .db #$74, #%11001001
0CFF3 B4 C9                         .db #$B4, #%11001001
0CFF5 16 C9                         .db #$16, #%11001001
0CFF7 56 C9                         .db #$56, #%11001001
0CFF9 96 C9                         .db #$96, #%11001001
0CFFB D6 C9                         .db #$D6, #%11001001
0CFFD 37 C9                         .db #$37, #%11001001
0CFFF 77 C9                         .db #$77, #%11001001
0D001 B7 C9                         .db #$B7, #%11001001
0D003 D8 12                         .db #$D8, #%00010010
0D005 FF                            .db #LEVEL_END
0D006                           
0D006                           lvl_layout_11:
0D006 00 65                         .db #$00, #%01100101
0D008 40 45                         .db #$40, #%01000101
0D00A 50 A7                         .db #$50, #%10100111
0D00C 80 05                         .db #$80, #%00000101
0D00E 90 A7                         .db #$90, #%10100111
0D010 A0 65                         .db #$A0, #%01100101
0D012 01 43                         .db #$01, #%01000011
0D014 31 23                         .db #$31, #%00100011
0D016 61 A7                         .db #$61, #%10100111
0D018 81 A7                         .db #$81, #%10100111
0D01A A1 63                         .db #$A1, #%01100011
0D01C 02 44                         .db #$02, #%01000100
0D01E 32 44                         .db #$32, #%01000100
0D020 92 04                         .db #$92, #%00000100
0D022 A2 64                         .db #$A2, #%01100100
0D024 03 40                         .db #$03, #%01000000
0D026 33 40                         .db #$33, #%01000000
0D028 63 A1                         .db #$63, #%10100001
0D02A 83 A2                         .db #$83, #%10100010
0D02C 93 00                         .db #$93, #%00000000
0D02E A3 60                         .db #$A3, #%01100000
0D030 04 41                         .db #$04, #%01000001
0D032 34 41                         .db #$34, #%01000001
0D034 94 02                         .db #$94, #%00000010
0D036 A4 62                         .db #$A4, #%01100010
0D038 05 47                         .db #$05, #%01000111
0D03A 35 67                         .db #$35, #%01100111
0D03C 75 0A                         .db #$75, #%00001010
0D03E 85 47                         .db #$85, #%01000111
0D040 B5 47                         .db #$B5, #%01000111
0D042 06 E7                         .db #$06, #%11100111
0D044 16 5A                         .db #$16, #%01011010
0D046 26 11                         .db #$26, #%00010001
0D048 46 13                         .db #$46, #%00010011
0D04A 56 1A                         .db #$56, #%00011010
0D04C 66 14                         .db #$66, #%00010100
0D04E 86 10                         .db #$86, #%00010000
0D050 96 5A                         .db #$96, #%01011010
0D052 A6 12                         .db #$A6, #%00010010
0D054 C6 15                         .db #$C6, #%00010101
0D056 D6 E7                         .db #$D6, #%11100111
0D058 FF                            .db #LEVEL_END
0D059                           
0D059                           lvl_layout_12:
0D059 00 00                         .db #$00, #%00000000
0D05B 50 C0                         .db #$50, #%11000000
0D05D 80 00                         .db #$80, #%00000000
0D05F 61 00                         .db #$61, #%00000000
0D061 22 C0                         .db #$22, #%11000000
0D063 82 E0                         .db #$82, #%11100000
0D065 C2 E0                         .db #$C2, #%11100000
0D067 A3 20                         .db #$A3, #%00100000
0D069 C3 10                         .db #$C3, #%00010000
0D06B 04 00                         .db #$04, #%00000000
0D06D 54 20                         .db #$54, #%00100000
0D06F 15 0A                         .db #$15, #%00001010
0D071 25 C0                         .db #$25, #%11000000
0D073 55 E0                         .db #$55, #%11100000
0D075 86 20                         .db #$86, #%00100000
0D077 C6 E0                         .db #$C6, #%11100000
0D079 C7 A0                         .db #$C7, #%10100000
0D07B 88 00                         .db #$88, #%00000000
0D07D 59 00                         .db #$59, #%00000000
0D07F 89 20                         .db #$89, #%00100000
0D081 D9 1A                         .db #$D9, #%00011010
0D083 FF                            .db #LEVEL_END
0D084                           
0D084                           lvl_layout_13:
0D084 10 E0                         .db #$10, #%11100000
0D086 20 E0                         .db #$20, #%11100000
0D088 30 E0                         .db #$30, #%11100000
0D08A 40 40                         .db #$40, #%01000000
0D08C 80 60                         .db #$80, #%01100000
0D08E C0 E0                         .db #$C0, #%11100000
0D090 D0 E0                         .db #$D0, #%11100000
0D092 41 40                         .db #$41, #%01000000
0D094 71 60                         .db #$71, #%01100000
0D096 52 60                         .db #$52, #%01100000
0D098 A2 20                         .db #$A2, #%00100000
0D09A 43 60                         .db #$43, #%01100000
0D09C 83 60                         .db #$83, #%01100000
0D09E 14 74                         .db #$14, #%01110100
0D0A0 54 74                         .db #$54, #%01110100
0D0A2 94 74                         .db #$94, #%01110100
0D0A4 D4 14                         .db #$D4, #%00010100
0D0A6 15 0D                         .db #$15, #%00001101
0D0A8 55 0D                         .db #$55, #%00001101
0D0AA 95 0D                         .db #$95, #%00001101
0D0AC D5 0D                         .db #$D5, #%00001101
0D0AE 26 0D                         .db #$26, #%00001101
0D0B0 46 0D                         .db #$46, #%00001101
0D0B2 66 0D                         .db #$66, #%00001101
0D0B4 86 0D                         .db #$86, #%00001101
0D0B6 A6 0D                         .db #$A6, #%00001101
0D0B8 C6 0D                         .db #$C6, #%00001101
0D0BA 07 10                         .db #$07, #%00010000
0D0BC 37 0D                         .db #$37, #%00001101
0D0BE 77 0D                         .db #$77, #%00001101
0D0C0 B7 0D                         .db #$B7, #%00001101
0D0C2 28 0D                         .db #$28, #%00001101
0D0C4 48 0D                         .db #$48, #%00001101
0D0C6 68 0D                         .db #$68, #%00001101
0D0C8 88 0D                         .db #$88, #%00001101
0D0CA A8 0D                         .db #$A8, #%00001101
0D0CC C8 0D                         .db #$C8, #%00001101
0D0CE 19 0D                         .db #$19, #%00001101
0D0D0 59 0D                         .db #$59, #%00001101
0D0D2 99 0D                         .db #$99, #%00001101
0D0D4 D9 0D                         .db #$D9, #%00001101
0D0D6 FF                            .db #LEVEL_END
0D0D7                           
0D0D7                           lvl_layout_14:
0D0D7 00 67                         .db #$00, #%01100111
0D0D9 40 67                         .db #$40, #%01100111
0D0DB 80 67                         .db #$80, #%01100111
0D0DD C0 27                         .db #$C0, #%00100111
0D0DF 01 27                         .db #$01, #%00100111
0D0E1 31 C7                         .db #$31, #%11000111
0D0E3 51 C7                         .db #$51, #%11000111
0D0E5 71 C7                         .db #$71, #%11000111
0D0E7 91 C7                         .db #$91, #%11000111
0D0E9 B1 C7                         .db #$B1, #%11000111
0D0EB D1 07                         .db #$D1, #%00000111
0D0ED 02 E7                         .db #$02, #%11100111
0D0EF 06 E7                         .db #$06, #%11100111
0D0F1 13 07                         .db #$13, #%00000111
0D0F3 D3 07                         .db #$D3, #%00000111
0D0F5 15 07                         .db #$15, #%00000111
0D0F7 35 07                         .db #$35, #%00000111
0D0F9 55 07                         .db #$55, #%00000111
0D0FB 75 07                         .db #$75, #%00000111
0D0FD 95 07                         .db #$95, #%00000111
0D0FF B5 07                         .db #$B5, #%00000111
0D101 D5 07                         .db #$D5, #%00000111
0D103 17 07                         .db #$17, #%00000111
0D105 37 C7                         .db #$37, #%11000111
0D107 57 C7                         .db #$57, #%11000111
0D109 77 C7                         .db #$77, #%11000111
0D10B 97 C7                         .db #$97, #%11000111
0D10D B7 C7                         .db #$B7, #%11000111
0D10F D7 07                         .db #$D7, #%00000111
0D111 19 07                         .db #$19, #%00000111
0D113 D9 07                         .db #$D9, #%00000111
0D115 22 4C                         .db #$22, #%01001100
0D117 62 4C                         .db #$62, #%01001100
0D119 A2 4C                         .db #$A2, #%01001100
0D11B 24 0C                         .db #$24, #%00001100
0D11D 44 0C                         .db #$44, #%00001100
0D11F 64 0C                         .db #$64, #%00001100
0D121 84 0C                         .db #$84, #%00001100
0D123 A4 0C                         .db #$A4, #%00001100
0D125 C4 0C                         .db #$C4, #%00001100
0D127 26 0C                         .db #$26, #%00001100
0D129 46 0C                         .db #$46, #%00001100
0D12B 66 0C                         .db #$66, #%00001100
0D12D 86 0C                         .db #$86, #%00001100
0D12F A6 0C                         .db #$A6, #%00001100
0D131 C6 0C                         .db #$C6, #%00001100
0D133 28 4C                         .db #$28, #%01001100
0D135 68 4C                         .db #$68, #%01001100
0D137 A8 4C                         .db #$A8, #%01001100
0D139 32 04                         .db #$32, #%00000100
0D13B 52 04                         .db #$52, #%00000100
0D13D 72 04                         .db #$72, #%00000100
0D13F 92 04                         .db #$92, #%00000100
0D141 B2 04                         .db #$B2, #%00000100
0D143 38 04                         .db #$38, #%00000100
0D145 58 04                         .db #$58, #%00000100
0D147 78 04                         .db #$78, #%00000100
0D149 98 04                         .db #$98, #%00000100
0D14B B8 04                         .db #$B8, #%00000100
0D14D FF                            .db #LEVEL_END
0D14E                           
0D14E                           lvl_layout_15:
0D14E 00 7A                         .db #$00, #%01111010
0D150 40 7A                         .db #$40, #%01111010
0D152 80 7A                         .db #$80, #%01111010
0D154 C0 3A                         .db #$C0, #%00111010
0D156 31 04                         .db #$31, #%00000100
0D158 51 04                         .db #$51, #%00000100
0D15A 81 04                         .db #$81, #%00000100
0D15C A1 04                         .db #$A1, #%00000100
0D15E 05 E4                         .db #$05, #%11100100
0D160 15 64                         .db #$15, #%01100100
0D162 55 64                         .db #$55, #%01100100
0D164 95 64                         .db #$95, #%01100100
0D166 D5 E4                         .db #$D5, #%11100100
0D168 26 04                         .db #$26, #%00000100
0D16A 46 44                         .db #$46, #%01000100
0D16C 76 64                         .db #$76, #%01100100
0D16E C6 04                         .db #$C6, #%00000100
0D170 17 04                         .db #$17, #%00000100
0D172 37 64                         .db #$37, #%01100100
0D174 77 44                         .db #$77, #%01000100
0D176 B7 04                         .db #$B7, #%00000100
0D178 18 64                         .db #$18, #%01100100
0D17A 58 64                         .db #$58, #%01100100
0D17C 98 64                         .db #$98, #%01100100
0D17E FF                            .db #LEVEL_END
0D17F                           
0D17F                           lvl_layout_16:
0D17F 10 E1                         .db #$10, #%11100001
0D181 20 9A                         .db #$20, #%10011010
0D183 30 E1                         .db #$30, #%11100001
0D185 40 E1                         .db #$40, #%11100001
0D187 50 E1                         .db #$50, #%11100001
0D189 60 C1                         .db #$60, #%11000001
0D18B 70 E1                         .db #$70, #%11100001
0D18D 80 E1                         .db #$80, #%11100001
0D18F 90 E1                         .db #$90, #%11100001
0D191 A0 61                         .db #$A0, #%01100001
0D193 21 C1                         .db #$21, #%11000001
0D195 A1 1A                         .db #$A1, #%00011010
0D197 B1 41                         .db #$B1, #%01000001
0D199 A2 E1                         .db #$A2, #%11100001
0D19B B2 E1                         .db #$B2, #%11100001
0D19D C2 1A                         .db #$C2, #%00011010
0D19F D2 E1                         .db #$D2, #%11100001
0D1A1 63 1A                         .db #$63, #%00011010
0D1A3 C3 C1                         .db #$C3, #%11000001
0D1A5 14 61                         .db #$14, #%01100001
0D1A7 54 61                         .db #$54, #%01100001
0D1A9 94 C1                         .db #$94, #%11000001
0D1AB 15 61                         .db #$15, #%01100001
0D1AD 55 41                         .db #$55, #%01000001
0D1AF 85 1A                         .db #$85, #%00011010
0D1B1 16 41                         .db #$16, #%01000001
0D1B3 46 1A                         .db #$46, #%00011010
0D1B5 56 61                         .db #$56, #%01100001
0D1B7 A6 61                         .db #$A6, #%01100001
0D1B9 17 67                         .db #$17, #%01100111
0D1BB 57 67                         .db #$57, #%01100111
0D1BD 97 67                         .db #$97, #%01100111
0D1BF D7 07                         .db #$D7, #%00000111
0D1C1 28 41                         .db #$28, #%01000001
0D1C3 58 61                         .db #$58, #%01100001
0D1C5 A8 41                         .db #$A8, #%01000001
0D1C7 18 11                         .db #$18, #%00010001
0D1C9 38 11                         .db #$38, #%00010001
0D1CB 98 11                         .db #$98, #%00010001
0D1CD B8 11                         .db #$B8, #%00010001
0D1CF D8 11                         .db #$D8, #%00010001
0D1D1 59 09                         .db #$59, #%00001001
0D1D3 FF                            .db #LEVEL_END
0D1D4                           
0D1D4                           lvl_layout_17:
0D1D4 10 EA                         .db #$10, #%11101010
0D1D6 20 E2                         .db #$20, #%11100010
0D1D8 30 62                         .db #$30, #%01100010
0D1DA 70 02                         .db #$70, #%00000010
0D1DC 80 6A                         .db #$80, #%01101010
0D1DE 90 22                         .db #$90, #%00100010
0D1E0 01 AA                         .db #$01, #%10101010
0D1E2 31 6A                         .db #$31, #%01101010
0D1E4 81 2A                         .db #$81, #%00101010
0D1E6 A1 02                         .db #$A1, #%00000010
0D1E8 C1 02                         .db #$C1, #%00000010
0D1EA D1 0A                         .db #$D1, #%00001010
0D1EC 32 EA                         .db #$32, #%11101010
0D1EE 42 6A                         .db #$42, #%01101010
0D1F0 62 02                         .db #$62, #%00000010
0D1F2 92 6A                         .db #$92, #%01101010
0D1F4 D2 E2                         .db #$D2, #%11100010
0D1F6 43 1A                         .db #$43, #%00011010
0D1F8 53 CA                         .db #$53, #%11001010
0D1FA 73 02                         .db #$73, #%00000010
0D1FC 83 4A                         .db #$83, #%01001010
0D1FE B3 CA                         .db #$B3, #%11001010
0D200 C3 EA                         .db #$C3, #%11101010
0D202 04 0A                         .db #$04, #%00001010
0D204 14 A2                         .db #$14, #%10100010
0D206 24 AA                         .db #$24, #%10101010
0D208 44 AA                         .db #$44, #%10101010
0D20A 64 6A                         .db #$64, #%01101010
0D20C 65 6A                         .db #$65, #%01101010
0D20E A5 AA                         .db #$A5, #%10101010
0D210 06 EA                         .db #$06, #%11101010
0D212 16 62                         .db #$16, #%01100010
0D214 66 22                         .db #$66, #%00100010
0D216 86 2A                         .db #$86, #%00101010
0D218 17 42                         .db #$17, #%01000010
0D21A 47 12                         .db #$47, #%00010010
0D21C 57 6A                         .db #$57, #%01101010
0D21E 97 4A                         .db #$97, #%01001010
0D220 A7 02                         .db #$A7, #%00000010
0D222 18 02                         .db #$18, #%00000010
0D224 28 0A                         .db #$28, #%00001010
0D226 38 22                         .db #$38, #%00100010
0D228 68 2A                         .db #$68, #%00101010
0D22A 88 62                         .db #$88, #%01100010
0D22C C8 0A                         .db #$C8, #%00001010
0D22E D8 02                         .db #$D8, #%00000010
0D230 19 2A                         .db #$19, #%00101010
0D232 39 2A                         .db #$39, #%00101010
0D234 69 42                         .db #$69, #%01000010
0D236 99 2A                         .db #$99, #%00101010
0D238 B9 42                         .db #$B9, #%01000010
0D23A FF                            .db #LEVEL_END
0D23B                           
0D23B                           lvl_layout_18:
0D23B 00 12                         .db #$00, #%00010010
0D23D 40 1A                         .db #$40, #%00011010
0D23F 50 11                         .db #$50, #%00010001
0D241 70 1A                         .db #$70, #%00011010
0D243 80 10                         .db #$80, #%00010000
0D245 D0 13                         .db #$D0, #%00010011
0D247 01 1A                         .db #$01, #%00011010
0D249 22 15                         .db #$22, #%00010101
0D24B A2 1A                         .db #$A2, #%00011010
0D24D B2 14                         .db #$B2, #%00010100
0D24F 03 67                         .db #$03, #%01100111
0D251 43 67                         .db #$43, #%01100111
0D253 83 67                         .db #$83, #%01100111
0D255 24 09                         .db #$24, #%00001001
0D257 74 0D                         .db #$74, #%00001101
0D259 C4 0A                         .db #$C4, #%00001010
0D25B 05 A7                         .db #$05, #%10100111
0D25D 45 27                         .db #$45, #%00100111
0D25F 95 27                         .db #$95, #%00100111
0D261 16 C7                         .db #$16, #%11000111
0D263 36 67                         .db #$36, #%01100111
0D265 86 67                         .db #$86, #%01100111
0D267 D6 07                         .db #$D6, #%00000111
0D269 07 A3                         .db #$07, #%10100011
0D26B 27 23                         .db #$27, #%00100011
0D26D 47 C7                         .db #$47, #%11000111
0D26F 57 A0                         .db #$57, #%10100000
0D271 67 A7                         .db #$67, #%10100111
0D273 77 20                         .db #$77, #%00100000
0D275 97 C7                         .db #$97, #%11000111
0D277 A7 A4                         .db #$A7, #%10100100
0D279 B7 A7                         .db #$B7, #%10100111
0D27B C7 24                         .db #$C7, #%00100100
0D27D 28 0B                         .db #$28, #%00001011
0D27F 38 A3                         .db #$38, #%10100011
0D281 78 08                         .db #$78, #%00001000
0D283 88 A3                         .db #$88, #%10100011
0D285 C8 0C                         .db #$C8, #%00001100
0D287 D8 A4                         .db #$D8, #%10100100
0D289 09 43                         .db #$09, #%01000011
0D28B 59 40                         .db #$59, #%01000000
0D28D A9 44                         .db #$A9, #%01000100
0D28F FF                            .db #LEVEL_END
0D290                           
0D290                           lvl_layout_19:
0D290 11 A8                         .db #$11, #%10101000
0D292 21 68                         .db #$21, #%01101000
0D294 81 28                         .db #$81, #%00101000
0D296 B1 48                         .db #$B1, #%01001000
0D298 22 48                         .db #$22, #%01001000
0D29A 62 68                         .db #$62, #%01101000
0D29C B2 28                         .db #$B2, #%00101000
0D29E 23 28                         .db #$23, #%00101000
0D2A0 83 28                         .db #$83, #%00101000
0D2A2 B3 28                         .db #$B3, #%00101000
0D2A4 04 E8                         .db #$04, #%11101000
0D2A6 24 08                         .db #$24, #%00001000
0D2A8 44 08                         .db #$44, #%00001000
0D2AA 64 E8                         .db #$64, #%11101000
0D2AC 84 E8                         .db #$84, #%11101000
0D2AE C4 A8                         .db #$C4, #%10101000
0D2B0 D4 E8                         .db #$D4, #%11101000
0D2B2 15 48                         .db #$15, #%01001000
0D2B4 55 C8                         .db #$55, #%11001000
0D2B6 75 C8                         .db #$75, #%11001000
0D2B8 A5 08                         .db #$A5, #%00001000
0D2BA 36 08                         .db #$36, #%00001000
0D2BC B6 08                         .db #$B6, #%00001000
0D2BE 27 48                         .db #$27, #%01001000
0D2C0 97 28                         .db #$97, #%00101000
0D2C2 C7 08                         .db #$C7, #%00001000
0D2C4 09 61                         .db #$09, #%01100001
0D2C6 19 11                         .db #$19, #%00010001
0D2C8 49 61                         .db #$49, #%01100001
0D2CA 89 31                         .db #$89, #%00110001
0D2CC A9 61                         .db #$A9, #%01100001
0D2CE FF                            .db #LEVEL_END
0D2CF                           
0D2CF                           lvl_layout_20:
0D2CF 00 60                         .db #$00, #%01100000
0D2D1 10 1A                         .db #$10, #%00011010
0D2D3 40 A7                         .db #$40, #%10100111
0D2D5 50 20                         .db #$50, #%00100000
0D2D7 70 1A                         .db #$70, #%00011010
0D2D9 80 40                         .db #$80, #%01000000
0D2DB B0 1A                         .db #$B0, #%00011010
0D2DD C0 20                         .db #$C0, #%00100000
0D2DF 01 40                         .db #$01, #%01000000
0D2E1 31 1A                         .db #$31, #%00011010
0D2E3 A1 40                         .db #$A1, #%01000000
0D2E5 D1 1A                         .db #$D1, #%00011010
0D2E7 43 67                         .db #$43, #%01100111
0D2E9 83 47                         .db #$83, #%01000111
0D2EB 44 A7                         .db #$44, #%10100111
0D2ED 54 25                         .db #$54, #%00100101
0D2EF 94 08                         .db #$94, #%00001000
0D2F1 A4 A7                         .db #$A4, #%10100111
0D2F3 55 05                         .db #$55, #%00000101
0D2F5 65 08                         .db #$65, #%00001000
0D2F7 06 27                         .db #$06, #%00100111
0D2F9 36 67                         .db #$36, #%01100111
0D2FB 76 28                         .db #$76, #%00101000
0D2FD A6 27                         .db #$A6, #%00100111
0D2FF D6 07                         .db #$D6, #%00000111
0D301 A7 A7                         .db #$A7, #%10100111
0D303 08 60                         .db #$08, #%01100000
0D305 09 60                         .db #$09, #%01100000
0D307 18 A7                         .db #$18, #%10100111
0D309 48 A7                         .db #$48, #%10100111
0D30B 58 47                         .db #$58, #%01000111
0D30D 88 27                         .db #$88, #%00100111
0D30F B8 20                         .db #$B8, #%00100000
0D311 D8 1A                         .db #$D8, #%00011010
0D313 59 15                         .db #$59, #%00010101
0D315 69 60                         .db #$69, #%01100000
0D317 A9 60                         .db #$A9, #%01100000
0D319 FF                            .db #LEVEL_END
0D31A                           
0D31A                           lvl_layout_21:
0D31A 00 13                         .db #$00, #%00010011
0D31C 10 11                         .db #$10, #%00010001
0D31E 20 67                         .db #$20, #%01100111
0D320 60 67                         .db #$60, #%01100111
0D322 A0 47                         .db #$A0, #%01000111
0D324 D0 15                         .db #$D0, #%00010101
0D326 32 63                         .db #$32, #%01100011
0D328 72 05                         .db #$72, #%00000101
0D32A 82 43                         .db #$82, #%01000011
0D32C B2 43                         .db #$B2, #%01000011
0D32E 33 03                         .db #$33, #%00000011
0D330 43 2A                         .db #$43, #%00101010
0D332 63 7A                         .db #$63, #%01111010
0D334 73 2A                         .db #$73, #%00101010
0D336 A3 7A                         .db #$A3, #%01111010
0D338 34 63                         .db #$34, #%01100011
0D33A 74 63                         .db #$74, #%01100011
0D33C B4 43                         .db #$B4, #%01000011
0D33E 06 63                         .db #$06, #%01100011
0D340 46 63                         .db #$46, #%01100011
0D342 86 63                         .db #$86, #%01100011
0D344 C6 C3                         .db #$C6, #%11000011
0D346 07 7A                         .db #$07, #%01111010
0D348 47 7A                         .db #$47, #%01111010
0D34A 67 0A                         .db #$67, #%00001010
0D34C 87 7A                         .db #$87, #%01111010
0D34E 08 13                         .db #$08, #%00010011
0D350 18 43                         .db #$18, #%01000011
0D352 48 63                         .db #$48, #%01100011
0D354 88 63                         .db #$88, #%01100011
0D356 FF                            .db #LEVEL_END
0D357                           
0D357                           lvl_layout_22:
0D357 00 7A                         .db #$00, #%01111010
0D359 40 7A                         .db #$40, #%01111010
0D35B 80 7A                         .db #$80, #%01111010
0D35D C0 3A                         .db #$C0, #%00111010
0D35F 13 67                         .db #$13, #%01100111
0D361 83 A7                         .db #$83, #%10100111
0D363 B3 07                         .db #$B3, #%00000111
0D365 14 07                         .db #$14, #%00000111
0D367 44 07                         .db #$44, #%00000111
0D369 A4 07                         .db #$A4, #%00000111
0D36B 15 A5                         .db #$15, #%10100101
0D36D 45 A5                         .db #$45, #%10100101
0D36F 85 25                         .db #$85, #%00100101
0D371 86 05                         .db #$86, #%00000101
0D373 A6 05                         .db #$A6, #%00000101
0D375 17 11                         .db #$17, #%00010001
0D377 47 A1                         .db #$47, #%10100001
0D379 87 A1                         .db #$87, #%10100001
0D37B B7 A1                         .db #$B7, #%10100001
0D37D 18 41                         .db #$18, #%01000001
0D37F 68 01                         .db #$68, #%00000001
0D381 D8 01                         .db #$D8, #%00000001
0D383 FF                            .db #LEVEL_END
0D384                           
0D384                           lvl_layout_23:
0D384 00 71                         .db #$00, #%01110001
0D386 40 11                         .db #$40, #%00010001
0D388 50 43                         .db #$50, #%01000011
0D38A 80 D1                         .db #$80, #%11010001
0D38C 90 E3                         .db #$90, #%11100011
0D38E A0 63                         .db #$A0, #%01100011
0D390 01 63                         .db #$01, #%01100011
0D392 41 63                         .db #$41, #%01100011
0D394 A1 63                         .db #$A1, #%01100011
0D396 02 63                         .db #$02, #%01100011
0D398 42 63                         .db #$42, #%01100011
0D39A 62 11                         .db #$62, #%00010001
0D39C A2 67                         .db #$A2, #%01100111
0D39E 04 63                         .db #$04, #%01100011
0D3A0 44 23                         .db #$44, #%00100011
0D3A2 64 D1                         .db #$64, #%11010001
0D3A4 74 E3                         .db #$74, #%11100011
0D3A6 84 F1                         .db #$84, #%11110001
0D3A8 94 E3                         .db #$94, #%11100011
0D3AA A4 C7                         .db #$A4, #%11000111
0D3AC B4 23                         .db #$B4, #%00100011
0D3AE 05 63                         .db #$05, #%01100011
0D3B0 45 23                         .db #$45, #%00100011
0D3B2 06 71                         .db #$06, #%01110001
0D3B4 46 11                         .db #$46, #%00010001
0D3B6 56 E3                         .db #$56, #%11100011
0D3B8 D6 07                         .db #$D6, #%00000111
0D3BA 17 D1                         .db #$17, #%11010001
0D3BC 27 43                         .db #$27, #%01000011
0D3BE 67 D1                         .db #$67, #%11010001
0D3C0 A7 C7                         .db #$A7, #%11000111
0D3C2 C7 A7                         .db #$C7, #%10100111
0D3C4 D7 B3                         .db #$D7, #%10110011
0D3C6 28 43                         .db #$28, #%01000011
0D3C8 78 43                         .db #$78, #%01000011
0D3CA 29 43                         .db #$29, #%01000011
0D3CC 79 43                         .db #$79, #%01000011
0D3CE FF                           .db #LEVEL_END
0D3CF                           
0D3CF                           lvl_layout_24:
0D3CF 02 67                         .db #$02, #%01100111
0D3D1 42 67                         .db #$42, #%01100111
0D3D3 82 67                         .db #$82, #%01100111
0D3D5 05 67                         .db #$05, #%01100111
0D3D7 45 67                         .db #$45, #%01100111
0D3D9 85 67                         .db #$85, #%01100111
0D3DB 08 67                         .db #$08, #%01100111
0D3DD 48 67                         .db #$48, #%01100111
0D3DF 88 67                         .db #$88, #%01100111
0D3E1 30 E7                         .db #$30, #%11100111
0D3E3 70 E7                         .db #$70, #%11100111
0D3E5 B0 E7                         .db #$B0, #%11100111
0D3E7 34 E7                         .db #$34, #%11100111
0D3E9 74 E7                         .db #$74, #%11100111
0D3EB B4 E7                         .db #$B4, #%11100111
0D3ED 20 13                         .db #$20, #%00010011
0D3EF 40 10                         .db #$40, #%00010000
0D3F1 80 02                         .db #$80, #%00000010
0D3F3 41 05                         .db #$41, #%00000101
0D3F5 B1 09                         .db #$B1, #%00001001
0D3F7 02 09                         .db #$02, #%00001001
0D3F9 52 0C                         .db #$52, #%00001100
0D3FB 13 11                         .db #$13, #%00010001
0D3FD 33 04                         .db #$33, #%00000100
0D3FF 74 0C                         .db #$74, #%00001100
0D401 B4 08                         .db #$B4, #%00001000
0D403 15 09                         .db #$15, #%00001001
0D405 55 0C                         .db #$55, #%00001100
0D407 95 0C                         .db #$95, #%00001100
0D409 47 03                         .db #$47, #%00000011
0D40B A7 12                         .db #$A7, #%00010010
0D40D 18 15                         .db #$18, #%00010101
0D40F 09 05                         .db #$09, #%00000101
0D411 19 03                         .db #$19, #%00000011
0D413 FF                            .db #LEVEL_END
0D414                           
0D414                           lvl_layout_25:
0D414 00 12                         .db #$00, #%00010010
0D416 10 63                         .db #$10, #%01100011
0D418 60 63                         .db #$60, #%01100011
0D41A A0 07                         .db #$A0, #%00000111
0D41C 01 11                         .db #$01, #%00010001
0D41E A1 02                         .db #$A1, #%00000010
0D420 02 67                         .db #$02, #%01100111
0D422 42 07                         .db #$42, #%00000111
0D424 62 67                         .db #$62, #%01100111
0D426 A2 C7                         .db #$A2, #%11000111
0D428 03 61                         .db #$03, #%01100001
0D42A 43 01                         .db #$43, #%00000001
0D42C 63 61                         .db #$63, #%01100001
0D42E A6 E7                         .db #$A6, #%11100111
0D430 B6 47                         .db #$B6, #%01000111
0D432 C6 01                         .db #$C6, #%00000001
0D434 B7 42                         .db #$B7, #%01000010
0D436 B8 42                         .db #$B8, #%01000010
0D438 C8 0A                         .db #$C8, #%00001010
0D43A 09 7A                         .db #$09, #%01111010
0D43C 49 7A                         .db #$49, #%01111010
0D43E 89 3A                         .db #$89, #%00111010
0D440 B9 42                         .db #$B9, #%01000010
0D442 FF                            .db #LEVEL_END
0D443                           
0D443                           ;; Level layout address pointers
0D443                           tbl_lvl_layout_hi:
0D443 CD CD CD CD CE                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D448 CE CF CF CF CF                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D44D D0 D0 D0 D0 D1                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D452 D1 D1 D2 D2 D2                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D457 D3 D3 D3 D3 D4                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D45C                           
0D45C                           tbl_lvl_layout_lo:
0D45C 64 7F B4 E7 58                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D461 93 1C 5D 94 D7                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D466 06 59 84 D7 4E                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D46B 7F D4 3B 90 CF                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D470 1A 57 84 CF 14                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D475                           
0D475                           ;; Ball start position (#$YX)
0D475                           tbl_lvl_ball_startpos:
0D475 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D47A 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D47F 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D484 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D489 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D48E                               
0D48E                           ;; Ball start direction, color and tile score
0D48E                           ;; #% ccc v tttt
0D48E                           ;;    ||| | ++++-- tile score
0D48E                           ;;    ||| +------- vertical direction, up (0) or down
0D48E                           ;;    +++--------- color (CBRYGM)
0D48E                           tbl_lvl_ball_init:
0D48E 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D493 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D498 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D49D 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D4A2 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D4A7                           
0D4A7                           
0D4A7                           
0D4A7                           ;; Helper table to multiply values by 16
0D4A7                           tbl_Times16:
0D4A7 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D4AF 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D4B7                               
0D4B7                           
0D4B7                           ;; Helper table to multiply values by 64
0D4B7                           tbl_Times64:
0D4B7 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D4BB                           
0D4BB                           
0D4BB                           ;; Metatile ID to CHR data mapper
0D4BB                           tbl_GametileTopLeft:
0D4BB 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D4C5                           
0D4C5                           tbl_GametileTopRight:
0D4C5 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D4CF                           
0D4CF                           tbl_GametileBottomLeft:
0D4CF 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D4D9                           
0D4D9                           tbl_GametileBottomRight:
0D4D9 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D4E3                           
0D4E3                           ;; Metatile ID to RAM byte data mapper
0D4E3                           tbl_GameTileRamByte:
0D4E3 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D4E8                           
0D4E8                           ;; HUD text data
0D4E8                           tbl_HudText:
0D4E8 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D4F0 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D4F7 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D4FF 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D504                           
0D504                           ;; NMI handler
0D504                           NMI:
0D504                               .include "interrupt/nmi.asm"
0D504                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D504                           ;;
0D504                           ;; include/nmi.asm
0D504                           ;;
0D504                           ;; Non-maskable interrupt script. This script is being executed
0D504                           ;; when vBlank hits.
0D504                           ;;
0D504                           ;;
0D504                           
0D504                               ;; Preserve accumulator through stack
0D504 48                            PHA
0D505                           
0D505                               ;; Should NMI be skipped?
0D505 A5 13                         LDA skip_nmi
0D507 F0 03                         BEQ +
0D509 4C 04 D6                          JMP +skip_nmi
0D50C                               +
0D50C                           
0D50C                               ;; When in NMI, skip additional NMI requests
0D50C A9 01                         LDA #$01
0D50E 85 13                         STA skip_nmi
0D510                           
0D510                               ;; Preserve X, Y, and PC through stack
0D510 8A                            TXA
0D511 48                            PHA
0D512 98                            TYA
0D513 48                            PHA
0D514 08                            PHP
0D515                               
0D515                               ;; Check forced NMI skip
0D515 A5 14                         LDA force_skip_nmi
0D517 F0 03                         BEQ +
0D519 4C F3 D5                          JMP +force_skip_nmi
0D51C                               +
0D51C                           
0D51C                               ;; Update PPU mask
0D51C                               ;LDA #$00
0D51C                               ;STA PPU_CTRL
0D51C A5 12                         LDA soft_ppu_mask
0D51E 8D 01 20                      STA PPU_MASK
0D521                               
0D521                               
0D521                               ;; Additional PPU updates go here
0D521                               .include "game/interrupt/nmi.asm"
0D521                           
0D521                               ;; Check if ppu_buffer needs updating
0D521 A5 38                         LDA ppu_buffer_update
0D523 D0 03                         BNE +
0D525 4C 67 D5                          JMP +no_ppu_buffer_update
0D528                               +
0D528                           
0D528                               ;; Reset ppu control register and mask
0D528 A2 00                         LDX #$00
0D52A 8E 00 20                      STX PPU_CTRL
0D52D 8E 01 20                      STX PPU_MASK
0D530                           
0D530                               ;; Set up loop
0D530                               -
0D530                                   ;; Reset hi/lo latch
0D530 2C 02 20                          BIT PPU_STATUS
0D533                           
0D533                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D533 BD 00 03                          LDA ppu_buffer,x
0D536 8D 06 20                          STA PPU_ADDR
0D539 E8                                INX
0D53A BD 00 03                          LDA ppu_buffer,x
0D53D 8D 06 20                          STA PPU_ADDR
0D540                           
0D540                                   ;; Write ppu_buffer data to PPU_ADDR
0D540 E8                                INX
0D541 BD 00 03                          LDA ppu_buffer,x
0D544 8D 07 20                          STA PPU_DATA
0D547                           
0D547                                   ;; Check if updating is done (eg. X is at pointer)
0D547 E8                                INX
0D548 E4 39                             CPX ppu_buffer_pointer
0D54A F0 03                             BEQ +
0D54C 4C 30 D5                      JMP -
0D54F                           +
0D54F                           
0D54F                               ;; Reset ppu buffer update and pointer
0D54F A9 00                         LDA #$00
0D551 85 38                         STA ppu_buffer_update
0D553 85 39                         STA ppu_buffer_pointer
0D555                               
0D555                               ;; Reset scrolling position
0D555 8D 05 20                      STA PPU_SCROLL
0D558 8D 05 20                      STA PPU_SCROLL
0D55B                           
0D55B                               ;; Restore ppu control register and mask
0D55B A9 90                         LDA #%10010000
0D55D 8D 00 20                      STA PPU_CTRL
0D560 A5 12                         LDA soft_ppu_mask
0D562 8D 01 20                      STA PPU_MASK
0D565 A9 00                         LDA #$00
0D567                           
0D567                           ;; Continue other NMI stuff
0D567                           +no_ppu_buffer_update:
0D567                           
0D567                               ;; Reset sprite RAM, draw sprites
0D567 8D 03 20                      STA OAM_ADDR
0D56A A9 02                         LDA #$02
0D56C 8D 14 40                      STA OAM_DMA
0D56F                           
0D56F                               ;; Decrease explosion frame counters
0D56F A0 04                         LDY #MAX_ANIMATIONS
0D571 A2 00                         LDX #$00
0D573                               -
0D573 BD 30 03                          LDA explosion_framecounter,x
0D576 F0 03                             BEQ +
0D578 DE 30 03                              DEC explosion_framecounter,x
0D57B                                   +
0D57B E8                                INX
0D57C 88                                DEY
0D57D F0 03                             BEQ +done        
0D57F 4C 73 D5                      JMP -
0D582                           +done:
0D582                               
0D582                               ;; Decrease nudge counter
0D582 A5 3C                         LDA nudge_counter
0D584 F0 02                         BEQ +
0D586 C6 3C                             DEC nudge_counter
0D588                               +
0D588                               
0D588                               ;; Test background noise
0D588 A5 37                         LDA screen_mode
0D58A 29 01                         AND #IS_GAME_SCREEN
0D58C F0 21                         BEQ +
0D58E                                   .include "game/include/main/background_sound.asm"
0D58E                               ;; At random times, set max_noise period to $03-$0A
0D58E A5 3F                         LDA max_noise
0D590 D0 1D                         BNE +
0D592 20 C9 C3                          JSR sub_GetRandomNumber
0D595 29 EF                             AND #%11101111
0D597 D0 16                             BNE +
0D599                                   
0D599 A5 15                             LDA frame_counter
0D59B 85 16                             STA random_seed
0D59D 20 C9 C3                          JSR sub_GetRandomNumber
0D5A0 29 07                             AND #$07
0D5A2 69 03                             ADC #$03
0D5A4 85 3F                             STA max_noise
0D5A6 A9 01                             LDA #$01
0D5A8 85 40                             STA sweep_noise
0D5AA A9 34                             LDA #$34
0D5AC 8D 0C 40                          STA NOISE_VOLUME
0D5AF                           
0D5AF                               +
0D5AF                           
0D5AF                               ;; if sweep noise = $00: constant noise
0D5AF                               ;; else if sweep noise > $80: decrease pitch
0D5AF                               ;; else: inrease pitch
0D5AF A5 40                         LDA sweep_noise
0D5B1 F0 18                         BEQ +constantNoise
0D5B3 30 2A                         BMI +decreaseNoise
0D5B5                           
0D5B5                           ;; Sweep noise up to max noise pitch
0D5B5                           +increaseNoise:
0D5B5 C6 41                         DEC current_noise
0D5B7 A5 41                         LDA current_noise
0D5B9 8D 0E 40                      STA NOISE_PERIOD
0D5BC C5 3F                         CMP max_noise
0D5BE D0 08                         BNE +
0D5C0 A9 00                             LDA #$00
0D5C2 85 40                             STA sweep_noise
0D5C4 A9 0A                             LDA #$0A
0D5C6 85 42                             STA noise_counter
0D5C8                               +
0D5C8 4C F3 D5                      JMP +endNoise
0D5CB                           
0D5CB                           ;; Keep noise at constant pitch
0D5CB                           +constantNoise:
0D5CB A5 3F                         LDA max_noise
0D5CD F0 24                         BEQ +endNoise
0D5CF                           
0D5CF A5 42                         LDA noise_counter
0D5D1 D0 07                         BNE +
0D5D3 A9 80                             LDA #$80
0D5D5 85 40                             STA sweep_noise
0D5D7 4C F3 D5                          JMP +endNoise
0D5DA                               +
0D5DA C6 42                         DEC noise_counter
0D5DC 4C F3 D5                      JMP +endNoise
0D5DF                           
0D5DF                           ;; Sweep noise down to initial pitch
0D5DF                           +decreaseNoise:
0D5DF E6 41                         INC current_noise
0D5E1 A5 41                         LDA current_noise
0D5E3 8D 0E 40                      STA NOISE_PERIOD
0D5E6 C9 0E                         CMP #$0E
0D5E8 D0 09                         BNE +endNoise
0D5EA                           
0D5EA 20 59 C4                      JSR sub_BackgroundNoise
0D5ED A9 00                         LDA #$00
0D5EF 85 3F                         STA max_noise
0D5F1 85 40                         STA sweep_noise
0D5F3                           
0D5F3                           +endNoise:
0D5F3                           
0D5F3                               +
0D5F3                           
0D5F3                           
0D5F3                           
0D5F3                           ;; This is what happens when we forced nmi skip
0D5F3                           +force_skip_nmi:
0D5F3                           
0D5F3                               ;; Increase frame counters
0D5F3 E6 15                         INC frame_counter
0D5F5                           
0D5F5                               ;; reset ball_update_position
0D5F5 A9 00                         LDA #$00
0D5F7 85 35                         STA ball_update_position
0D5F9                           
0D5F9                               ;; Don't skip next NMI request
0D5F9 A9 00                         LDA #$00
0D5FB 85 13                         STA skip_nmi
0D5FD 85 43                         STA check_nmi
0D5FF                           
0D5FF                               ;; Restore X, Y and PC from stack
0D5FF 28                            PLP
0D600 68                            PLA
0D601 A8                            TAY
0D602 68                            PLA
0D603 AA                            TAX
0D604                           
0D604                           +skip_nmi:
0D604                               ;; Restore accumulator from stack
0D604 68                            PLA
0D605                           
0D605                               ;; Return
0D605 40                            RTI
0D606                           
0D606                           ;; IRQ handler (empty)
0D606                           IRQ:
0D606                               .include "interrupt/irq.asm"
0D606 40                            RTI0D607                           
0D607                           ;; Interrupt vectors
0D607 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 04 D5                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 06 D6                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
