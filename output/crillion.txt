                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
                                ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
                                ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
                                ;;
                                ;;  A 2023 NES port of the Commodore 64 game "Crillion"
                                ;;
                                ;;  Design, sound, graphics and program by Oliver Kirwa
                                ;;  © 1987,1988
                                ;;
                                ;;  NES port by Kevin81 © 2023
                                ;;
                                ;;
                                
                                
                                ;; Project constants and macros
                                .include "include/constants.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/constants.asm
                                ;;
                                ;; List of general constant declarations, like addresses and
                                ;; input button values, for example. These constants should
                                ;; make developing easier and code better readable.
                                ;;
                                ;;
                                
                                ;; Cartridge RAM/ROM constants
                                ADDR_ZEROPAGE  = $0000
                                ADDR_SOUNDRAM  = $0100
                                ADDR_SPRITERAM = $0200
                                ADDR_OTHERRAM  = $0300
                                ADDR_STARTBANK = $8000
                                ADDR_ENDBANK   = $C000
                                ADDR_VECTORS   = $FFFA
                                ADDR_CHRROM    = $0000
                                
                                ;; PPU constants
                                PPU_CTRL   = $2000
                                PPU_MASK   = $2001
                                PPU_STATUS = $2002
                                PPU_SCROLL = $2005
                                PPU_ADDR   = $2006
                                PPU_DATA   = $2007
                                
                                ;; Object attribute model addresses
                                OAM_ADDR   = $2003
                                OAM_DATA   = $2004
                                OAM_DMA    = $4014
                                
                                ;; Audio processing unit addresses
                                APU_CTRL   = $4010
                                APU_STATUS = $4015
                                APU_FC     = $4017
                                
                                ;; Joypad input addresses
                                JOYPAD_1   = $4016
                                JOYPAD_2   = $4017
                                
                                ;; Joypad buttons
                                BUTTON_A      = #%10000000
                                BUTTON_B      = #%01000000
                                BUTTON_SELECT = #%00100000
                                BUTTON_START  = #%00010000
                                BUTTON_UP     = #%00001000
                                BUTTON_DOWN   = #%00000100
                                BUTTON_LEFT   = #%00000010
                                BUTTON_RIGHT  = #%00000001
                                
                                ;; Custom game constants
                                .include "game/include/constants.asm"                                ;; Starting address for screen tile RAM
                                ADDR_SCREENTILERAM  = $0400
                                
                                ;; Ball bounding box constants
                                BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
                                BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
                                BALL_TOP     = #$04  ; Top offset of the ball graphic
                                BALL_LEFT    = #$04  ; Left offset of the ball graphic
                                
                                
                                ;; Ball speed (high/low byte), tile and attribute
                                BALL_SPEED_HI = #$02
                                BALL_SPEED_LO = #$30
                                BALL_TILE_CHR = #$01
                                BALL_ATTR     = #%00000000
                                
                                
                                ;; Ball flag helpers
                                BALL_IS_DEAD     = #%00000001
                                KILL_BALL        = #%00000001
                                REVIVE_BALL      = #%11111110
                                NUDGE_BALL_RIGHT = #%00000010
                                NUDGE_BALL_LEFT  = #%11111101
                                BALL_MOVES_DOWN  = #%00000100
                                MOVE_BALL_DOWN   = #%00000100
                                MOVE_BALL_UP     = #%11111011
                                BALL_IS_FROZEN   = #%00010000
                                FREEZE_BALL      = #%00010000
                                UNFREEZE_BALL    = #%11101111
                                
                                
                                ;; Screen load helpers
                                LOAD_INTRO_SCREEN = #%10000000
                                LOAD_GAME_SCREEN  = #%10000001
                                LOAD_WIN_SCREEN   = #%10000010
                                IS_INTRO_SCREEN   = #%00000000
                                IS_GAME_SCREEN    = #%00000001
                                IS_WIN_SCREEN     = #%00000010
                                CHECK_SCREEN_MODE = #%00000011
                                
                                
                                ;; Game area bounds
                                BOUND_TOP       = #$30
                                BOUND_BOTTOM    = #$C8
                                BOUND_LEFT      = #$10
                                BOUND_RIGHT     = #$E8
                                
                                
                                ;; Max number of animations on screen
                                MAX_ANIMATIONS  = #$04
                                
                                
                                ;; Animation data
                                ANIMATION_SPEED = #$04 ; number of frames per animation frame
                                ANIM_SLIDES     = #$0A ; number of slides in an animation
                                
                                
                                ;; Slide data
                                SLIDE_WIDTH     = #$03 ; slide width in tiles
                                SLIDE_SIZE      = #$09 ; total number of tiles in slide
                                
                                
                                ;; Max number of nudge frames
                                NUDGE_FRAMES    = #$03
                                
                                
                                ;; Helper constant for when a level is done loading
                                LEVEL_END       = #$FF
                                
                                
                                ;; Character map
                                _SPACE = #$00
                                _0     = #$01
                                _1     = #$02
                                _2     = #$03
                                _3     = #$04
                                _4     = #$05
                                _5     = #$06
                                _6     = #$07
                                _7     = #$08
                                _8     = #$09
                                _9     = #$0A
                                _A     = #$0B
                                _B     = #$0C
                                _C     = #$0D
                                _D     = #$0E
                                _E     = #$0F
                                _F     = #$10
                                _G     = #$11
                                _H     = #$12
                                _I     = #$13
                                _J     = #$14
                                _K     = #$15
                                _L     = #$16
                                _M     = #$17
                                _N     = #$18
                                _O     = #$19
                                _P     = #$1A
                                _Q     = #$1B
                                _R     = #$1C
                                _S     = #$1D
                                _T     = #$1E
                                _U     = #$1F
                                _V     = #$20
                                _W     = #$21
                                _X     = #$22
                                _Y     = #$23
                                _Z     = #$24
                                _COMMA = #$25
                                _DOT   = #$26
                                _COLON = #$27
                                _COPY  = #$28
                                .include "include/macros.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/macros.asm
                                ;;
                                ;; List of macros to include in the game. Currently none.
                                ;;
                                ;;
                                
                                ;; game-specific macros
                                .include "game/include/macros.asm"
                                ;; additional game-specific macros go here
                                
                                ;; iNES header (can vary per game)
                                .include "game/include/header.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; include/header.asm
                                ;;
                                ;; The iNES header for the game. This tells the hardware /
                                ;; emulator the number of PRG-ROM and CHR-ROM banks, which
                                ;; mapper to use, the mirroring type, and some other ROM info.
                                ;;
                                ;; See https://www.nesdev.org/wiki/INES for more info.
                                ;;
                                ;;
                                
                                    ;; iNES identifier
      4E 45 53 1A                   .db "NES", $1A
                                
                                    ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
      01 01                         .db $01, $01
                                    
                                    ;; Mapper (0, or NROM)
      00                            .db %00000000
      00                            .db %00000000
                                
                                    ;; Add an additional 8 bytes of padding
      00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
                                
                                
                                ;; Zero page RAM
                                .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_lives             .dsb 1   ; number of lives left
0001C                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           
00025                           ;; Update-position check
00025                           ball_update_position   .dsb 1
00026                           
00026                           
00026                           ;; Ball flags
00026                           ;; #% c c c f . v n a
00026                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00026                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00026                           ;;    | | | | | +------ ball moves up (0) or down (1)
00026                           ;;    | | | | +-------- (unused for now)
00026                           ;;    | | | +---------- ball is frozen (not moving)
00026                           ;;    +-+-+------------ ball color (1-6)
00026                           ball_flags             .dsb 1
00027                           
00027                           
00027                           ;; Screen mode
00027                           ;; #% u . . . . . t t
00027                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00027                           ;;    | +-+-+-+-+------------- unused
00027                           ;;    +----------------------- should the screen update
00027                           screen_mode            .dsb 1
00028                           
00028                           
00028                           ;; Start level pointer
00028                           ;; You can start the game at level 1, 5, 9, 13 or 17.
00028                           ;; This is the pointer that tells you at which level to start.
00028                           startlevel_pointer     .dsb 1 
00029                           
00029                           
00029                           ;; PPU buffer variables
00029                           ppu_buffer_update      .dsb 1
0002A                           ppu_buffer_pointer     .dsb 1
0002B                           
0002B                           ;; Pointer to keep track of the number of explosions
0002B                           explosion_pointer      .dsb 1
0002C                           
0002C                           ;; Sprite RAM pointer to keep track of sprites to update
0002C                           sprite_ram_pointer     .dsb 1
0002D                           
0002D                           ;; Nudge counter
0002D                           nudge_counter          .dsb 1
0002E                           
0002E                           ;; Current level
0002E                           current_level          .dsb 1
0002F                           
0002F                               0002F                           .ende
                                
                                ;; Other RAM (must be ENUM'd within)
                                .include "ram/misc.asm"
                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;
                                ;; ram/misc.asm
                                ;;
                                ;; List of additional, non-zeropage RAM variables. Currently
                                ;; empty, but will hold data like the OAM buffer and other,
                                ;; less-often accessed, global variables.
                                ;;
                                ;;
                                
                                
                                    ;; Game specific RAM variables
                                    .include "game/ram/misc.asm"
                                ;; miscellaneous (non-zeropage) ram variables go here
                                
                                .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
                                
                                
                                ;; screen tile data (14x10 metatiles)
                                .enum ADDR_SCREENTILERAM
00400                               tile_type                 .dsb 160
004A0                               tile_attributes           .dsb 64
004E0                           .ende
                                
                                
                                ;; Instantly go to the static bank
                                .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 AB C2                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 AB C2                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 27                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1B                         STA ball_lives
0C053                           
0C053                               ;; Start at level -1 for now, because [START] increments level number
0C053 A9 FF                         LDA #$FF
0C055 85 2E                         STA current_level0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 2C                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 97 C2                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 27                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 27                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 FC C8                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 F9 C8                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 57 C3                      JSR sub_DisableRendering
0C08A 20 98 C3                      JSR sub_JumpToPointer
0C08D 20 6B C3                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 27                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 27                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; CONCEPT SCRIPTS
0C096                               
0C096                               ;; Upon pressing A, an explosion will happen on screen
0C096                               .include "game/test/show_animation.asm"
0C096                               ;; If A button is pressed, initiate explosion
0C096 A5 10                         LDA buttons_pressed
0C098 29 80                         AND #BUTTON_A
0C09A D0 03                         BNE +
0C09C 4C CE C0                          JMP +end
0C09F                               +
0C09F                           
0C09F                               ;; Get most recent slot for explosion
0C09F A6 2B                         LDX explosion_pointer
0C0A1                           
0C0A1                               ;; If 0, use max pointer value
0C0A1 D0 02                         BNE +
0C0A3 A2 04                             LDX #MAX_ANIMATIONS
0C0A5                               +
0C0A5                           
0C0A5                               ;; Decrease pointer by one
0C0A5 CA                            DEX
0C0A6 86 2B                         STX explosion_pointer
0C0A8                           
0C0A8                               ;; Load explosion data into RAM
0C0A8 A9 00                         LDA #$00
0C0AA 9D 34 03                      STA explosion_currentframe,x
0C0AD A9 04                         LDA #ANIMATION_SPEED
0C0AF 9D 30 03                      STA explosion_framecounter,x
0C0B2 20 89 C2                      JSR sub_GetRandomNumber
0C0B5                               ;AND #%11110000
0C0B5 9D 3C 03                      STA explosion_x,x
0C0B8 20 89 C2                      JSR sub_GetRandomNumber
0C0BB                               ;AND #%11110000
0C0BB 9D 40 03                      STA explosion_y,x
0C0BE 20 89 C2                      JSR sub_GetRandomNumber
0C0C1 29 02                         AND #%00000010
0C0C3 18                            CLC
0C0C4 69 01                         ADC #$01
0C0C6 9D 38 03                      STA explosion_attributes,x
0C0C9 A9 01                         LDA #$01
0C0CB 9D 44 03                      STA explosion_active,x
0C0CE                           
0C0CE                           
0C0CE                           +end:
0C0CE                           
0C0CE                               ;; Set up loop
0C0CE A2 00                         LDX #$00
0C0D0                               -loop_load_animation:
0C0D0                                   ;; Check if current animation is active. If not, goto next
0C0D0 BD 44 03                          LDA explosion_active,x
0C0D3 D0 03                             BNE +
0C0D5 4C 6F C1                              JMP +next
0C0D8                                   +
0C0D8                           
0C0D8                                   ;; Check the explosion framecounter
0C0D8 BD 30 03                          LDA explosion_framecounter,x
0C0DB D0 26                             BNE +
0C0DD                                       ;; Framecounter is 0
0C0DD                                       ;; Reset to animation speed
0C0DD A9 04                                 LDA #ANIMATION_SPEED
0C0DF 9D 30 03                              STA explosion_framecounter,x
0C0E2                           
0C0E2                                       ;; Set next animation frame, and check if we're done yet
0C0E2 FE 34 03                              INC explosion_currentframe,x
0C0E5 BD 34 03                              LDA explosion_currentframe,x
0C0E8 C9 0A                                 CMP #ANIM_SLIDES
0C0EA D0 17                                 BNE +
0C0EC                           
0C0EC                                       ;; If we're done, inactivate current explosion, clean
0C0EC                                       ;; up sprite RAM and go to the next one
0C0EC A9 00                                 LDA #$00
0C0EE 9D 44 03                              STA explosion_active,x
0C0F1                                       
0C0F1 A9 09                                 LDA #SLIDE_SIZE
0C0F3 0A                                    ASL
0C0F4 0A                                    ASL
0C0F5 A8                                    TAY
0C0F6 A9 EF                                 LDA #$EF
0C0F8                                       -
0C0F8 88                                        DEY
0C0F9 99 00 02                                  STA ADDR_SPRITERAM,y
0C0FC C0 00                                     CPY #00
0C0FE D0 F8                                 BNE -
0C100                                       
0C100 4C 6F C1                              JMP +next
0C103                                   +
0C103                           
0C103                                   ;; Load (x,y) position in temp variables
0C103 BD 3C 03                          LDA explosion_x,x
0C106 85 01                             STA temp+1
0C108 85 03                             STA temp+3
0C10A BD 40 03                          LDA explosion_y,x
0C10D 85 02                             STA temp+2
0C10F                           
0C10F                                   ;; Load attribute in temp variable
0C10F BD 38 03                          LDA explosion_attributes,x
0C112 85 04                             STA temp+4
0C114                           
0C114                                   ;; Load current frame into Y-register
0C114 BC 34 03                          LDY explosion_currentframe,x
0C117                           
0C117                                   ;; Load current frame ROM address from table
0C117 B9 E3 C8                          LDA explosion_anim_lo,y
0C11A 85 0C                             STA pointer
0C11C B9 D9 C8                          LDA explosion_anim_hi,y
0C11F 85 0D                             STA pointer+1
0C121                           
0C121                                   ;; Save x-register on stack
0C121 8A                                TXA
0C122 48                                PHA
0C123                           
0C123                                   ;; Load sprites into sprite RAM
0C123 A6 2C                             LDX sprite_ram_pointer
0C125 A0 00                             LDY #$00
0C127                           
0C127                                   ;; Prepare (x,y) offset for loop
0C127 84 00                             STY temp
0C129                           
0C129                                   -loop_load_sprite:
0C129                                   
0C129                                       ;; Do not draw empty sprites
0C129 B1 0C                                 LDA (pointer),y
0C12B F0 18                                 BEQ +nextSprite
0C12D                                   
0C12D                                           ;; Add y-position to sprite ram buffer
0C12D A5 02                                     LDA temp+2
0C12F 9D 00 02                                  STA ADDR_SPRITERAM,x
0C132 E8                                        INX
0C133                           
0C133                                           ;; Get tile number from frame ROM address, and
0C133                                           ;; add it to sprite ram buffer
0C133 B1 0C                                     LDA (pointer),y
0C135 9D 00 02                                  STA ADDR_SPRITERAM,x
0C138 E8                                        INX
0C139                           
0C139                                           ;; Add attribute data to sprite ram buffer
0C139 A5 04                                     LDA temp+4
0C13B 9D 00 02                                  STA ADDR_SPRITERAM,x
0C13E E8                                        INX
0C13F                           
0C13F                                           ;; Add x-position to sprite ram buffer
0C13F A5 03                                     LDA temp+3
0C141 9D 00 02                                  STA ADDR_SPRITERAM,x
0C144 E8                                        INX
0C145                           
0C145                                       +nextSprite:
0C145                           
0C145                                       ;; Check if all sprites are done
0C145 C8                                    INY
0C146 C0 09                                 CPY #SLIDE_SIZE
0C148 F0 21                                 BEQ +done
0C14A                           
0C14A                                       ;; Update x value
0C14A A5 03                                 LDA temp+3
0C14C 18                                    CLC
0C14D 69 08                                 ADC #$08
0C14F 85 03                                 STA temp+3
0C151                           
0C151                                       ;; Update temp for x,y position
0C151 E6 00                                 INC temp
0C153 A5 00                                 LDA temp
0C155 C9 03                                 CMP #SLIDE_WIDTH
0C157 D0 0F                                 BNE +
0C159                                           ;; Row is done; reset x-position
0C159 A5 01                                     LDA temp+1
0C15B 85 03                                     STA temp+3
0C15D                           
0C15D                                           ;; Update y-position
0C15D A5 02                                     LDA temp+2
0C15F 18                                        CLC
0C160 69 08                                     ADC #$08
0C162 85 02                                     STA temp+2
0C164                           
0C164                                           ;; Reset row counter
0C164 A9 00                                     LDA #$00
0C166 85 00                                     STA temp
0C168                                       +
0C168                           
0C168 4C 29 C1                          JMP -loop_load_sprite
0C16B                           
0C16B                               +done:
0C16B 86 2C                             STX sprite_ram_pointer
0C16D                           
0C16D                                   ;; Retrieve x-register from stack
0C16D 68                                PLA
0C16E AA                                TAX
0C16F                           
0C16F                               +next:
0C16F                                   ;; Check if all animations have been updated
0C16F E8                                INX
0C170 E0 04                             CPX #MAX_ANIMATIONS
0C172 F0 03                             BEQ +done
0C174                           
0C174 4C D0 C0                      JMP -loop_load_animation
0C177                           +done:
0C177                           
0C177                               ;; On the game screen, the ball should move
0C177 A5 27                         LDA screen_mode
0C179 C9 01                         CMP #IS_GAME_SCREEN
0C17B F0 03                         BEQ +
0C17D 4C 66 C2                          JMP ++
0C180                               +
0C180                               .include "game/test/move_ball.asm"
0C180                           
0C180                               ;; check if position should be updated (ie. has nmi happened yet)
0C180 A5 25                         LDA ball_update_position
0C182 F0 03                         BEQ +
0C184 4C 4A C2                          JMP +skipBallMovement
0C187                               +
0C187                           
0C187                               ;; Check if ball goes up or down
0C187 A5 26                         LDA ball_flags
0C189 29 04                         AND #BALL_MOVES_DOWN
0C18B F0 27                         BEQ +moveBallUp
0C18D                           
0C18D                           
0C18D                           +moveBallDown:
0C18D                               ;; update the low byte
0C18D A5 1A                         LDA ball_ypos_lo
0C18F 18                            CLC
0C190 69 30                         ADC #BALL_SPEED_LO
0C192 85 1A                         STA ball_ypos_lo
0C194                           
0C194                               ;; update the high byte with carry
0C194 A5 19                         LDA ball_ypos_hi
0C196 69 02                         ADC #BALL_SPEED_HI
0C198 85 19                         STA ball_ypos_hi
0C19A                               
0C19A                               ;; Check bottom bound
0C19A C9 C8                         CMP #BOUND_BOTTOM
0C19C 90 38                         BCC +checkHorizontalMovement
0C19E F0 36                         BEQ +checkHorizontalMovement
0C1A0                           
0C1A0                               ;; Update ball color (test)
0C1A0 20 1C C3                      JSR sub_ColorizeBall
0C1A3                           
0C1A3                               ;; Change ball direction to "up"
0C1A3 A9 C8                         LDA #BOUND_BOTTOM
0C1A5 85 19                         STA ball_ypos_hi
0C1A7 A9 00                         LDA #$00
0C1A9 85 1A                         STA ball_ypos_lo
0C1AB A5 26                         LDA ball_flags
0C1AD 29 FB                         AND #MOVE_BALL_UP
0C1AF 85 26                         STA ball_flags
0C1B1 4C D6 C1                      JMP +checkHorizontalMovement
0C1B4                           
0C1B4                           
0C1B4                           +moveBallUp:
0C1B4                               ;; update the low byte
0C1B4 A5 1A                         LDA ball_ypos_lo
0C1B6 38                            SEC
0C1B7 E9 30                         SBC #BALL_SPEED_LO
0C1B9 85 1A                         STA ball_ypos_lo
0C1BB                           
0C1BB                               ;; update the high byte with carry
0C1BB A5 19                         LDA ball_ypos_hi
0C1BD E9 02                         SBC #BALL_SPEED_HI
0C1BF 85 19                         STA ball_ypos_hi
0C1C1                               
0C1C1                               ;; Check top bound
0C1C1 C9 30                         CMP #BOUND_TOP
0C1C3 B0 11                         BCS +checkHorizontalMovement
0C1C5                           
0C1C5                               ;; Change ball direction to "down"
0C1C5 20 1C C3                      JSR sub_ColorizeBall
0C1C8 A9 30                         LDA #BOUND_TOP
0C1CA 85 19                         STA ball_ypos_hi
0C1CC A9 00                         LDA #$00
0C1CE 85 1A                         STA ball_ypos_lo
0C1D0 A5 26                         LDA ball_flags
0C1D2 09 04                         ORA #MOVE_BALL_DOWN
0C1D4 85 26                         STA ball_flags
0C1D6                           
0C1D6                           
0C1D6                           +checkHorizontalMovement:
0C1D6                           
0C1D6                               ;; Check if ball is being nudged
0C1D6 A5 2D                         LDA nudge_counter
0C1D8 D0 47                         BNE +doneBallMovement
0C1DA                           
0C1DA                               ;; Check if left button is held
0C1DA A5 0F                         LDA buttons_held
0C1DC 29 02                         AND #BUTTON_LEFT
0C1DE F0 1E                         BEQ +
0C1E0                                   ;; update the low byte
0C1E0 A5 18                             LDA ball_xpos_lo
0C1E2 38                                SEC
0C1E3 E9 30                             SBC #BALL_SPEED_LO
0C1E5 85 18                             STA ball_xpos_lo
0C1E7                           
0C1E7                                   ;; update the high byte
0C1E7 A5 17                             LDA ball_xpos_hi
0C1E9 E9 02                             SBC #BALL_SPEED_HI
0C1EB 85 17                             STA ball_xpos_hi
0C1ED                                   
0C1ED                                   ;; Check left bound
0C1ED C9 10                             CMP #BOUND_LEFT
0C1EF B0 30                             BCS +doneBallMovement
0C1F1                                   
0C1F1                                   ;; Set flag to nudge right
0C1F1 A5 26                             LDA ball_flags
0C1F3 09 02                             ORA #NUDGE_BALL_RIGHT
0C1F5 85 26                             STA ball_flags
0C1F7                                   
0C1F7                                   ;; Set nudge timer
0C1F7 A9 03                             LDA #NUDGE_FRAMES
0C1F9 85 2D                             STA nudge_counter
0C1FB                                   
0C1FB                           
0C1FB 4C 21 C2                          JMP +doneBallMovement        
0C1FE                               +
0C1FE                           
0C1FE                               ;; Check if right button is held
0C1FE A5 0F                         LDA buttons_held
0C200 29 01                         AND #BUTTON_RIGHT
0C202 F0 1D                         BEQ +
0C204                                   ;; update the low byte
0C204 A5 18                             LDA ball_xpos_lo
0C206 18                                CLC
0C207 69 30                             ADC #BALL_SPEED_LO
0C209 85 18                             STA ball_xpos_lo
0C20B                           
0C20B                                   ;; update the high byte
0C20B A5 17                             LDA ball_xpos_hi
0C20D 69 02                             ADC #BALL_SPEED_HI
0C20F 85 17                             STA ball_xpos_hi     
0C211                           
0C211                                  ;; Check right bound
0C211 C9 E8                             CMP #BOUND_RIGHT
0C213 90 0C                             BCC +doneBallMovement
0C215 F0 0A                             BEQ +doneBallMovement
0C217                                   
0C217                                   ;; Set flag to nudge right
0C217 A5 26                             LDA ball_flags
0C219 29 FD                             AND #NUDGE_BALL_LEFT
0C21B 85 26                             STA ball_flags
0C21D                                   
0C21D                                   ;; Set nudge timer
0C21D A9 03                             LDA #NUDGE_FRAMES
0C21F 85 2D                             STA nudge_counter
0C221                               +
0C221                           
0C221                           
0C221                           +doneBallMovement:
0C221                           
0C221                               ;; Check nudge
0C221 A5 2D                         LDA nudge_counter
0C223 F0 23                         BEQ +doneBallNudging
0C225 A5 26                             LDA ball_flags
0C227 29 02                             AND #NUDGE_BALL_RIGHT
0C229 F0 10                             BEQ +nudgeBallLeft
0C22B                                   
0C22B                                       ;; update the low byte
0C22B A5 18                                 LDA ball_xpos_lo
0C22D 18                                    CLC
0C22E 69 30                                 ADC #BALL_SPEED_LO
0C230 85 18                                 STA ball_xpos_lo
0C232                           
0C232                                       ;; update the high byte
0C232 A5 17                                 LDA ball_xpos_hi
0C234 69 02                                 ADC #BALL_SPEED_HI
0C236 85 17                                 STA ball_xpos_hi  
0C238 4C 48 C2                              JMP +doneBallNudging
0C23B                                   +nudgeBallLeft:
0C23B                                   
0C23B                                   ;; update the low byte
0C23B A5 18                             LDA ball_xpos_lo
0C23D 38                                SEC
0C23E E9 30                             SBC #BALL_SPEED_LO
0C240 85 18                             STA ball_xpos_lo
0C242                           
0C242                                   ;; update the high byte
0C242 A5 17                             LDA ball_xpos_hi
0C244 E9 02                             SBC #BALL_SPEED_HI
0C246 85 17                             STA ball_xpos_hi
0C248                               +doneBallNudging:
0C248                           
0C248                               ;; Don't update position again until next frame
0C248 E6 25                         INC ball_update_position
0C24A                           
0C24A                           
0C24A                           
0C24A                           +skipBallMovement:
0C24A                               ;; Add to sprite buffer
0C24A A6 2C                         LDX sprite_ram_pointer
0C24C A5 19                         LDA ball_ypos_hi
0C24E 9D 00 02                      STA ADDR_SPRITERAM,x
0C251 E8                            INX
0C252 A9 01                         LDA #BALL_TILE_CHR
0C254 9D 00 02                      STA ADDR_SPRITERAM,x
0C257 E8                            INX
0C258 A9 00                         LDA #BALL_ATTR
0C25A 9D 00 02                      STA ADDR_SPRITERAM,x
0C25D E8                            INX
0C25E A5 17                         LDA ball_xpos_hi
0C260 9D 00 02                      STA ADDR_SPRITERAM,x
0C263 E8                            INX
0C264 86 2C                         STX sprite_ram_pointer
0C266                           
0C266                               ++
0C266                               
0C266                               ;; Upon pressing START, (next level) design will be drawn
0C266                               .include "game/test/load_next_level.asm"
0C266                               ;; If START button is pressed
0C266 A5 10                         LDA buttons_pressed
0C268 29 10                         AND #BUTTON_START
0C26A F0 10                         BEQ +continue
0C26C                                   ;; Load the next level
0C26C E6 2E                             INC current_level
0C26E A5 2E                             LDA current_level
0C270 C9 0A                             CMP #10
0C272 D0 04                             BNE +
0C274 A9 00                                 LDA #$00
0C276 85 2E                                 STA current_level
0C278                                   +
0C278                                   
0C278 A9 81                             LDA #LOAD_GAME_SCREEN
0C27A 85 27                             STA screen_mode
0C27C                           
0C27C                               +continue:
0C27C                           
0C27C                           
0C27C                           
0C27C                               ;; Sprite clean-up
0C27C A6 2C                         LDX sprite_ram_pointer
0C27E A9 EF                         LDA #$EF
0C280                               -
0C280 9D 00 02                          STA ADDR_SPRITERAM,x
0C283 E8                                INX
0C284 D0 FA                         BNE -
0C286 4C 57 C0                      JMP MainGameLoop
0C289                           
0C289                           ;; Subroutines
0C289                           .include "include/subroutines.asm"
0C289                           
0C289                           ;; RNG
0C289                           .include "subroutine/GetRandomNumber.asm"
0C289                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C289                           ;;
0C289                           ;; subroutine/GetRandomNumber.asm
0C289                           ;;
0C289                           ;; Simple and fast random number generator by White Flame.
0C289                           ;;
0C289                           ;; Set random_seed to an arbitrary number to randomize between
0C289                           ;; gaming sessions, for instance using the frame counter upon
0C289                           ;; pressing START on the intro screen.
0C289                           ;;
0C289                           ;;     ;; IF START PRESSED:
0C289                           ;;     LDA frame_counter
0C289                           ;;     STA random_seed
0C289                           ;;
0C289                           ;; Source:
0C289                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C289                           ;;
0C289                           ;;
0C289                           
0C289                           sub_GetRandomNumber:
0C289                               ;; Force EOR if random_seed is zero
0C289 A5 16                         LDA random_seed
0C28B F0 05                         BEQ +doEor
0C28D                           
0C28D                               ;; Shift left, and EOR if the high bit is set
0C28D 0A                            ASL
0C28E F0 04                         BEQ +noEor
0C290 90 02                         BCC +noEor
0C292                           
0C292                           +doEor:
0C292 49 1D                         EOR #$1D
0C294                           
0C294                           +noEor:
0C294 85 16                         STA random_seed
0C296                           
0C296 60                            RTS
0C297                           
0C297                           
0C297                           ;; Read controller input
0C297                           .include "subroutine/ReadController.asm"
0C297                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C297                           ;;
0C297                           ;; subroutine/ReadController.asm
0C297                           ;;
0C297                           ;; Subroutine that polls the controller and stores the input
0C297                           ;; buttons in a variable. This version only handles controller
0C297                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C297                           ;;
0C297                           ;;
0C297                           
0C297                           sub_ReadController:
0C297                           
0C297                               ;; Set strobe bit
0C297 A9 01                         LDA #$01
0C299 8D 16 40                      STA JOYPAD_1
0C29C                           
0C29C                               ;; Set up ring counter
0C29C 85 0F                         STA buttons_held
0C29E                           
0C29E                               ;; Clear strobe bit
0C29E 4A                            LSR
0C29F 8D 16 40                      STA JOYPAD_1
0C2A2                           
0C2A2                               ;; Loop through button presses
0C2A2                               -
0C2A2 AD 16 40                          LDA JOYPAD_1
0C2A5 4A                                LSR
0C2A6 26 0F                             ROL buttons_held
0C2A8                           
0C2A8                               ;; Check if ring counter is done
0C2A8 90 F8                         BCC -
0C2AA                           
0C2AA                               ;; Return from subroutine
0C2AA 60                            RTS
0C2AB                           
0C2AB                           
0C2AB                           ;; vBlank wait
0C2AB                           .include "subroutine/WaitForVBlank.asm"
0C2AB                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C2AB                           ;;
0C2AB                           ;; subroutine/WaitForVBlank.asm
0C2AB                           ;;
0C2AB                           ;; Subroutine that essentially pauses script execution until
0C2AB                           ;; vBlank happens.
0C2AB                           ;;
0C2AB                           ;;
0C2AB                           
0C2AB                           sub_WaitForVBlank:
0C2AB 2C 02 20                      BIT $2002
0C2AE 10 FB                         BPL sub_WaitForVBlank
0C2B0 60                            RTS
0C2B1                           
0C2B1                           
0C2B1                           ;; Game specific subroutines
0C2B1                           .include "game/include/subroutines.asm"
0C2B1                           ;; additional game-specific subroutines go here
0C2B1                           
0C2B1                           .include "game/subroutine/ClearScreen.asm"
0C2B1                           ;; Subroutine to clear the screen
0C2B1                           ;; If it's a game screen, add noise
0C2B1                           
0C2B1                           sub_ClearScreen:
0C2B1                               ;; Check of game screen or not
0C2B1 A5 27                         LDA screen_mode
0C2B3 29 03                         AND #CHECK_SCREEN_MODE
0C2B5 C9 01                         CMP #IS_GAME_SCREEN
0C2B7 F0 02                         BEQ +
0C2B9 A9 00                             LDA #$00
0C2BB                               +
0C2BB 85 01                         STA temp+1
0C2BD                               
0C2BD                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C2BD 2C 02 20                      BIT PPU_STATUS
0C2C0 A9 20                         LDA #$20
0C2C2 8D 06 20                      STA PPU_ADDR
0C2C5 A9 00                         LDA #$00
0C2C7 8D 06 20                      STA PPU_ADDR
0C2CA                               
0C2CA                               ;; Set up tile to draw and loop
0C2CA 85 00                         STA temp
0C2CC AA                            TAX
0C2CD A8                            TAY
0C2CE                           
0C2CE                               -     
0C2CE                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C2CE A5 00                             LDA temp
0C2D0 8D 07 20                          STA PPU_DATA
0C2D3                           
0C2D3                                   ;; Check if we should draw noise next. Noise is drawn if:
0C2D3                                   ;; - Screen mode is game screen
0C2D3                                   ;; - Y between #$06 and #$19 (inclusive)
0C2D3                                   ;; - X between #$02 and #$1D (inclusive)
0C2D3                                   
0C2D3                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C2D3 A5 01                             LDA temp+1
0C2D5 F0 1C                             BEQ +nextTileInRow
0C2D7                                   
0C2D7                                   ;; If Y < $6, skip the check
0C2D7 C0 06                             CPY #$06
0C2D9 90 18                             BCC +nextTileInRow
0C2DB                                   
0C2DB                                   ;; If X < $1, skip the check
0C2DB E0 01                             CPX #$01
0C2DD 90 14                             BCC +nextTileInRow
0C2DF                                   
0C2DF                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C2DF E0 1D                             CPX #$1D
0C2E1 D0 04                             BNE +
0C2E3 A9 00                                 LDA #$00
0C2E5 85 00                                 STA temp
0C2E7                                   +
0C2E7 B0 0A                             BCS +nextTileInRow
0C2E9                                   
0C2E9                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C2E9 20 89 C2                          JSR sub_GetRandomNumber
0C2EC 29 07                             AND #%00000111
0C2EE 18                                CLC
0C2EF 69 68                             ADC #$68
0C2F1 85 00                             STA temp
0C2F3                           
0C2F3                           +nextTileInRow:
0C2F3                                   
0C2F3                                   ;; Check if a row has been done. If not, draw the next
0C2F3 E8                                INX
0C2F4 E0 20                             CPX #$20
0C2F6 D0 D6                             BNE -
0C2F8                                   
0C2F8                                   ;; Go to the next row (if any left)
0C2F8 A2 00                             LDX #00
0C2FA C8                                INY
0C2FB                                   
0C2FB                                   ;; If Y is 1A, skip noise tile check until done drawing
0C2FB C0 1A                             CPY #$1A
0C2FD D0 04                             BNE +
0C2FF A9 00                                 LDA #$00
0C301 85 01                                 STA temp+1
0C303                                   +
0C303                                   
0C303 C0 1E                             CPY #$1E
0C305 D0 C7                         BNE -
0C307                           
0C307                               ;; Clear attribute table
0C307 A9 23                         LDA #$23
0C309 8D 06 20                      STA PPU_ADDR
0C30C A9 C0                         LDA #$C0
0C30E 8D 06 20                      STA PPU_ADDR
0C311 A9 00                         LDA #$00
0C313 A2 40                         LDX #$40
0C315                               -
0C315 8D 07 20                          STA PPU_DATA
0C318 CA                                DEX
0C319 D0 FA                         BNE -
0C31B                               
0C31B 60                            RTS0C31C                           .include "game/subroutine/ColorizeBall.asm"
0C31C                           sub_ColorizeBall:
0C31C                           
0C31C                               ;; Get next ball color in cycle
0C31C A5 26                         LDA ball_flags
0C31E 4A                            LSR
0C31F 4A                            LSR
0C320 4A                            LSR
0C321 4A                            LSR
0C322 4A                            LSR
0C323 C9 05                         CMP #$05
0C325 D0 02                         BNE +
0C327 A9 FF                             LDA #$FF
0C329                               +
0C329 18                            CLC
0C32A 69 01                         ADC #$01
0C32C AA                            TAX
0C32D                           
0C32D                               ;; Update color in ball flags
0C32D 0A                            ASL
0C32E 0A                            ASL
0C32F 0A                            ASL
0C330 0A                            ASL
0C331 0A                            ASL
0C332 85 00                         STA temp
0C334 A5 26                         LDA ball_flags
0C336 29 1F                         AND #%00011111
0C338 05 00                         ORA temp
0C33A 85 26                         STA ball_flags
0C33C                           
0C33C                               ;; Add new light color of ball to PPU palette
0C33C A9 3F                         LDA #$3F
0C33E 85 00                         STA temp
0C340 A9 11                         LDA #$11
0C342 85 01                         STA temp+1
0C344 BD F3 C8                      LDA tbl_BallColorLight,x
0C347 85 02                         STA temp+2
0C349 20 8F C7                      JSR sub_WriteByteToPPUBuffer
0C34C                               
0C34C                               ;; Add new dark color of ball to PPU palette
0C34C E6 01                         INC temp+1
0C34E BD ED C8                      LDA tbl_BallColorDark,x
0C351 85 02                         STA temp+2
0C353 20 8F C7                      JSR sub_WriteByteToPPUBuffer
0C356                               
0C356 60                            RTS0C357                           .include "game/subroutine/DisableEnableRendering.asm"
0C357                           sub_DisableRendering:
0C357                               ;; Force NMI skip, disable rendering
0C357 A9 01                     	LDA #$01
0C359 85 14                     	STA force_skip_nmi
0C35B 20 AB C2                      JSR sub_WaitForVBlank
0C35E A5 12                         LDA soft_ppu_mask
0C360 29 E7                         AND #%11100111
0C362 8D 01 20                      STA PPU_MASK
0C365 85 12                         STA soft_ppu_mask
0C367 20 AB C2                      JSR sub_WaitForVBlank
0C36A 60                            RTS
0C36B                           
0C36B                           sub_EnableRendering:
0C36B                               ;; Enable rendering
0C36B A9 00                     	LDA #$00
0C36D 8D 05 20                  	STA PPU_SCROLL
0C370 8D 05 20                  	STA PPU_SCROLL
0C373 20 AB C2                      JSR sub_WaitForVBlank
0C376 85 14                     	STA force_skip_nmi
0C378 A5 12                         LDA soft_ppu_mask
0C37A 09 18                         ORA #%00011000
0C37C 85 12                         STA soft_ppu_mask
0C37E 8D 01 20                      STA PPU_MASK
0C381 20 AB C2                      JSR sub_WaitForVBlank
0C384 60                            RTS
0C385                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C385                           sub_drawIntroScreenLogoTile:
0C385 B9 D5 C7                      LDA tbl_IntroScreenLogoChr,y
0C388 C9 60                         CMP #$60
0C38A D0 08                         BNE +
0C38C 20 89 C2                          JSR sub_GetRandomNumber
0C38F 29 07                             AND #$07
0C391 18                                CLC
0C392 69 60                             ADC #$60
0C394                               +
0C394 8D 07 20                      STA PPU_DATA
0C397 60                            RTS
0C398                           .include "game/subroutine/JumpToPointer.asm"
0C398                           sub_JumpToPointer:
0C398 6C 0C 00                      JMP (pointer)
0C39B                               ;RTS must be handled by the routine (pointer) jumps to
0C39B                           .include "game/subroutine/LoadGameScreen.asm"
0C39B                           sub_LoadGameScreen:
0C39B                           
0C39B                               ;; Clear the screen
0C39B 20 B1 C2                      JSR sub_ClearScreen
0C39E                               
0C39E                               ;; Clear collision and attribute data
0C39E A2 00                         LDX #$00
0C3A0 8A                            TXA
0C3A1                               -
0C3A1 9D 00 04                          STA tile_type,x
0C3A4 E8                                INX
0C3A5 D0 FA                         BNE -
0C3A7                               
0C3A7                               ;; Get pointer from current level
0C3A7 A6 2E                         LDX current_level
0C3A9 BD CD CB                      LDA tbl_lvl_layout_lo,x
0C3AC 85 0C                         STA pointer
0C3AE BD B4 CB                      LDA tbl_lvl_layout_hi,x
0C3B1 85 0D                         STA pointer+1
0C3B3                           
0C3B3                               ;; Set up the loop
0C3B3 A0 00                         LDY #$00
0C3B5                           -drawRowColumnLoop:
0C3B5                           
0C3B5                               ;; Load (x,y) of current set of tiles
0C3B5 B1 0C                         LDA (pointer),y
0C3B7                           
0C3B7                               ;; Check if level is done; if so, skip the loop
0C3B7 C9 FF                         CMP #LEVEL_END
0C3B9 D0 03                         BNE +
0C3BB 4C 04 C5                          JMP +doneLevelLoad
0C3BE                               +
0C3BE                           
0C3BE                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C3BE 85 00                         STA temp
0C3C0 C8                            INY
0C3C1 B1 0C                         LDA (pointer),y
0C3C3 85 01                         STA temp+1
0C3C5                               
0C3C5                               ;; Convert (x,y) to PPU address
0C3C5                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C3C5 A5 00                         LDA temp
0C3C7 29 0F                         AND #%00001111
0C3C9 4A                            LSR
0C3CA 4A                            LSR
0C3CB 09 20                         ORA #$20
0C3CD 85 02                         STA temp+2
0C3CF                               
0C3CF                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C3CF A5 00                         LDA temp
0C3D1 29 F0                         AND #%11110000
0C3D3 4A                            LSR
0C3D4 4A                            LSR
0C3D5 4A                            LSR
0C3D6 85 03                         STA temp+3
0C3D8                               
0C3D8 A5 00                         LDA temp
0C3DA 29 03                         AND #%00000011
0C3DC AA                            TAX
0C3DD BD E6 CB                      LDA tbl_Times64,x
0C3E0 18                            CLC
0C3E1 65 03                         ADC temp+3
0C3E3 18                            CLC
0C3E4 69 C2                         ADC #$C2
0C3E6 85 03                         STA temp+3
0C3E8                               
0C3E8                               ;; Add carry to temp+2
0C3E8 A5 02                         LDA temp+2
0C3EA 69 00                         ADC #$00
0C3EC 85 02                         STA temp+2
0C3EE                           
0C3EE                               ;; Convert tile data to loop count and tile type
0C3EE                               ;; temp+4 = color
0C3EE A5 01                         LDA temp+1
0C3F0 29 07                         AND #%00000111
0C3F2 85 04                         STA temp+4
0C3F4                               
0C3F4                               ;; If color = 7, this is a wall
0C3F4 C9 07                         CMP #%00000111
0C3F6 F0 12                         BEQ +wallHack
0C3F8                                   
0C3F8                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C3F8 29 01                             AND #%00000001
0C3FA F0 02                             BEQ +
0C3FC A9 05                                 LDA #$05
0C3FE                                   +
0C3FE 85 07                             STA temp+7
0C400                                
0C400                                   ;; temp+5 = tile type
0C400 A5 01                             LDA temp+1
0C402 4A                                LSR
0C403 4A                                LSR
0C404 4A                                LSR
0C405 29 03                             AND #%00000011
0C407 4C 10 C4                          JMP +setTileType
0C40A                               +wallHack:
0C40A                               
0C40A                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C40A A9 00                         LDA #$00
0C40C 85 07                         STA temp+7
0C40E A9 04                         LDA #$04
0C410                           
0C410                           +setTileType:    
0C410 85 05                         STA temp+5
0C412                               
0C412                               ;; X = tile offset
0C412 18                            CLC
0C413 65 07                         ADC temp+7
0C415 AA                            TAX
0C416                               
0C416                               ;; temp+6 = number of tiles
0C416 A5 01                         LDA temp+1
0C418 29 60                         AND #%01100000
0C41A 4A                            LSR
0C41B 4A                            LSR
0C41C 4A                            LSR
0C41D 4A                            LSR
0C41E 4A                            LSR
0C41F 85 06                         STA temp+6
0C421                               
0C421                               ;; Translate (x,y) to (y,x) for tile RAM
0C421 A5 00                         LDA temp
0C423 0A                            ASL
0C424 0A                            ASL
0C425 0A                            ASL
0C426 0A                            ASL
0C427 85 08                         STA temp+8
0C429 A5 00                         LDA temp
0C42B 4A                            LSR
0C42C 4A                            LSR
0C42D 4A                            LSR
0C42E 4A                            LSR
0C42F 05 08                         ORA temp+8
0C431 85 00                         STA temp
0C433                               
0C433                               ;; Set up loop
0C433 98                            TYA
0C434 48                            PHA
0C435 A4 06                         LDY temp+6
0C437                           
0C437                               -drawTileLoop:
0C437                                   ;; Write PPU address
0C437 2C 02 20                          BIT PPU_STATUS
0C43A A5 02                             LDA temp+2
0C43C 8D 06 20                          STA PPU_ADDR
0C43F A5 03                             LDA temp+3
0C441 8D 06 20                          STA PPU_ADDR
0C444                                   
0C444                                   ;; Write first and second tile
0C444 BD EA CB                          LDA tbl_GametileTopLeft,x
0C447 8D 07 20                          STA PPU_DATA
0C44A BD F4 CB                          LDA tbl_GametileTopRight,x
0C44D 8D 07 20                          STA PPU_DATA
0C450                                   
0C450                                   ;; Update PPU address
0C450 2C 02 20                          BIT PPU_STATUS
0C453 A5 02                             LDA temp+2
0C455 8D 06 20                          STA PPU_ADDR
0C458 A5 03                             LDA temp+3
0C45A 18                                CLC
0C45B 69 20                             ADC #$20
0C45D 8D 06 20                          STA PPU_ADDR
0C460                                   
0C460                                   ;; Write third and fourth tile
0C460 BD FE CB                          LDA tbl_GametileBottomLeft,x
0C463 8D 07 20                          STA PPU_DATA
0C466 BD 08 CC                          LDA tbl_GametileBottomRight,x
0C469 8D 07 20                          STA PPU_DATA
0C46C                           
0C46C                                   ;; Push x-register to stack
0C46C 8A                                TXA
0C46D 48                                PHA
0C46E                                   
0C46E                                   ;; Update tile RAM (aka collision table)
0C46E A6 05                             LDX temp+5
0C470 BD 12 CC                          LDA tbl_GameTileRamByte,x
0C473 05 04                             ORA temp+4
0C475 0A                                ASL
0C476 09 01                             ORA #%00000001
0C478 A6 00                             LDX temp
0C47A 9D 00 04                          STA tile_type,x
0C47D                           
0C47D                                   ;; Check if shade 1 should be drawn
0C47D E8                                INX
0C47E BD 00 04                          LDA tile_type,x
0C481 D0 05                             BNE +
0C483 A9 00                                 LDA #$00
0C485 8D 07 20                              STA PPU_DATA
0C488                                   +
0C488                                   
0C488                                   ;; Check if shade 2 should be drawn
0C488 A5 03                             LDA temp+3
0C48A 18                                CLC
0C48B 69 41                             ADC #$41
0C48D 85 03                             STA temp+3
0C48F A5 02                             LDA temp+2
0C491 69 00                             ADC #$00
0C493 85 02                             STA temp+2
0C495                                   
0C495 8A                                TXA
0C496 18                                CLC
0C497 69 0F                             ADC #$0F
0C499 AA                                TAX
0C49A                                   
0C49A BD 00 04                          LDA tile_type,x
0C49D D0 0F                             BNE +
0C49F A5 02                                 LDA temp+2
0C4A1 8D 06 20                              STA PPU_ADDR
0C4A4 A5 03                                 LDA temp+3
0C4A6 8D 06 20                              STA PPU_ADDR
0C4A9 A9 00                                 LDA #$00
0C4AB 8D 07 20                              STA PPU_DATA
0C4AE                                   +
0C4AE                           
0C4AE                                   ;; Check if shade 3 should be drawn
0C4AE E8                                INX
0C4AF E6 03                             INC temp+3
0C4B1 BD 00 04                          LDA tile_type,x
0C4B4 D0 0F                             BNE +
0C4B6 A5 02                                 LDA temp+2
0C4B8 8D 06 20                              STA PPU_ADDR
0C4BB A5 03                                 LDA temp+3
0C4BD 8D 06 20                              STA PPU_ADDR
0C4C0 A9 00                                 LDA #$00
0C4C2 8D 07 20                              STA PPU_DATA
0C4C5                                   +
0C4C5                                   
0C4C5                                   ;; Restore x-register from stack
0C4C5 68                                PLA
0C4C6 AA                                TAX
0C4C7                                   
0C4C7                                   ;; Reset pointer for next tile
0C4C7 A5 03                             LDA temp+3
0C4C9 38                                SEC
0C4CA E9 42                             SBC #$42
0C4CC 85 03                             STA temp+3
0C4CE A5 02                             LDA temp+2
0C4D0 E9 00                             SBC #$00
0C4D2 85 02                             STA temp+2
0C4D4                                   
0C4D4                                   ;; Draw next metatile in this loop (if any left)
0C4D4 88                                DEY
0C4D5 30 27                             BMI +doneDrawingRowColumn
0C4D7                                   
0C4D7                                   ;; Is it a row or a column?
0C4D7 A5 01                             LDA temp+1
0C4D9 10 17                             BPL +
0C4DB                                       ;; It is a column: move pointer down (+$40)
0C4DB A5 03                                 LDA temp+3
0C4DD 18                                    CLC
0C4DE 69 40                                 ADC #$40
0C4E0 85 03                                 STA temp+3
0C4E2 A5 02                                 LDA temp+2
0C4E4 69 00                                 ADC #$00
0C4E6 85 02                                 STA temp+2
0C4E8                                       
0C4E8                                       ;; Add 16 to temp (as a tile RAM pointer)
0C4E8 A5 00                                 LDA temp
0C4EA 18                                    CLC
0C4EB 69 10                                 ADC #$10
0C4ED 85 00                                 STA temp
0C4EF 4C FB C4                              JMP +drawNextTile
0C4F2                                   +
0C4F2                                   
0C4F2                                   ;; It is a row: move pointer right (+$02)
0C4F2 A5 03                             LDA temp+3
0C4F4 18                                CLC
0C4F5 69 02                             ADC #$02
0C4F7 85 03                             STA temp+3
0C4F9                                   
0C4F9                                   ;; Add 1 to temp (as a tile RAM pointer)
0C4F9 E6 00                             INC temp
0C4FB                           
0C4FB                               
0C4FB                               ;; Next tile in the row/column
0C4FB                                   +drawNextTile:
0C4FB 4C 37 C4                      JMP -drawTileLoop
0C4FE                           
0C4FE                               ;; Go to the next set of tiles
0C4FE                           +doneDrawingRowColumn:
0C4FE 68                            PLA
0C4FF A8                            TAY
0C500 C8                            INY
0C501 4C B5 C3                      JMP -drawRowColumnLoop
0C504                           
0C504                           ;; Level loading is done
0C504                           +doneLevelLoad:
0C504                           
0C504                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C504 A9 20                         LDA #$20
0C506 8D 06 20                      STA PPU_ADDR
0C509 A9 A2                         LDA #$A2
0C50B 8D 06 20                      STA PPU_ADDR
0C50E A9 35                         LDA #$35
0C510 20 F6 C6                      JSR sub_Draw28HorizontalTiles
0C513                           
0C513                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C513 A9 23                         LDA #$23
0C515 8D 06 20                      STA PPU_ADDR
0C518 A9 42                         LDA #$42
0C51A 8D 06 20                      STA PPU_ADDR
0C51D A9 31                         LDA #$31
0C51F 20 F6 C6                      JSR sub_Draw28HorizontalTiles
0C522                           
0C522                               ;; Left & right game bounds
0C522                               ;; Set PPU_ADDR and store in temp variables
0C522 A9 20                         LDA #$20
0C524 85 00                         STA temp
0C526 8D 06 20                      STA PPU_ADDR
0C529 A9 C1                         LDA #$C1
0C52B 85 01                         STA temp+1
0C52D 8D 06 20                      STA PPU_ADDR
0C530                               
0C530                               ;; Set vertical bound tile and set up loop
0C530 A0 33                         LDY #$33
0C532 A2 14                         LDX #20
0C534                               -
0C534                                   ;; Show left tile
0C534 8C 07 20                          STY PPU_DATA
0C537                                   
0C537                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C537 A5 00                             LDA temp
0C539 8D 06 20                          STA PPU_ADDR
0C53C A5 01                             LDA temp+1
0C53E 18                                CLC
0C53F 69 1D                             ADC #29
0C541 85 01                             STA temp+1
0C543 8D 06 20                          STA PPU_ADDR
0C546                           
0C546                                   ;; Show right tile
0C546 8C 07 20                          STY PPU_DATA
0C549                           
0C549                                   ;; Check if we're done yet
0C549 CA                                DEX
0C54A F0 18                             BEQ +drawCorners
0C54C                                   
0C54C                                   ;; Not done yet: add 3 to low byte for next left bound
0C54C A5 01                             LDA temp+1
0C54E 18                                CLC
0C54F 69 03                             ADC #3
0C551 85 01                             STA temp+1
0C553                                   
0C553                                   ;; Apply carry to high byte
0C553 A5 00                             LDA temp
0C555 69 00                             ADC #$00
0C557 85 00                             STA temp
0C559                                   
0C559                                   ;; Store next PPU_ADDR to draw at
0C559 8D 06 20                          STA PPU_ADDR
0C55C A5 01                             LDA temp+1
0C55E 8D 06 20                          STA PPU_ADDR
0C561 4C 34 C5                      JMP -
0C564                               
0C564                               
0C564                           
0C564                           +drawCorners:
0C564                               ;; Draw the corners of the playing field
0C564 A9 20                         LDA #$20
0C566 8D 06 20                      STA PPU_ADDR
0C569 A9 A1                         LDA #$A1
0C56B 8D 06 20                      STA PPU_ADDR
0C56E A9 39                         LDA #$39
0C570 8D 07 20                      STA PPU_DATA
0C573                           
0C573 A9 20                         LDA #$20
0C575 8D 06 20                      STA PPU_ADDR
0C578 A9 BE                         LDA #$BE
0C57A 8D 06 20                      STA PPU_ADDR
0C57D A9 3A                         LDA #$3A
0C57F 8D 07 20                      STA PPU_DATA
0C582                           
0C582 A9 23                         LDA #$23
0C584 8D 06 20                      STA PPU_ADDR
0C587 A9 41                         LDA #$41
0C589 8D 06 20                      STA PPU_ADDR
0C58C A9 36                         LDA #$36
0C58E 8D 07 20                      STA PPU_DATA
0C591                           
0C591 A9 23                         LDA #$23
0C593 8D 06 20                      STA PPU_ADDR
0C596 A9 5E                         LDA #$5E
0C598 8D 06 20                      STA PPU_ADDR
0C59B A9 34                         LDA #$34
0C59D 8D 07 20                      STA PPU_DATA
0C5A0                           
0C5A0                           
0C5A0                               ;; Draw the hud labels
0C5A0 A9 20                         LDA #$20
0C5A2 8D 06 20                      STA PPU_ADDR
0C5A5 A9 62                         LDA #$62
0C5A7 8D 06 20                      STA PPU_ADDR
0C5AA A2 00                         LDX #$00
0C5AC                               -
0C5AC BD 17 CC                          LDA tbl_HudText,x
0C5AF 8D 07 20                          STA PPU_DATA
0C5B2 E8                                INX
0C5B3 E0 1C                             CPX #28
0C5B5 D0 F5                         BNE -
0C5B7                           
0C5B7                           
0C5B7                               ;; Draw the current score
0C5B7 A9 20                         LDA #$20
0C5B9 8D 06 20                      STA PPU_ADDR
0C5BC A9 83                         LDA #$83
0C5BE 8D 06 20                      STA PPU_ADDR
0C5C1 A2 00                         LDX #$00
0C5C3                               -
0C5C3 B5 1C                             LDA ball_score,x
0C5C5 18                                CLC
0C5C6 69 01                             ADC #$01
0C5C8 8D 07 20                          STA PPU_DATA
0C5CB E8                                INX
0C5CC E0 06                             CPX #$06
0C5CE D0 F3                         BNE -
0C5D0                           
0C5D0                           
0C5D0                               ;; Draw the level number
0C5D0                               ;; (with primitive HEX>DEC)
0C5D0 A5 2E                         LDA current_level
0C5D2 18                            CLC
0C5D3 69 01                         ADC #$01
0C5D5 85 01                         STA temp+1
0C5D7                               
0C5D7 C9 14                         CMP #20
0C5D9 B0 13                         BCS +tempIsTwo
0C5DB                               
0C5DB C9 0A                         CMP #10
0C5DD B0 05                         BCS +tempIsOne
0C5DF                               
0C5DF A9 00                         LDA #$00
0C5E1 4C F5 C5                      JMP +setTemp
0C5E4                               
0C5E4                           +tempIsOne:
0C5E4 38                            SEC
0C5E5 E9 0A                         SBC #10
0C5E7 85 01                         STA temp+1
0C5E9 A9 01                         LDA #$01
0C5EB 4C 78 C6                      JMP +
0C5EE                               
0C5EE                           +tempIsTwo:
0C5EE 38                            SEC
0C5EF E9 14                         SBC #20
0C5F1 85 01                         STA temp+1
0C5F3 A9 02                         LDA #$02
0C5F5                           
0C5F5                           +setTemp:
0C5F5 85 00                         STA temp
0C5F7                               
0C5F7 E6 00                         INC temp
0C5F9 E6 01                         INC temp+1
0C5FB                               
0C5FB A9 20                         LDA #$20
0C5FD 8D 06 20                      STA PPU_ADDR
0C600 A9 8B                         LDA #$8B
0C602 8D 06 20                      STA PPU_ADDR
0C605 A5 00                         LDA temp
0C607 8D 07 20                      STA PPU_DATA
0C60A A5 01                         LDA temp+1
0C60C 8D 07 20                      STA PPU_DATA
0C60F                           
0C60F                           
0C60F                               ;; Draw lives (presumes lives to be capped at 9)
0C60F A9 20                         LDA #$20
0C611 8D 06 20                      STA PPU_ADDR
0C614 A9 92                         LDA #$92
0C616 8D 06 20                      STA PPU_ADDR
0C619 A6 1B                         LDX ball_lives
0C61B E8                            INX
0C61C 8E 07 20                      STX PPU_DATA
0C61F                           
0C61F                           
0C61F                               ;; Set and draw bonus
0C61F A9 07                         LDA #$07
0C621 85 22                         STA ball_bonus
0C623 A9 09                         LDA #$09
0C625 85 23                         STA ball_bonus+1
0C627 85 24                         STA ball_bonus+2
0C629                               
0C629 A9 20                         LDA #$20
0C62B 8D 06 20                      STA PPU_ADDR
0C62E A9 9A                         LDA #$9A
0C630 8D 06 20                      STA PPU_ADDR
0C633 A2 00                         LDX #$00
0C635                               -
0C635 B5 22                             LDA ball_bonus,x
0C637 18                                CLC
0C638 69 01                             ADC #$01
0C63A 8D 07 20                          STA PPU_DATA
0C63D E8                                INX
0C63E E0 03                             CPX #$03
0C640 D0 F3                         BNE -
0C642                           
0C642                           
0C642                               ;; Set attribute data to RAM
0C642                               
0C642                               ;; Byte 0-7 of attribute ram should be #%10100000
0C642 A2 00                         LDX #$00
0C644 A9 A0                         LDA #$A0
0C646                               -
0C646 9D A0 04                          STA tile_attributes,x
0C649 E8                                INX
0C64A E0 08                             CPX #$08
0C64C D0 F8                         BNE -
0C64E                           
0C64E                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0C64E                           
0C64E                           -attributeLoop:
0C64E                               ;; Reset current attribute value
0C64E A9 00                         LDA #$00
0C650 85 02                         STA temp+2
0C652                           
0C652                               ;; Get first metatile in tile ram based on attribute index
0C652                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0C652 8A                            TXA
0C653                           
0C653 38                            SEC
0C654 E9 08                         SBC #$08
0C656 85 01                         STA temp+1      ; attr - 8 (temp1)
0C658 0A                            ASL             ; * 2
0C659 85 00                         STA temp        ; temp = temp1 * 2
0C65B                           
0C65B A5 01                         LDA temp+1      ; temp1
0C65D 29 F8                         AND #%11111000  ; rounded down to 8's
0C65F 0A                            ASL             ; * 2
0C660 18                            CLC
0C661 65 00                         ADC temp        ; + temp1 * 2
0C663 85 00                         STA temp        ; first metatile
0C665                           
0C665                               ;; Store first metatile in y-register
0C665 A8                            TAY
0C666                           
0C666                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0C666 8A                            TXA
0C667 29 07                         AND #%00000111
0C669 C9 07                         CMP #%00000111
0C66B F0 0B                         BEQ +
0C66D                           
0C66D                               ;; If X >= $30, don't apply bottom right metatile
0C66D E0 30                         CPX #$30
0C66F B0 07                         BCS +
0C671                               
0C671                               ;; Add metatile1 subpalette to attribute value
0C671 B9 00 04                      LDA tile_type,y
0C674 29 0C                         AND #%00001100
0C676 85 02                         STA temp+2
0C678                               +
0C678                           
0C678                           
0C678                               ;; Apply second metatile
0C678 88                            DEY
0C679                           
0C679                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0C679 8A                            TXA
0C67A 29 07                         AND #%00000111
0C67C F0 10                         BEQ +
0C67E                           
0C67E                               ;; If X >= $30, don't apply bottom left metatile
0C67E E0 30                         CPX #$30
0C680 B0 0C                         BCS +
0C682                           
0C682                           
0C682                           
0C682                               ;; Add metatile2 subpalette to attribute value
0C682 B9 00 04                      LDA tile_type,y
0C685 29 0C                         AND #%00001100
0C687 4A                            LSR
0C688 4A                            LSR
0C689 05 02                         ORA temp+2
0C68B 4C 90 C6                      JMP ++
0C68E                               +
0C68E A5 02                         LDA temp+2
0C690                               ++
0C690 0A                            ASL
0C691 0A                            ASL
0C692 85 02                         STA temp+2
0C694                           
0C694                           
0C694                               ;; Apply third metatile
0C694 98                            TYA
0C695 38                            SEC
0C696 E9 0F                         SBC #$0F
0C698 A8                            TAY
0C699                           
0C699                               ;; If X MOD 8 == 7, don't apply top right metatile
0C699 8A                            TXA
0C69A 29 07                         AND #%00000111
0C69C C9 07                         CMP #%00000111
0C69E F0 11                         BEQ +
0C6A0                           
0C6A0                               ;; If X < $10, don't apply top right metatile
0C6A0 8A                            TXA
0C6A1 29 F0                         AND #%11110000
0C6A3 F0 0C                         BEQ +
0C6A5                           
0C6A5                               ;; Add metatile3 subpalette to attribute value
0C6A5 B9 00 04                      LDA tile_type,y
0C6A8 29 0C                         AND #%00001100
0C6AA 4A                            LSR
0C6AB 4A                            LSR
0C6AC 05 02                         ORA temp+2
0C6AE 4C B3 C6                      JMP ++
0C6B1                               +
0C6B1 A5 02                         LDA temp+2
0C6B3                               ++
0C6B3 0A                            ASL
0C6B4 0A                            ASL
0C6B5 85 02                         STA temp+2
0C6B7                           
0C6B7                           
0C6B7                               ;; Apply fourth metatile
0C6B7 88                            DEY
0C6B8                           
0C6B8                               ;; If X MOD 8 == 0, don't apply top left metatile
0C6B8 8A                            TXA
0C6B9 29 07                         AND #%00000111
0C6BB F0 11                         BEQ +
0C6BD                           
0C6BD                               ;; If X < $10, don't apply top left metatile
0C6BD 8A                            TXA
0C6BE 29 F0                         AND #%11110000
0C6C0 F0 0C                         BEQ +
0C6C2                           
0C6C2                               ;; Add metatile4 subpalette to attribute value
0C6C2 B9 00 04                      LDA tile_type,y
0C6C5 29 0C                         AND #%00001100
0C6C7 4A                            LSR
0C6C8 4A                            LSR
0C6C9 05 02                         ORA temp+2
0C6CB 4C D0 C6                      JMP ++
0C6CE                               +
0C6CE A5 02                         LDA temp+2
0C6D0                               ++
0C6D0 9D A0 04                      STA tile_attributes,x
0C6D3                           
0C6D3                               ;; Check the next attribute, if any left
0C6D3 E8                            INX
0C6D4 E0 38                         CPX #$38
0C6D6 F0 03                         BEQ +
0C6D8 4C 4E C6                          JMP -attributeLoop
0C6DB                               +
0C6DB                           
0C6DB                           
0C6DB                               ;; Stream RAM to PPU
0C6DB 2C 02 20                      BIT PPU_STATUS
0C6DE A9 23                         LDA #$23
0C6E0 8D 06 20                      STA PPU_ADDR
0C6E3 A9 C0                         LDA #$C0
0C6E5 8D 06 20                      STA PPU_ADDR
0C6E8 A2 00                         LDX #$00
0C6EA                               -
0C6EA BD A0 04                          LDA tile_attributes,x
0C6ED 8D 07 20                          STA PPU_DATA
0C6F0 E8                                INX
0C6F1 E0 40                             CPX #$40
0C6F3 D0 F5                         BNE -
0C6F5                               
0C6F5                               ;; Return
0C6F5 60                            RTS
0C6F6                           
0C6F6                           
0C6F6                           ;; Subroutine: draw 28 tiles in a row
0C6F6                           sub_Draw28HorizontalTiles:
0C6F6 A2 1C                         LDX #28
0C6F8                               -
0C6F8 8D 07 20                          STA PPU_DATA
0C6FB CA                                DEX
0C6FC D0 FA                         BNE -
0C6FE 60                            RTS0C6FF                           .include "game/subroutine/LoadIntroScreen.asm"
0C6FF                           sub_LoadIntroScreen:
0C6FF                           
0C6FF                               ;; Load intro palette
0C6FF 2C 02 20                      BIT PPU_STATUS
0C702 A9 3F                         LDA #$3F
0C704 8D 06 20                      STA PPU_ADDR
0C707 A9 00                         LDA #$00
0C709 8D 06 20                      STA PPU_ADDR
0C70C A2 00                         LDX #$00
0C70E                               -
0C70E BD B5 C7                          LDA tbl_IntroScreenPalette,x
0C711 8D 07 20                          STA PPU_DATA
0C714 E8                                INX
0C715 E0 20                             CPX #$20
0C717 D0 F5                         BNE -
0C719                               
0C719                               ;; Put ball in the middle
0C719 A9 7C                         LDA #$7C
0C71B 85 17                         STA ball_xpos_hi
0C71D 85 19                         STA ball_ypos_hi
0C71F                           
0C71F                               ;; Clear the screen
0C71F 20 B1 C2                      JSR sub_ClearScreen
0C722                           
0C722                               ;; Set up intro screen draw loop
0C722 A2 00                         LDX #$00
0C724                           
0C724                           -loop_IntroScreenData:
0C724                           
0C724                               ;; Get current byte from intro screen data
0C724 BD DD C7                      LDA tbl_IntroScreenData,x
0C727                           
0C727                               ;; If current byte is #$3F, we're done drawing.
0C727 C9 3F                         CMP #$3F
0C729 D0 03                         BNE +
0C72B 4C 78 C7                          JMP +goToEndIntroScreen
0C72E                               +
0C72E                           
0C72E                               ;; If highest bits are %11, draw a plain tile
0C72E 29 C0                         AND #%11000000
0C730 D0 03                         BNE +
0C732 4C 58 C7                          JMP +drawTile
0C735                               +
0C735                               
0C735                               ;; If highest bits are %01, set the PPU address
0C735                               ;; If not, draw two logo tiles
0C735 C9 40                         CMP #%01000000
0C737 D0 03                         BNE +drawLogo
0C739 4C 62 C7                          JMP +setPpuAddr
0C73C                           
0C73C                           +drawLogo:
0C73C                               ;; Get bits 0-2 and store in a temp variable
0C73C BD DD C7                      LDA tbl_IntroScreenData,x
0C73F 29 07                         AND #%00000111
0C741 85 00                         STA temp
0C743                               
0C743                               ;; Get bits 3-5, shift over to get a value from 0-7
0C743 BD DD C7                      LDA tbl_IntroScreenData,x
0C746 4A                            LSR
0C747 4A                            LSR
0C748 4A                            LSR
0C749 29 07                         AND #%00000111
0C74B                               
0C74B                               ;; Draw the tile that corresponds with that value
0C74B A8                            TAY
0C74C 20 85 C3                      JSR sub_drawIntroScreenLogoTile
0C74F                               
0C74F                               ;; Do the same for the value stored in temp
0C74F A4 00                         LDY temp
0C751 20 85 C3                      JSR sub_drawIntroScreenLogoTile
0C754                           
0C754                               ;; Next byte please
0C754 E8                            INX
0C755 4C 24 C7                      JMP -loop_IntroScreenData
0C758                           
0C758                           +drawTile:
0C758                               ;; Just draw the tile value on screen
0C758 BD DD C7                      LDA tbl_IntroScreenData,x
0C75B 8D 07 20                      STA PPU_DATA
0C75E                               
0C75E                               ;; Next byte please
0C75E E8                            INX
0C75F 4C 24 C7                      JMP -loop_IntroScreenData
0C762                           
0C762                           
0C762                           +setPpuAddr:
0C762                               ;; Reset the PPU latch
0C762 2C 02 20                      BIT PPU_STATUS
0C765                               
0C765                               ;; Sanitize and write the high byte of the PPU address
0C765 BD DD C7                      LDA tbl_IntroScreenData,x
0C768 29 3F                         AND #%00111111
0C76A 8D 06 20                      STA PPU_ADDR
0C76D                           
0C76D                               ;; Write the low byte of the PPU address
0C76D E8                            INX
0C76E BD DD C7                      LDA tbl_IntroScreenData,x
0C771 8D 06 20                      STA PPU_ADDR
0C774                               
0C774                               ;; PPU has been set up to draw tiles at the correct spot now.
0C774                               
0C774                               ;; Next byte please.
0C774 E8                            INX
0C775 4C 24 C7                      JMP -loop_IntroScreenData
0C778                           
0C778                           +goToEndIntroScreen:
0C778                           
0C778                               ;; To color the 1.LEVEL: line green, we need to update two
0C778                               ;; values in the PPU attribute data.
0C778 2C 02 20                      BIT PPU_STATUS
0C77B A9 23                         LDA #$23
0C77D 8D 06 20                      STA PPU_ADDR
0C780 A9 CB                         LDA #$CB
0C782 8D 06 20                      STA PPU_ADDR
0C785 A9 0A                         LDA #%00001010
0C787 8D 07 20                      STA PPU_DATA
0C78A 8D 07 20                      STA PPU_DATA
0C78D                           
0C78D 60                            RTS
0C78E                           
0C78E                           .include "game/subroutine/LoadWinScreen.asm"
0C78E                           sub_LoadWinScreen:
0C78E 60                            RTS
0C78F                           
0C78F                           .include "game/subroutine/WriteByteToPPU.asm"
0C78F                           sub_WriteByteToPPUBuffer:
0C78F                           
0C78F                               ;; Prevent updating until full 3-byte buffer is filled,
0C78F                               ;; so that graphics won't glitch out if NMI happens during
0C78F                               ;; updating the buffer
0C78F A9 00                         LDA #$00
0C791 85 29                         STA ppu_buffer_update
0C793                           
0C793                               ;; Check if buffer full; if so, wait a frame and force update
0C793 A4 2A                         LDY ppu_buffer_pointer
0C795 C0 30                         CPY #$30
0C797 D0 05                         BNE +
0C799 E6 29                             INC ppu_buffer_update
0C79B 20 AB C2                          JSR sub_WaitForVBlank
0C79E                               +
0C79E                           
0C79E                               ;; Add ppu_addr high byte to buffer
0C79E A5 00                         LDA temp
0C7A0 99 00 03                      STA ppu_buffer,y
0C7A3                           
0C7A3                               ;; Add ppu_addr low byte to buffer
0C7A3 C8                            INY
0C7A4 A5 01                         LDA temp+1
0C7A6 99 00 03                      STA ppu_buffer,y
0C7A9                           
0C7A9                               ;; Add ppu_data to buffer
0C7A9 C8                            INY
0C7AA A5 02                         LDA temp+2
0C7AC 99 00 03                      STA ppu_buffer,y
0C7AF                           
0C7AF                               ;; Update buffer pointer
0C7AF C8                            INY
0C7B0 84 2A                         STY ppu_buffer_pointer
0C7B2                           
0C7B2                               ;; Tell NMI to update next round
0C7B2 E6 29                         INC ppu_buffer_update
0C7B4                           
0C7B4                               ;; Return
0C7B4 60                            RTS0C7B5                           
0C7B5                           
0C7B5                           ;; LUTs
0C7B5                           .include "game/include/tables.asm"
0C7B5                           
0C7B5                           ;; Intro screen palette
0C7B5                           tbl_IntroScreenPalette:
0C7B5 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C7B9 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C7BD 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C7C1 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C7C5                           
0C7C5 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C7C9 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C7CD 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C7D1 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C7D5                           
0C7D5                           
0C7D5                           ;; Intro: mapping logo index to chr tile
0C7D5                           tbl_IntroScreenLogoChr:
0C7D5 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0C7DD                           
0C7DD                           
0C7DD                           ;; Intro screen data
0C7DD                           tbl_IntroScreenData:
0C7DD                           
0C7DD                               ;; Set PPU address $20AC and draw
0C7DD 60 AC                         .db #$60, #$AC
0C7DF 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0C7E7                           
0C7E7                               ;; Set PPU address $20CF and draw
0C7E7 60 CF                         .db #$60, #$CF
0C7E9 01 02                         .db #_0, #_1
0C7EB                               
0C7EB                               ;; Set PPU address $2122 and draw
0C7EB 61 22                         .db #$61, #$22
0C7ED 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0C7F4 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0C7FA 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0C802 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0C807                               
0C807                               ;; Set PPU address $2147 and draw
0C807 61 47                         .db #$61, #$47
0C809 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0C810 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C814 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0C81A 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0C820                               
0C820                               ;; Set PPU address $218B and draw
0C820 61 8B                         .db #$61, #$8B
0C822 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0C828 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0C82D                               
0C82D                               ;; Set PPU address $21E6 and draw
0C82D 61 E6                         .db #$61, #$E6
0C82F 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0C837 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C83B 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0C842                               
0C842                               ;; Set PPU address $222D and draw
0C842 62 2D                         .db #$62, #$2D
0C844 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0C84A                               
0C84A                               ;; Set PPU address $2281
0C84A 62 81                         .db #$62, #$81
0C84C                               
0C84C                               ;; Draw the Crillion logo
0C84C E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0C850 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C854 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0C858 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0C85C                               
0C85C D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0C860 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C864 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C868 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C86C                               
0C86C D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0C870 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C874 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C878 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C87C                           
0C87C D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C880 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C884 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C888 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C88C                               
0C88C D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C890 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C894 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C898 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C89C                           
0C89C F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0C8A0 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0C8A4 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0C8A8 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0C8AB                           
0C8AB                               ;; End of intro
0C8AB 3F                            .db #$3F
0C8AC                           
0C8AC                           
0C8AC                           ;; test animation table
0C8AC                           .include "game/test/show_animation_table.asm"
0C8AC                           ;; CHR tile-id's per slide of explosion
0C8AC                           explosion_slide0:
0C8AC 00 00 00                      .db #$00, #$00, #$00
0C8AF 2C 2D 2E                      .db #$2C, #$2D, #$2E
0C8B2 3C 3D 3E                      .db #$3C, #$3D, #$3E
0C8B5                           
0C8B5                           explosion_slide1:
0C8B5 00 00 00                      .db #$00, #$00, #$00
0C8B8 29 2A 2B                      .db #$29, #$2A, #$2B
0C8BB 39 3A 3B                      .db #$39, #$3A, #$3B
0C8BE                           
0C8BE                           explosion_slide2:
0C8BE 16 00 00                      .db #$16, #$00, #$00
0C8C1 26 27 28                      .db #$26, #$27, #$28
0C8C4 36 37 38                      .db #$36, #$37, #$38
0C8C7                           
0C8C7                           explosion_slide3:
0C8C7 00 14 15                      .db #$00, #$14, #$15
0C8CA 23 24 25                      .db #$23, #$24, #$25
0C8CD 33 34 35                      .db #$33, #$34, #$35
0C8D0                           
0C8D0                           explosion_slide4:
0C8D0 10 11 12                      .db #$10, #$11, #$12
0C8D3 20 21 22                      .db #$20, #$21, #$22
0C8D6 30 31 32                      .db #$30, #$31, #$32
0C8D9                           
0C8D9                           ;; High and low bytes of animation slides
0C8D9                           explosion_anim_hi:
0C8D9 C8                            .db >#explosion_slide0
0C8DA C8                            .db >#explosion_slide1
0C8DB C8                            .db >#explosion_slide2
0C8DC C8                            .db >#explosion_slide3
0C8DD C8                            .db >#explosion_slide4
0C8DE C8                            .db >#explosion_slide4
0C8DF C8                            .db >#explosion_slide3
0C8E0 C8                            .db >#explosion_slide2
0C8E1 C8                            .db >#explosion_slide1
0C8E2 C8                            .db >#explosion_slide0
0C8E3                           
0C8E3                           explosion_anim_lo:
0C8E3 AC                            .db <#explosion_slide0
0C8E4 B5                            .db <#explosion_slide1
0C8E5 BE                            .db <#explosion_slide2
0C8E6 C7                            .db <#explosion_slide3
0C8E7 D0                            .db <#explosion_slide4
0C8E8 D0                            .db <#explosion_slide4
0C8E9 C7                            .db <#explosion_slide3
0C8EA BE                            .db <#explosion_slide2
0C8EB B5                            .db <#explosion_slide1
0C8EC AC                            .db <#explosion_slide0
0C8ED                           
0C8ED                           
0C8ED                           
0C8ED                           ;; Ball palette color cycle
0C8ED                           tbl_BallColorDark:
0C8ED 12 14 16 27 28 19             .db #$12, #$14, #$16, #$27, #$28, #$19
0C8F3                            
0C8F3                           tbl_BallColorLight:
0C8F3 2C 24 25 37 20 2B             .db #$2C, #$24, #$25, #$37, #$20, #$2B
0C8F9                           
0C8F9                               
0C8F9                           ;; Screen mode drawing routine addresses
0C8F9                           tbl_LoadScreenHi:
0C8F9 C6 C3 C7                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0C8FC                           
0C8FC                           tbl_LoadScreenLo:
0C8FC FF 9B 8E                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0C8FF                           
0C8FF                           
0C8FF                           ;; Test level data
0C8FF                           .include "game/test/level_data.asm"
0C8FF                           lvl_layout_01:
0C8FF 61 21                         .db #$61, #%00100001
0C901 52 61                         .db #$52, #%01100001
0C903 43 65                         .db #$43, #%01100101
0C905 83 05                         .db #$83, #%00000101
0C907 93 15                         .db #$93, #%00010101
0C909 34 7A                         .db #$34, #%01111010
0C90B 74 7A                         .db #$74, #%01111010
0C90D 35 7A                         .db #$35, #%01111010
0C90F 75 7A                         .db #$75, #%01111010
0C911 46 65                         .db #$46, #%01100101
0C913 86 25                         .db #$86, #%00100101
0C915 57 61                         .db #$57, #%01100001
0C917 68 21                         .db #$68, #%00100001
0C919 FF                            .db #LEVEL_END
0C91A                           
0C91A                           lvl_layout_02:
0C91A C0 0A                         .db #$C0, #%00001010
0C91C 11 15                         .db #$11, #%00010101
0C91E 21 62                         .db #$21, #%01100010
0C920 61 62                         .db #$61, #%01100010
0C922 A1 42                         .db #$A1, #%01000010
0C924 12 67                         .db #$12, #%01100111
0C926 52 67                         .db #$52, #%01100111
0C928 92 67                         .db #$92, #%01100111
0C92A C3 0D                         .db #$C3, #%00001101
0C92C 14 11                         .db #$14, #%00010001
0C92E 24 65                         .db #$24, #%01100101
0C930 64 65                         .db #$64, #%01100101
0C932 A4 45                         .db #$A4, #%01000101
0C934 15 67                         .db #$15, #%01100111
0C936 55 67                         .db #$55, #%01100111
0C938 95 67                         .db #$95, #%01100111
0C93A 17 12                         .db #$17, #%00010010
0C93C 27 61                         .db #$27, #%01100001
0C93E 67 61                         .db #$67, #%01100001
0C940 A7 41                         .db #$A7, #%01000001
0C942 38 7A                         .db #$38, #%01111010
0C944 98 5A                         .db #$98, #%01011010
0C946 18 27                         .db #$18, #%00100111
0C948 48 27                         .db #$48, #%00100111
0C94A 78 27                         .db #$78, #%00100111
0C94C C8 07                         .db #$C8, #%00000111
0C94E FF                            .db #LEVEL_END
0C94F                           
0C94F                           lvl_layout_03:
0C94F 00 7A                         .db #$00, #%01111010
0C951 40 7A                         .db #$40, #%01111010
0C953 80 7A                         .db #$80, #%01111010
0C955 C0 1A                         .db #$C0, #%00011010
0C957 10 A1                         .db #$10, #%10100001
0C959 13 E1                         .db #$13, #%11100001
0C95B 17 C1                         .db #$17, #%11000001
0C95D 30 C1                         .db #$30, #%11000001
0C95F 34 C1                         .db #$34, #%11000001
0C961 38 A1                         .db #$38, #%10100001
0C963 50 E1                         .db #$50, #%11100001
0C965 55 81                         .db #$55, #%10000001
0C967 57 C1                         .db #$57, #%11000001
0C969 70 C1                         .db #$70, #%11000001
0C96B 73 A1                         .db #$73, #%10100001
0C96D 76 E1                         .db #$76, #%11100001
0C96F 90 E1                         .db #$90, #%11100001
0C971 95 81                         .db #$95, #%10000001
0C973 97 C1                         .db #$97, #%11000001
0C975 B0 C1                         .db #$B0, #%11000001
0C977 B4 C1                         .db #$B4, #%11000001
0C979 B8 A1                         .db #$B8, #%10100001
0C97B D0 A1                         .db #$D0, #%10100001
0C97D D3 E1                         .db #$D3, #%11100001
0C97F D7 C1                         .db #$D7, #%11000001
0C981 FF                            .db #LEVEL_END
0C982                           
0C982                           lvl_layout_04:
0C982 00 44                         .db #$00, #%01000100
0C984 30 A9                         .db #$30, #%10101001
0C986 40 64                         .db #$40, #%01100100
0C988 80 44                         .db #$80, #%01000100
0C98A B0 29                         .db #$B0, #%00101001
0C98C 01 49                         .db #$01, #%01001001
0C98E 41 69                         .db #$41, #%01101001
0C990 81 A4                         .db #$81, #%10100100
0C992 91 A9                         .db #$91, #%10101001
0C994 A1 29                         .db #$A1, #%00101001
0C996 C1 24                         .db #$C1, #%00100100
0C998 02 64                         .db #$02, #%01100100
0C99A 42 C4                         .db #$42, #%11000100
0C99C 52 C9                         .db #$52, #%11001001
0C99E 62 E4                         .db #$62, #%11100100
0C9A0 72 E9                         .db #$72, #%11101001
0C9A2 A2 C4                         .db #$A2, #%11000100
0C9A4 B2 C9                         .db #$B2, #%11001001
0C9A6 C2 29                         .db #$C2, #%00101001
0C9A8 03 49                         .db #$03, #%01001001
0C9AA 33 C9                         .db #$33, #%11001001
0C9AC 83 29                         .db #$83, #%00101001
0C9AE C3 C4                         .db #$C3, #%11000100
0C9B0 D3 E9                         .db #$D3, #%11101001
0C9B2 04 44                         .db #$04, #%01000100
0C9B4 84 24                         .db #$84, #%00100100
0C9B6 05 29                         .db #$05, #%00101001
0C9B8 25 A4                         .db #$25, #%10100100
0C9BA 45 E9                         .db #$45, #%11101001
0C9BC 85 A4                         .db #$85, #%10100100
0C9BE A5 29                         .db #$A5, #%00101001
0C9C0 06 A4                         .db #$06, #%10100100
0C9C2 16 A9                         .db #$16, #%10101001
0C9C4 36 C4                         .db #$36, #%11000100
0C9C6 56 C4                         .db #$56, #%11000100
0C9C8 66 E4                         .db #$66, #%11100100
0C9CA 76 A9                         .db #$76, #%10101001
0C9CC 96 E4                         .db #$96, #%11100100
0C9CE 27 A9                         .db #$27, #%10101001
0C9D0 57 09                         .db #$57, #%00001001
0C9D2 87 49                         .db #$87, #%01001001
0C9D4 B7 A9                         .db #$B7, #%10101001
0C9D6 C7 A4                         .db #$C7, #%10100100
0C9D8 08 24                         .db #$08, #%00100100
0C9DA 78 64                         .db #$78, #%01100100
0C9DC D8 04                         .db #$D8, #%00000100
0C9DE 19 29                         .db #$19, #%00101001
0C9E0 39 49                         .db #$39, #%01001001
0C9E2 89 49                         .db #$89, #%01001001
0C9E4 C9 29                         .db #$C9, #%00101001
0C9E6 FF                            .db #LEVEL_END
0C9E7                           
0C9E7                           lvl_layout_05:
0C9E7 40 0A                         .db #$40, #%00001010
0C9E9 70 1A                         .db #$70, #%00011010
0C9EB B0 42                         .db #$B0, #%01000010
0C9ED 41 A7                         .db #$41, #%10100111
0C9EF B1 22                         .db #$B1, #%00100010
0C9F1 D1 15                         .db #$D1, #%00010101
0C9F3 22 0A                         .db #$22, #%00001010
0C9F5 52 05                         .db #$52, #%00000101
0C9F7 B2 42                         .db #$B2, #%01000010
0C9F9 03 27                         .db #$03, #%00100111
0C9FB 33 67                         .db #$33, #%01100111
0C9FD 73 67                         .db #$73, #%01100111
0C9FF B3 47                         .db #$B3, #%01000111
0CA01 05 E5                         .db #$05, #%11100101
0CA03 25 A5                         .db #$25, #%10100101
0CA05 35 25                         .db #$35, #%00100101
0CA07 65 45                         .db #$65, #%01000101
0CA09 A5 45                         .db #$A5, #%01000101
0CA0B 46 E5                         .db #$46, #%11100101
0CA0D 66 E5                         .db #$66, #%11100101
0CA0F 86 E5                         .db #$86, #%11100101
0CA11 A6 E2                         .db #$A6, #%11100010
0CA13 C6 E5                         .db #$C6, #%11100101
0CA15 27 25                         .db #$27, #%00100101
0CA17 77 05                         .db #$77, #%00000101
0CA19 B7 02                         .db #$B7, #%00000010
0CA1B 09 05                         .db #$09, #%00000101
0CA1D 79 05                         .db #$79, #%00000101
0CA1F B9 02                         .db #$B9, #%00000010
0CA21 FF                            .db #LEVEL_END
0CA22                           
0CA22                           lvl_layout_06:
0CA22 00 03                         .db #$00, #%00000011
0CA24 20 03                         .db #$20, #%00000011
0CA26 40 03                         .db #$40, #%00000011
0CA28 A0 03                         .db #$A0, #%00000011
0CA2A C0 03                         .db #$C0, #%00000011
0CA2C 11 03                         .db #$11, #%00000011
0CA2E 31 03                         .db #$31, #%00000011
0CA30 51 03                         .db #$51, #%00000011
0CA32 91 03                         .db #$91, #%00000011
0CA34 B1 03                         .db #$B1, #%00000011
0CA36 D1 03                         .db #$D1, #%00000011
0CA38 02 03                         .db #$02, #%00000011
0CA3A 22 03                         .db #$22, #%00000011
0CA3C 42 03                         .db #$42, #%00000011
0CA3E A2 03                         .db #$A2, #%00000011
0CA40 C2 03                         .db #$C2, #%00000011
0CA42 13 03                         .db #$13, #%00000011
0CA44 33 03                         .db #$33, #%00000011
0CA46 53 03                         .db #$53, #%00000011
0CA48 93 03                         .db #$93, #%00000011
0CA4A B3 03                         .db #$B3, #%00000011
0CA4C D3 03                         .db #$D3, #%00000011
0CA4E 04 03                         .db #$04, #%00000011
0CA50 24 03                         .db #$24, #%00000011
0CA52 44 03                         .db #$44, #%00000011
0CA54 A4 03                         .db #$A4, #%00000011
0CA56 C4 03                         .db #$C4, #%00000011
0CA58 15 03                         .db #$15, #%00000011
0CA5A 35 03                         .db #$35, #%00000011
0CA5C 55 03                         .db #$55, #%00000011
0CA5E 95 03                         .db #$95, #%00000011
0CA60 B5 03                         .db #$B5, #%00000011
0CA62 D5 03                         .db #$D5, #%00000011
0CA64 06 03                         .db #$06, #%00000011
0CA66 26 03                         .db #$26, #%00000011
0CA68 46 03                         .db #$46, #%00000011
0CA6A A6 03                         .db #$A6, #%00000011
0CA6C C6 03                         .db #$C6, #%00000011
0CA6E 17 03                         .db #$17, #%00000011
0CA70 37 03                         .db #$37, #%00000011
0CA72 57 03                         .db #$57, #%00000011
0CA74 97 03                         .db #$97, #%00000011
0CA76 B7 03                         .db #$B7, #%00000011
0CA78 D7 03                         .db #$D7, #%00000011
0CA7A 08 03                         .db #$08, #%00000011
0CA7C 28 03                         .db #$28, #%00000011
0CA7E 48 03                         .db #$48, #%00000011
0CA80 A8 03                         .db #$A8, #%00000011
0CA82 C8 03                         .db #$C8, #%00000011
0CA84 19 03                         .db #$19, #%00000011
0CA86 39 03                         .db #$39, #%00000011
0CA88 59 03                         .db #$59, #%00000011
0CA8A 99 03                         .db #$99, #%00000011
0CA8C B9 03                         .db #$B9, #%00000011
0CA8E D9 03                         .db #$D9, #%00000011
0CA90 60 4B                         .db #$60, #%01001011
0CA92 71 CB                         .db #$71, #%11001011
0CA94 62 4B                         .db #$62, #%01001011
0CA96 64 4B                         .db #$64, #%01001011
0CA98 75 CB                         .db #$75, #%11001011
0CA9A 66 4B                         .db #$66, #%01001011
0CA9C 68 4B                         .db #$68, #%01001011
0CA9E 79 0B                         .db #$79, #%00001011
0CAA0 70 03                         .db #$70, #%00000011
0CAA2 72 03                         .db #$72, #%00000011
0CAA4 74 03                         .db #$74, #%00000011
0CAA6 76 03                         .db #$76, #%00000011
0CAA8 78 03                         .db #$78, #%00000011
0CAAA FF                            .db #LEVEL_END
0CAAB                           
0CAAB                           lvl_layout_07:
0CAAB 00 11                         .db #$00, #%00010001
0CAAD 01 FC                         .db #$01, #%11111100
0CAAF 12 BC                         .db #$12, #%10111100
0CAB1 23 DC                         .db #$23, #%11011100
0CAB3 34 FC                         .db #$34, #%11111100
0CAB5 05 DC                         .db #$05, #%11011100
0CAB7 15 FC                         .db #$15, #%11111100
0CAB9 45 BC                         .db #$45, #%10111100
0CABB 56 DC                         .db #$56, #%11011100
0CABD 27 BC                         .db #$27, #%10111100
0CABF 67 DC                         .db #$67, #%11011100
0CAC1 38 3C                         .db #$38, #%00111100
0CAC3 78 BC                         .db #$78, #%10111100
0CAC5 09 3C                         .db #$09, #%00111100
0CAC7 39 3C                         .db #$39, #%00111100
0CAC9 89 1C                         .db #$89, #%00011100
0CACB B0 01                         .db #$B0, #%00000001
0CACD D0 01                         .db #$D0, #%00000001
0CACF A1 01                         .db #$A1, #%00000001
0CAD1 C1 11                         .db #$C1, #%00010001
0CAD3 B2 01                         .db #$B2, #%00000001
0CAD5 D2 01                         .db #$D2, #%00000001
0CAD7 A3 01                         .db #$A3, #%00000001
0CAD9 C3 01                         .db #$C3, #%00000001
0CADB B4 01                         .db #$B4, #%00000001
0CADD D4 01                         .db #$D4, #%00000001
0CADF A5 01                         .db #$A5, #%00000001
0CAE1 C5 01                         .db #$C5, #%00000001
0CAE3 B6 01                         .db #$B6, #%00000001
0CAE5 D6 01                         .db #$D6, #%00000001
0CAE7 A7 01                         .db #$A7, #%00000001
0CAE9 C7 01                         .db #$C7, #%00000001
0CAEB FF                            .db #LEVEL_END
0CAEC                           
0CAEC                           lvl_layout_08:
0CAEC 40 B5                         .db #$40, #%10110101
0CAEE 31 0D                         .db #$31, #%00001101
0CAF0 61 10                         .db #$61, #%00010000
0CAF2 42 C7                         .db #$42, #%11000111
0CAF4 52 67                         .db #$52, #%01100111
0CAF6 63 C7                         .db #$63, #%11000111
0CAF8 83 E7                         .db #$83, #%11100111
0CAFA 05 07                         .db #$05, #%00000111
0CAFC 15 3A                         .db #$15, #%00111010
0CAFE 07 63                         .db #$07, #%01100011
0CB00 27 13                         .db #$27, #%00010011
0CB02 38 A5                         .db #$38, #%10100101
0CB04 09 14                         .db #$09, #%00010100
0CB06 19 05                         .db #$19, #%00000101
0CB08 D0 E0                         .db #$D0, #%11100000
0CB0A C2 A0                         .db #$C2, #%10100000
0CB0C B3 E0                         .db #$B3, #%11100000
0CB0E D5 E0                         .db #$D5, #%11100000
0CB10 C6 E0                         .db #$C6, #%11100000
0CB12 B0 C4                         .db #$B0, #%11000100
0CB14 C0 A4                         .db #$C0, #%10100100
0CB16 D1 A4                         .db #$D1, #%10100100
0CB18 C4 24                         .db #$C4, #%00100100
0CB1A C5 04                         .db #$C5, #%00000100
0CB1C B7 44                         .db #$B7, #%01000100
0CB1E B8 A4                         .db #$B8, #%10100100
0CB20 D9 05                         .db #$D9, #%00000101
0CB22 FF                            .db #LEVEL_END
0CB23                           
0CB23                           lvl_layout_09:
0CB23 00 02                         .db #$00, #%00000010
0CB25 10 C9                         .db #$10, #%11001001
0CB27 50 C9                         .db #$50, #%11001001
0CB29 90 C9                         .db #$90, #%11001001
0CB2B D0 C9                         .db #$D0, #%11001001
0CB2D 31 C9                         .db #$31, #%11001001
0CB2F 71 C9                         .db #$71, #%11001001
0CB31 B1 C9                         .db #$B1, #%11001001
0CB33 13 C9                         .db #$13, #%11001001
0CB35 53 C9                         .db #$53, #%11001001
0CB37 93 C9                         .db #$93, #%11001001
0CB39 D3 C9                         .db #$D3, #%11001001
0CB3B 34 C9                         .db #$34, #%11001001
0CB3D 74 C9                         .db #$74, #%11001001
0CB3F B4 C9                         .db #$B4, #%11001001
0CB41 16 C9                         .db #$16, #%11001001
0CB43 56 C9                         .db #$56, #%11001001
0CB45 96 C9                         .db #$96, #%11001001
0CB47 D6 C9                         .db #$D6, #%11001001
0CB49 37 C9                         .db #$37, #%11001001
0CB4B 77 C9                         .db #$77, #%11001001
0CB4D B7 C9                         .db #$B7, #%11001001
0CB4F D8 12                         .db #$D8, #%00010010
0CB51 FF                            .db #LEVEL_END
0CB52                           
0CB52                           lvl_layout_10:
0CB52 00 65                         .db #$00, #%01100101
0CB54 40 45                         .db #$40, #%01000101
0CB56 50 A7                         .db #$50, #%10100111
0CB58 80 05                         .db #$80, #%00000101
0CB5A 90 A7                         .db #$90, #%10100111
0CB5C A0 65                         .db #$A0, #%01100101
0CB5E 01 43                         .db #$01, #%01000011
0CB60 31 23                         .db #$31, #%00100011
0CB62 61 A7                         .db #$61, #%10100111
0CB64 81 A7                         .db #$81, #%10100111
0CB66 A1 63                         .db #$A1, #%01100011
0CB68 02 44                         .db #$02, #%01000100
0CB6A 32 44                         .db #$32, #%01000100
0CB6C 92 04                         .db #$92, #%00000100
0CB6E A2 64                         .db #$A2, #%01100100
0CB70 03 40                         .db #$03, #%01000000
0CB72 33 40                         .db #$33, #%01000000
0CB74 63 A1                         .db #$63, #%10100001
0CB76 83 A2                         .db #$83, #%10100010
0CB78 93 00                         .db #$93, #%00000000
0CB7A A3 60                         .db #$A3, #%01100000
0CB7C 04 41                         .db #$04, #%01000001
0CB7E 34 41                         .db #$34, #%01000001
0CB80 94 02                         .db #$94, #%00000010
0CB82 A4 62                         .db #$A4, #%01100010
0CB84 05 47                         .db #$05, #%01000111
0CB86 35 67                         .db #$35, #%01100111
0CB88 75 0A                         .db #$75, #%00001010
0CB8A 85 47                         .db #$85, #%01000111
0CB8C B5 47                         .db #$B5, #%01000111
0CB8E 06 E7                         .db #$06, #%11100111
0CB90 16 5A                         .db #$16, #%01011010
0CB92 26 11                         .db #$26, #%00010001
0CB94 46 13                         .db #$46, #%00010011
0CB96 56 1A                         .db #$56, #%00011010
0CB98 66 14                         .db #$66, #%00010100
0CB9A 86 10                         .db #$86, #%00010000
0CB9C 96 5C                         .db #$96, #%01011100
0CB9E A6 12                         .db #$A6, #%00010010
0CBA0 C6 15                         .db #$C6, #%00010101
0CBA2 D6 E7                         .db #$D6, #%11100111
0CBA4 FF                            .db #LEVEL_END
0CBA5                           
0CBA5                           lvl_layout_11:
0CBA5 FF                            .db #LEVEL_END
0CBA6                           
0CBA6                           lvl_layout_12:
0CBA6 FF                            .db #LEVEL_END
0CBA7                           
0CBA7                           lvl_layout_13:
0CBA7 FF                            .db #LEVEL_END
0CBA8                           
0CBA8                           lvl_layout_14:
0CBA8 FF                            .db #LEVEL_END
0CBA9                           
0CBA9                           lvl_layout_15:
0CBA9 FF                            .db #LEVEL_END
0CBAA                           
0CBAA                           lvl_layout_16:
0CBAA FF                            .db #LEVEL_END
0CBAB                           
0CBAB                           lvl_layout_17:
0CBAB FF                            .db #LEVEL_END
0CBAC                           
0CBAC                           lvl_layout_18:
0CBAC FF                            .db #LEVEL_END
0CBAD                           
0CBAD                           lvl_layout_19:
0CBAD FF                            .db #LEVEL_END
0CBAE                           
0CBAE                           lvl_layout_20:
0CBAE FF                            .db #LEVEL_END
0CBAF                           
0CBAF                           lvl_layout_21:
0CBAF FF                            .db #LEVEL_END
0CBB0                           
0CBB0                           lvl_layout_22:
0CBB0 FF                            .db #LEVEL_END
0CBB1                           
0CBB1                           lvl_layout_23:
0CBB1 FF                            .db #LEVEL_END
0CBB2                           
0CBB2                           lvl_layout_24:
0CBB2 FF                            .db #LEVEL_END
0CBB3                           
0CBB3                           lvl_layout_25:
0CBB3 FF                            .db #LEVEL_END
0CBB4                           
0CBB4                           ;; Level layout address pointers
0CBB4                           tbl_lvl_layout_hi:
0CBB4 C8 C9 C9 C9 C9                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0CBB9 CA CA CA CB CB                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0CBBE CB CB CB CB CB                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0CBC3 CB CB CB CB CB                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0CBC8 CB CB CB CB CB                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0CBCD                           
0CBCD                           tbl_lvl_layout_lo:
0CBCD FF 1A 4F 82 E7                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0CBD2 22 AB EC 23 52                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0CBD7 A5 A6 A7 A8 A9                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0CBDC AA AB AC AD AE                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0CBE1 AF B0 B1 B2 B3                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0CBE6                           
0CBE6                           
0CBE6                           
0CBE6                           ;; Helper table to multiply values by 64
0CBE6                           tbl_Times64:
0CBE6 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0CBEA                           
0CBEA                           
0CBEA                           ;; Metatile ID to CHR data mapper
0CBEA                           tbl_GametileTopLeft:
0CBEA 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0CBF4                           
0CBF4                           tbl_GametileTopRight:
0CBF4 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0CBFE                           
0CBFE                           tbl_GametileBottomLeft:
0CBFE 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0CC08                           
0CC08                           tbl_GametileBottomRight:
0CC08 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0CC12                           
0CC12                           ;; Metatile ID to RAM byte data mapper
0CC12                           tbl_GameTileRamByte:
0CC12 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0CC17                           
0CC17                           ;; HUD text data
0CC17                           tbl_HudText:
0CC17 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0CC1F 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0CC26 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0CC2E 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0CC33                           
0CC33                           ;; NMI handler
0CC33                           NMI:
0CC33                               .include "interrupt/nmi.asm"
0CC33                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0CC33                           ;;
0CC33                           ;; include/nmi.asm
0CC33                           ;;
0CC33                           ;; Non-maskable interrupt script. This script is being executed
0CC33                           ;; when vBlank hits.
0CC33                           ;;
0CC33                           ;;
0CC33                           
0CC33                               ;; Preserve accumulator through stack
0CC33 48                            PHA
0CC34                           
0CC34                               ;; Should NMI be skipped?
0CC34 A5 13                         LDA skip_nmi
0CC36 F0 03                         BEQ +
0CC38 4C C6 CC                          JMP +skip_nmi
0CC3B                               +
0CC3B                           
0CC3B                               ;; When in NMI, skip additional NMI requests
0CC3B A9 01                         LDA #$01
0CC3D 85 13                         STA skip_nmi
0CC3F                           
0CC3F                               ;; Preserve X, Y, and PC through stack
0CC3F 8A                            TXA
0CC40 48                            PHA
0CC41 98                            TYA
0CC42 48                            PHA
0CC43 08                            PHP
0CC44                               
0CC44                               ;; Check forced NMI skip
0CC44 A5 14                         LDA force_skip_nmi
0CC46 F0 03                         BEQ +
0CC48 4C B7 CC                          JMP +force_skip_nmi
0CC4B                               +
0CC4B                           
0CC4B                               ;; Update PPU mask
0CC4B                               ;LDA #$00
0CC4B                               ;STA PPU_CTRL
0CC4B A5 12                         LDA soft_ppu_mask
0CC4D 8D 01 20                      STA PPU_MASK
0CC50                               
0CC50                               
0CC50                               ;; Additional PPU updates go here
0CC50                               .include "game/test/tile_update_nmi.asm"
0CC50                           
0CC50                               ;; Check if ppu_buffer needs updating
0CC50 A5 29                         LDA ppu_buffer_update
0CC52 D0 03                         BNE +
0CC54 4C 96 CC                          JMP +no_ppu_buffer_update
0CC57                               +
0CC57                           
0CC57                               ;; Reset ppu control register and mask
0CC57 A2 00                         LDX #$00
0CC59 8E 00 20                      STX PPU_CTRL
0CC5C 8E 01 20                      STX PPU_MASK
0CC5F                           
0CC5F                               ;; Set up loop
0CC5F                               -
0CC5F                                   ;; Reset hi/lo latch
0CC5F 2C 02 20                          BIT PPU_STATUS
0CC62                           
0CC62                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0CC62 BD 00 03                          LDA ppu_buffer,x
0CC65 8D 06 20                          STA PPU_ADDR
0CC68 E8                                INX
0CC69 BD 00 03                          LDA ppu_buffer,x
0CC6C 8D 06 20                          STA PPU_ADDR
0CC6F                           
0CC6F                                   ;; Write ppu_buffer data to PPU_ADDR
0CC6F E8                                INX
0CC70 BD 00 03                          LDA ppu_buffer,x
0CC73 8D 07 20                          STA PPU_DATA
0CC76                           
0CC76                                   ;; Check if updating is done (eg. X is at pointer)
0CC76 E8                                INX
0CC77 E4 2A                             CPX ppu_buffer_pointer
0CC79 F0 03                             BEQ +
0CC7B 4C 5F CC                      JMP -
0CC7E                           +
0CC7E                           
0CC7E                               ;; Reset ppu buffer update and pointer
0CC7E A9 00                         LDA #$00
0CC80 85 29                         STA ppu_buffer_update
0CC82 85 2A                         STA ppu_buffer_pointer
0CC84                               
0CC84                               ;; Reset scrolling position
0CC84 8D 05 20                      STA PPU_SCROLL
0CC87 8D 05 20                      STA PPU_SCROLL
0CC8A                           
0CC8A                               ;; Restore ppu control register and mask
0CC8A A9 90                         LDA #%10010000
0CC8C 8D 00 20                      STA PPU_CTRL
0CC8F A5 12                         LDA soft_ppu_mask
0CC91 8D 01 20                      STA PPU_MASK
0CC94 A9 00                         LDA #$00
0CC96                           
0CC96                           ;; Continue other NMI stuff
0CC96                           +no_ppu_buffer_update:
0CC96                               .include "game/test/show_animation_nmi.asm"
0CC96                               ;; Reset sprite RAM, draw sprites
0CC96 8D 03 20                      STA OAM_ADDR
0CC99 A9 02                         LDA #$02
0CC9B 8D 14 40                      STA OAM_DMA
0CC9E                           
0CC9E A0 04                         LDY #MAX_ANIMATIONS
0CCA0 A2 00                         LDX #$00
0CCA2                               -
0CCA2 BD 30 03                          LDA explosion_framecounter,x
0CCA5 F0 03                             BEQ +
0CCA7 DE 30 03                              DEC explosion_framecounter,x
0CCAA                                   +
0CCAA E8                                INX
0CCAB 88                                DEY
0CCAC F0 03                             BEQ +done        
0CCAE 4C A2 CC                      JMP -
0CCB1                           +done:
0CCB1                               
0CCB1 A5 2D                         LDA nudge_counter
0CCB3 F0 02                         BEQ +
0CCB5 C6 2D                             DEC nudge_counter
0CCB7                               +
0CCB7                           
0CCB7                           ;; This is what happens when we forced nmi skip
0CCB7                           +force_skip_nmi:
0CCB7                           
0CCB7                               ;; Increase frame counters
0CCB7 E6 15                         INC frame_counter
0CCB9                           
0CCB9                               ;; reset ball_update_position
0CCB9 A9 00                         LDA #$00
0CCBB 85 25                         STA ball_update_position
0CCBD                           
0CCBD                               ;; Don't skip next NMI request
0CCBD A9 00                         LDA #$00
0CCBF 85 13                         STA skip_nmi
0CCC1                           
0CCC1                               ;; Restore X, Y and PC from stack
0CCC1 28                            PLP
0CCC2 68                            PLA
0CCC3 A8                            TAY
0CCC4 68                            PLA
0CCC5 AA                            TAX
0CCC6                           
0CCC6                           +skip_nmi:
0CCC6                               ;; Restore accumulator from stack
0CCC6 68                            PLA
0CCC7                           
0CCC7                               ;; Return
0CCC7 40                            RTI
0CCC8                           
0CCC8                           ;; IRQ handler (empty)
0CCC8                           IRQ:
0CCC8                               .include "interrupt/irq.asm"
0CCC8 40                            RTI0CCC9                           
0CCC9                           ;; Interrupt vectors
0CCC9 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 33 CC                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE C8 CC                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
