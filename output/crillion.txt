	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"
	                            
	                            ;; Enable test mode
	                            ;; - Test mode adds a test level and allows the developer to start
	                            ;;   at any given level with any number of lives. Remove the line
	                            ;;   that starts with TESTING (or add a semicolon in front) to
	                            ;;   disable test mode.
	                            TESTING     =   1
	                            START_LEVEL =   0
	                            LAST_LEVEL  =   1
	                            START_LIVES = 255
	                            
	                            
	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$88        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$06
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; How many bonus points get subtracted per frame after a level
	                            BONUS_COUNTDOWN_PER_FRAME = #$09
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4003
	                            
	                            PULSE2_VOLUME   = $4004
	                            PULSE2_SWEEP    = $4005
	                            PULSE2_TIMER_LO = $4006
	                            PULSE2_TIMER_HI = $4007
	                            PULSE2_LENGTH   = $4007
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Sound effects
	                            SFX_EXPLOSION   = #0
	                            SFX_THUD        = #1
	                            SFX_BOUNCE      = #2
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            
	                            
	                            .include "include/macros.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            
	                            ;; additional game-specific macros go here
	                            ;; (currently none)
	                            
	                            
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Sentience (warm boot) check string
00000                               sentience       .dsb 5
00005                               
00005                               ;; High score variables (declared up high, so basic reset
00005                               ;; can skip over those)
00005                               hi_score        .dsb 6
0000B                               
0000B                               ;; Reserve ten temporary variables for use in subroutines.
0000B                               temp              .dsb 10
00015                           
00015                               ;; Reserve a two-byte temporary variable for use with
00015                               ;; 16-bit operations (like addresses)
00015                               temp16            .dsb 2
00017                           
00017                               ;; Two-byte variable to store a pointer address
00017                               pointer           .dsb 2
00019                           
00019                               ;; Variable to store button presses
00019                               buttons_prev      .dsb 1
0001A                               buttons_held      .dsb 1
0001B                               buttons_pressed   .dsb 1
0001C                               buttons_released  .dsb 1
0001D                           
0001D                               ;; PPU mask buffer variable, used to store the new value of
0001D                               ;; the PPU mask outside NMI
0001D                               soft_ppu_mask     .dsb 1
0001E                           
0001E                               ;; Variables to skip NMI handling
0001E                               skip_nmi          .dsb 1
0001F                               force_skip_nmi    .dsb 1
00020                           
00020                               ;; Counters and seeds
00020                               frame_counter     .dsb 1
00021                               random_seed       .dsb 1
00022                           
00022                               ;; Game specific variables
00022                               .include "game/ram/zp.asm"
00022                           
00022                           ;; Ball variables
00022                           ball_xpos_hi           .dsb 1
00023                           ball_xpos_lo           .dsb 1
00024                           ball_ypos_hi           .dsb 1
00025                           ball_ypos_lo           .dsb 1
00026                           ball_ypos_hi_prev      .dsb 1
00027                           ball_ypos_lo_prev      .dsb 1
00028                           ball_xpos_hi_prev      .dsb 1
00029                           ball_xpos_lo_prev      .dsb 1
0002A                           ball_lives             .dsb 1   ; number of lives left
0002B                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00031                           add_to_score           .dsb 6
00037                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0003A                           
0003A                           ;; Ball bounding box, relative to the screen
0003A                           ball_left              .dsb 1
0003B                           ball_center            .dsb 1
0003C                           ball_right             .dsb 1
0003D                           ball_top               .dsb 1
0003E                           ball_middle            .dsb 1
0003F                           ball_bottom            .dsb 1
00040                           
00040                           ;; Update-position check
00040                           sprites_update_position  .dsb 1
00041                           
00041                           ;; Lock block space helper variable
00041                           ;; When the ball hits a lock block, it should only move if the space
00041                           ;; where it moves to, is not solid. This variable holds the metatile
00041                           ;; offset of the position where the lock block should move to, so
00041                           ;; we can check if it is solid or not.
00041                           ;;
00041                           ;; UP:    #%11110000 #$F0
00041                           ;; DOWN:  #%00010000 #$10
00041                           ;; LEFT:  #%11111111 #$FF
00041                           ;; RIGHT: #%00000001 #$01
00041                           ;;        #%d......h
00041                           move_block_space_to_check  .dsb 1
00042                           
00042                           
00042                           ;; Ball flags
00042                           ;; #% c c c v . f n a
00042                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00042                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00042                           ;;    | | | | | +------ ball is frozen (not moving)
00042                           ;;    | | | | +-------- (unused for now)
00042                           ;;    | | | +---------- ball moves up (0) or down (1)
00042                           ;;    +-+-+------------ ball color (1-6)
00042                           ball_flags             .dsb 1
00043                           
00043                           
00043                           ;; Screen mode
00043                           ;; #% u . . . . . t t
00043                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00043                           ;;    | +-+-+-+-+------------- unused
00043                           ;;    +----------------------- should the screen update
00043                           screen_mode            .dsb 1
00044                           
00044                           
00044                           
00044                           ;; PPU buffer variables
00044                           ppu_buffer_update      .dsb 1
00045                           ppu_buffer_pointer     .dsb 1
00046                           
00046                           ;; Pointer to keep track of the number of explosions
00046                           explosion_pointer      .dsb 1
00047                           
00047                           ;; Pointer to keep track of the number of move blocks
00047                           move_block_pointer     .dsb 1
00048                           
00048                           ;; Sprite RAM pointer to keep track of sprites to update
00048                           sprite_ram_pointer     .dsb 1
00049                           
00049                           ;; Timers 
00049                           nudge_timer            .dsb 1
0004A                           bonus_timer            .dsb 1
0004B                           kill_timer             .dsb 1
0004C                           unfreeze_timer         .dsb 1
0004D                           endgame_palette_timer  .dsb 1
0004E                           
0004E                           ;; Current level (doubles as level select variable)
0004E                           current_level          .dsb 1
0004F                           
0004F                           ;; Tile type the ball is currently colliding with
0004F                           colliding_tile         .dsb 1
00050                           
00050                           ;; Number of blocks left on screen
00050                           blocks_left            .dsb 1
00051                           
00051                           ;; Sound control variables
00051                           max_noise              .dsb 1
00052                           sweep_noise            .dsb 1
00053                           current_noise          .dsb 1
00054                           noise_timer            .dsb 1
00055                           do_beeps               .dsb 1
00056                           soft_pulse1            .dsb 1
00057                           noise_muted            .dsb 1
00058                           
00058                           ;; Sound effect variables
00058                           sfx_address            .dsb 2
0005A                           sfx_timer              .dsb 3
0005D                           sfx_frequency          .dsb 2
0005F                           sfx_sweep_count        .dsb 1
00060                           sfx_sweep_volume       .dsb 1
00061                           sfx_sweep_next_volume  .dsb 1
00062                           sfx_sweep_frequency    .dsb 1
00063                           
00063                           sfx_endgame_enabled    .dsb 1
00064                           sfx_endgame_p1_rest    .dsb 1
00065                           sfx_endgame_p1_freq_hi .dsb 1
00066                           sfx_endgame_p1_freq_lo .dsb 1
00067                           sfx_endgame_p2_rest    .dsb 1
00068                           sfx_endgame_p2_freq_hi .dsb 1
00069                           sfx_endgame_p2_freq_lo .dsb 1
0006A                           
0006A                           
0006A                           ;; Additional NMI check for timed PPU fade
0006A                           check_nmi              .dsb 1
0006B                           
0006B                           ;; The TV system this game is running on (0=ntsc, 1=pal, 2=dendy, 3=unknown)
0006B                           tv_system              .dsb 1
0006C                           
0006C                           ;; This variable should be used for absolutely nothing
0006C                           void                   .dsb 1
0006D                           
0006D                           ;; Hacky solution to prevent double blinds
0006D                           game_won               .dsb 10006E                           
0006E                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 DE C6                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022                                   ;; Skip first eleven bytes
0C022                                   ;; (cold boot check and high score)
0C022 A9 00                             LDA #$00
0C024 E0 0B                             CPX #$0B
0C026 90 02                             BCC +
0C028 95 00                                 STA ADDR_ZEROPAGE,x
0C02A                                   +
0C02A 9D 00 01                          STA $0100,x
0C02D 9D 00 03                          STA $0300,x
0C030 9D 00 04                          STA $0400,x
0C033 9D 00 05                          STA $0500,x
0C036 9D 00 06                          STA $0600,x
0C039 9D 00 07                          STA $0700,x
0C03C                           
0C03C                                   ;; Clear next in line
0C03C E8                                INX
0C03D D0 DE                         BNE -clrMem
0C03F                           
0C03F                               ;; Wait for vBlank
0C03F 20 DE C6                      JSR sub_WaitForVBlank
0C042                           
0C042                           	;; Turn on NMI, set foreground $0000, background $1000
0C042 A9 90                         LDA #%10010000
0C044 8D 00 20                      STA PPU_CTRL
0C047                               
0C047                               ;; Reset PPU scroll pointer
0C047 A0 00                         LDY #0
0C049 8C 05 20                      STY $2005
0C04C 8C 05 20                      STY $2005
0C04F                               
0C04F                               ;; Initialize game
0C04F                               .include "game/interrupt/reset.asm"
0C04F                           
0C04F                           ;; Softer reset
0C04F                           ;; After game over, the game JMPs here to prevent
0C04F                           ;; resetting the high score
0C04F                           
0C04F                           lbl_SoftReset:
0C04F                           
0C04F                               ;; Check for cold or warm boot, by comparing
0C04F                               ;; the 6-byte RAM and ROM sentience string.
0C04F A2 00                         LDX #$00
0C051 A0 00                         LDY #$00
0C053                               -
0C053 BD 30 DD                          LDA tbl_Sentient,x
0C056 D5 00                             CMP sentience,x
0C058 F0 01                             BEQ +
0C05A C8                                    INY
0C05B                                   +
0C05B 95 00                             STA sentience,x
0C05D E8                                INX
0C05E E0 05                             CPX #$05
0C060 D0 F1                         BNE -
0C062                           
0C062                               ;; If system is sentient (warm boot), Y is zero now.
0C062 C0 00                         CPY #$00
0C064 F0 10                         BEQ +
0C066                           
0C066                                   ;; System not sentient (cold boot)
0C066                                   ;; Set default hi score to 50.000
0C066 A9 05                             LDA #$05
0C068 85 06                             STA hi_score+1
0C06A A9 00                             LDA #$00
0C06C 85 05                             STA hi_score
0C06E 85 07                             STA hi_score+2
0C070 85 08                             STA hi_score+3
0C072 85 09                             STA hi_score+4
0C074 85 0A                             STA hi_score+5
0C076                               +
0C076                           
0C076                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C076                           ;;
0C076                           ;;  NES TV system detection code
0C076                           ;;  Copyright 2011 Damian Yerrick
0C076                           ;;  https://www.nesdev.org/wiki/Detect_TV_system
0C076                           ;;
0C076 A2 00                         LDX #$00
0C078 A0 00                         LDY #$00
0C07A A9 01                         LDA #$01
0C07C 85 6A                         STA check_nmi
0C07E                               -
0C07E C5 6A                             CMP check_nmi
0C080 F0 FC                         BEQ -
0C082 A9 01                         LDA #$01
0C084 85 6A                         STA check_nmi
0C086                               -
0C086 E8                                INX
0C087 D0 01                             BNE +
0C089 C8                                    INY
0C08A C5 6A                             + CMP check_nmi
0C08C F0 F8                         BEQ -
0C08E 98                            TYA
0C08F 38                            SEC
0C090 E9 0A                         SBC #$0A
0C092 C9 03                         CMP #$03
0C094 90 02                         BCC +
0C096 A9 03                             LDA #$03
0C098 85 6B                         + STA tv_system ; 0=ntsc, 1=pal, 2=dendy, 3=unknown
0C09A                           ;;
0C09A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C09A                           
0C09A                           
0C09A                               ;; Tell game to load the intro screen
0C09A A9 80                         LDA #LOAD_INTRO_SCREEN
0C09C 85 43                         STA screen_mode
0C09E                           
0C09E                               ;; Set number of lives (5)
0C09E A9 05                         LDA #$05
0C0A0 85 2A                         STA ball_lives
0C0A2                           
0C0A2                               ;; Start at level 1
0C0A2 A9 00                         LDA #$00
0C0A4 85 2B                         STA ball_score
0C0A6 85 2C                         STA ball_score+1
0C0A8 85 2D                         STA ball_score+2
0C0AA 85 2E                         STA ball_score+3
0C0AC 85 2F                         STA ball_score+4
0C0AE 85 30                         STA ball_score+5
0C0B0                           
0C0B0                           ifdef TESTING
0C0B0 A9 FF                         LDA #START_LIVES
0C0B2 85 2A                         STA ball_lives
0C0B4 A9 00                         LDA #START_LEVEL
0C0B6                           endif
0C0B6                           
0C0B6 85 4E                         STA current_level
0C0B8                           
0C0B8                           
0C0B8                           
0C0B8                           ;; Main game loop
0C0B8                           lbl_MainGameLoop:
0C0B8 20 D5 C6                      JSR sub_WaitForNMI ; align main loop
0C0BB                               .include "game/main.asm"
0C0BB                           
0C0BB                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C0BB                           ;;
0C0BB                           ;; game/main.asm
0C0BB                           ;;
0C0BB                           ;; The main game loop content.
0C0BB                           ;;
0C0BB                           ;;
0C0BB                           
0C0BB                               ;; Reset sprite pointer every game loop
0C0BB A9 00                         LDA #$00
0C0BD 85 48                         STA sprite_ram_pointer
0C0BF                           
0C0BF                               ;; Store previous buttons
0C0BF A5 1A                         LDA buttons_held
0C0C1 85 19                         STA buttons_prev
0C0C3                           
0C0C3                               ;; Read controller input
0C0C3 20 C1 C6                      JSR sub_ReadController
0C0C6                           
0C0C6                               ;; Get buttons released
0C0C6 A5 1A                         LDA buttons_held
0C0C8 49 FF                         EOR #$FF
0C0CA 25 19                         AND buttons_prev
0C0CC 85 1C                         STA buttons_released
0C0CE                           
0C0CE                               ;; Set buttons pressed
0C0CE A5 19                         LDA buttons_prev
0C0D0 49 FF                         EOR #$FF
0C0D2 25 1A                         AND buttons_held
0C0D4 85 1B                         STA buttons_pressed
0C0D6                           
0C0D6                               ;; Load screen?
0C0D6 A5 43                         LDA screen_mode
0C0D8 29 80                         AND #%10000000
0C0DA F0 1E                         BEQ +screenLoaded
0C0DC                           
0C0DC                               ;; Get screen type to load
0C0DC A5 43                         LDA screen_mode
0C0DE 29 03                         AND #%00000011
0C0E0 A8                            TAY
0C0E1                               
0C0E1                               ;; Get address to load screen type from
0C0E1 B9 79 D4                      LDA tbl_LoadScreenLo,y
0C0E4 85 17                         STA pointer
0C0E6 B9 76 D4                      LDA tbl_LoadScreenHi,y
0C0E9 85 18                         STA pointer+1
0C0EB                           
0C0EB                               ;; Load screen
0C0EB 20 7A C8                      JSR sub_DisableRendering
0C0EE 20 CF CB                      JSR sub_JumpToPointer
0C0F1 20 8E C8                      JSR sub_EnableRendering
0C0F4                               
0C0F4                               ;; Don't load screen anymore next loop
0C0F4 A5 43                         LDA screen_mode
0C0F6 29 7F                         AND #%01111111
0C0F8 85 43                         STA screen_mode
0C0FA                               
0C0FA                           
0C0FA                           +screenLoaded:
0C0FA                               ;; Check if we're on the game screen
0C0FA A5 43                         LDA screen_mode
0C0FC C9 01                         CMP #IS_GAME_SCREEN
0C0FE F0 03                         BEQ +
0C100 4C A3 C3                          JMP +checkNextScreen
0C103                               +
0C103                           
0C103                               ;; Load sprite 0 in place
0C103 A9 18                         LDA #$18
0C105 8D 00 02                      STA ADDR_SPRITERAM
0C108 A9 0F                         LDA #$0F
0C10A 8D 01 02                      STA ADDR_SPRITERAM+1
0C10D A9 22                         LDA #$22
0C10F 8D 02 02                      STA ADDR_SPRITERAM+2
0C112 A9 F8                         LDA #$F8
0C114 8D 03 02                      STA ADDR_SPRITERAM+3
0C117 A9 04                         LDA #$04
0C119 85 48                         STA sprite_ram_pointer
0C11B                           
0C11B                               ;; We're on the game screen
0C11B                               ;; Check if position should be updated (ie. has nmi happened yet)
0C11B A5 40                         LDA sprites_update_position
0C11D F0 03                         BEQ +
0C11F 4C 09 C3                          JMP +skipSpriteMovement
0C122                               +
0C122                           
0C122                               ;; Check if ball is frozen
0C122 A5 42                         LDA ball_flags
0C124 29 04                         AND #BALL_IS_FROZEN
0C126 F0 03                         BEQ +
0C128 4C C8 C2                          JMP +skipBallMovement
0C12B                               +
0C12B                           
0C12B                               ;; Move the ball
0C12B                               .include "game/include/main/move_ball.asm"
0C12B                           
0C12B                               ;; Check if ball goes up or down
0C12B A5 42                         LDA ball_flags
0C12D 29 10                         AND #BALL_MOVES_DOWN
0C12F F0 2B                         BEQ +moveBallUp
0C131                           
0C131                           
0C131                           +moveBallDown:
0C131                               ;; update the low byte
0C131 A5 25                         LDA ball_ypos_lo
0C133 85 27                         STA ball_ypos_lo_prev
0C135 18                            CLC
0C136 69 88                         ADC #BALL_SPEED_LO
0C138 85 25                         STA ball_ypos_lo
0C13A                           
0C13A                               ;; update the high byte with carry
0C13A A5 24                         LDA ball_ypos_hi
0C13C 85 26                         STA ball_ypos_hi_prev
0C13E 69 01                         ADC #BALL_SPEED_HI
0C140 85 24                         STA ball_ypos_hi
0C142                               
0C142                               ;; Check bottom bound
0C142 C9 C8                         CMP #BOUND_BOTTOM
0C144 90 3C                         BCC +checkHorizontalMovement
0C146 F0 3A                         BEQ +checkHorizontalMovement
0C148                           
0C148                           
0C148                               ;; Change ball direction to "up"
0C148 A9 C8                         LDA #BOUND_BOTTOM
0C14A 38                            SEC
0C14B E9 01                         SBC #$01
0C14D 85 24                         STA ball_ypos_hi
0C14F A9 00                         LDA #$00
0C151 85 25                         STA ball_ypos_lo
0C153 A5 42                         LDA ball_flags
0C155 29 EF                         AND #MOVE_BALL_UP
0C157 85 42                         STA ball_flags
0C159 4C 82 C1                      JMP +checkHorizontalMovement
0C15C                           
0C15C                           
0C15C                           +moveBallUp:
0C15C                               ;; update the low byte
0C15C A5 25                         LDA ball_ypos_lo
0C15E 85 27                         STA ball_ypos_lo_prev
0C160 38                            SEC
0C161 E9 88                         SBC #BALL_SPEED_LO
0C163 85 25                         STA ball_ypos_lo
0C165                           
0C165                               ;; update the high byte with carry
0C165 A5 24                         LDA ball_ypos_hi
0C167 85 26                         STA ball_ypos_hi_prev
0C169 E9 01                         SBC #BALL_SPEED_HI
0C16B 85 24                         STA ball_ypos_hi
0C16D                               
0C16D                               ;; Check top bound
0C16D C9 30                         CMP #BOUND_TOP
0C16F B0 11                         BCS +checkHorizontalMovement
0C171                           
0C171                               ;; Change ball direction to "down"
0C171 A9 30                         LDA #BOUND_TOP
0C173 18                            CLC
0C174 69 01                         ADC #$01
0C176 85 24                         STA ball_ypos_hi
0C178 A9 00                         LDA #$00
0C17A 85 25                         STA ball_ypos_lo
0C17C A5 42                         LDA ball_flags
0C17E 09 10                         ORA #MOVE_BALL_DOWN
0C180 85 42                         STA ball_flags
0C182                           
0C182                           
0C182                           +checkHorizontalMovement:
0C182                           
0C182                               ;; Check if ball is being nudged
0C182 A5 49                         LDA nudge_timer
0C184 D0 41                         BNE +doneBallMovement
0C186                           
0C186                               ;; Check if left button is held
0C186 A5 1A                         LDA buttons_held
0C188 29 02                         AND #BUTTON_LEFT
0C18A F0 1B                         BEQ +
0C18C                                   ;; update the low byte
0C18C A5 23                             LDA ball_xpos_lo
0C18E 38                                SEC
0C18F E9 88                             SBC #BALL_SPEED_LO
0C191 85 23                             STA ball_xpos_lo
0C193                           
0C193                                   ;; update the high byte
0C193 A5 22                             LDA ball_xpos_hi
0C195 E9 01                             SBC #BALL_SPEED_HI
0C197 85 22                             STA ball_xpos_hi
0C199                                   
0C199                                   ;; Check left bound
0C199 C9 10                             CMP #BOUND_LEFT
0C19B B0 2A                             BCS +doneBallMovement
0C19D                                   
0C19D                                   ;; Set flag to nudge right and set nudge timer
0C19D A5 42                             LDA ball_flags
0C19F 09 02                             ORA #NUDGE_BALL_RIGHT
0C1A1 20 C8 CB                          JSR sub_InitiateNudge
0C1A4                           
0C1A4 4C C7 C1                          JMP +doneBallMovement        
0C1A7                               +
0C1A7                           
0C1A7                               ;; Check if right button is held
0C1A7 A5 1A                         LDA buttons_held
0C1A9 29 01                         AND #BUTTON_RIGHT
0C1AB F0 1A                         BEQ +
0C1AD                                   ;; update the low byte
0C1AD A5 23                             LDA ball_xpos_lo
0C1AF 18                                CLC
0C1B0 69 88                             ADC #BALL_SPEED_LO
0C1B2 85 23                             STA ball_xpos_lo
0C1B4                           
0C1B4                                   ;; update the high byte
0C1B4 A5 22                             LDA ball_xpos_hi
0C1B6 69 01                             ADC #BALL_SPEED_HI
0C1B8 85 22                             STA ball_xpos_hi     
0C1BA                           
0C1BA                                  ;; Check right bound
0C1BA C9 E8                             CMP #BOUND_RIGHT
0C1BC 90 09                             BCC +doneBallMovement
0C1BE F0 07                             BEQ +doneBallMovement
0C1C0                                   
0C1C0                                   ;; Set flag to nudge left and set nudge timer
0C1C0 A5 42                             LDA ball_flags
0C1C2 29 FD                             AND #NUDGE_BALL_LEFT
0C1C4 20 C8 CB                          JSR sub_InitiateNudge
0C1C7                               +
0C1C7                           
0C1C7                           
0C1C7                           +doneBallMovement:
0C1C7                           
0C1C7                               ;; Check nudge
0C1C7 A5 49                         LDA nudge_timer
0C1C9 F0 23                         BEQ +doneBallNudging
0C1CB A5 42                             LDA ball_flags
0C1CD 29 02                             AND #NUDGE_BALL_RIGHT
0C1CF F0 10                             BEQ +nudgeBallLeft
0C1D1                                   
0C1D1                                       ;; update the low byte
0C1D1 A5 23                                 LDA ball_xpos_lo
0C1D3 18                                    CLC
0C1D4 69 88                                 ADC #BALL_SPEED_LO
0C1D6 85 23                                 STA ball_xpos_lo
0C1D8                           
0C1D8                                       ;; update the high byte
0C1D8 A5 22                                 LDA ball_xpos_hi
0C1DA 69 01                                 ADC #BALL_SPEED_HI
0C1DC 85 22                                 STA ball_xpos_hi  
0C1DE 4C EE C1                              JMP +doneBallNudging
0C1E1                                   +nudgeBallLeft:
0C1E1                                   
0C1E1                                   ;; update the low byte
0C1E1 A5 23                             LDA ball_xpos_lo
0C1E3 38                                SEC
0C1E4 E9 88                             SBC #BALL_SPEED_LO
0C1E6 85 23                             STA ball_xpos_lo
0C1E8                           
0C1E8                                   ;; update the high byte
0C1E8 A5 22                             LDA ball_xpos_hi
0C1EA E9 01                             SBC #BALL_SPEED_HI
0C1EC 85 22                             STA ball_xpos_hi
0C1EE                               +doneBallNudging:
0C1EE                           
0C1EE                               ;; Don't update position again until next frame
0C1EE                               ;; (moved to after move block routine)
0C1EE                           
0C1EE                           +doneBallHandling:
0C1EE                           
0C1EE                               
0C1EE                               ;; Do collision detection
0C1EE                               .include "game/include/main/collision_detection.asm"
0C1EE                           
0C1EE                               ;; Get ball's x-left, x-center, x-right position
0C1EE A5 22                         LDA ball_xpos_hi
0C1F0 18                            CLC
0C1F1 69 F0                         ADC #BALL_LEFT_WGA
0C1F3 85 3A                         STA ball_left
0C1F5 18                            CLC
0C1F6 69 04                         ADC #BALL_HALF_SIZE
0C1F8 85 3B                         STA ball_center
0C1FA 18                            CLC
0C1FB 69 04                         ADC #BALL_HALF_SIZE
0C1FD 85 3C                         STA ball_right
0C1FF                           
0C1FF                               ;; Get ball's y-top, y-middle, y-bottom position
0C1FF A5 24                         LDA ball_ypos_hi
0C201 18                            CLC
0C202 69 D0                         ADC #BALL_TOP_WGA
0C204 85 3D                         STA ball_top
0C206 18                            CLC
0C207 69 04                         ADC #BALL_HALF_SIZE
0C209 85 3E                         STA ball_middle
0C20B 18                            CLC
0C20C 69 04                         ADC #BALL_HALF_SIZE
0C20E 85 3F                         STA ball_bottom
0C210                           
0C210                           +checkRightCollision:
0C210                               ;; Check if ball moves right
0C210                               ;; No need to check nudging here as that will never collide with a tile
0C210 A5 1A                         LDA buttons_held
0C212 29 01                         AND #BUTTON_RIGHT
0C214 F0 20                         BEQ +checkLeftCollision
0C216                           
0C216                               ;; Check tile at right position
0C216 A5 3E                         LDA ball_middle
0C218 85 0B                         STA temp
0C21A A5 3C                         LDA ball_right
0C21C 85 0C                         STA temp+1
0C21E 20 62 C8                      JSR sub_ConvertXYToTileType
0C221 29 01                         AND #TILE_IS_SOLID
0C223 F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C225                           
0C225                               ;; Nudge ball and evaluate tile type
0C225 A9 01                         LDA #$01
0C227 85 41                         STA move_block_space_to_check
0C229 A5 42                         LDA ball_flags
0C22B 29 FD                         AND #NUDGE_BALL_LEFT
0C22D 20 C8 CB                      JSR sub_InitiateNudge
0C230 20 F0 C9                      JSR sub_EvaluateTileType
0C233 4C 59 C2                      JMP +checkTopCollision
0C236                           
0C236                           +checkLeftCollision:
0C236                               ;; Check if ball moves right
0C236                               ;; No need to check nudging here as that will never collide with a tile
0C236 A5 1A                         LDA buttons_held
0C238 29 02                         AND #BUTTON_LEFT
0C23A F0 1D                         BEQ +checkTopCollision
0C23C                           
0C23C                               ;; Check tile at right position
0C23C A5 3E                         LDA ball_middle
0C23E 85 0B                         STA temp
0C240 A5 3A                         LDA ball_left
0C242 85 0C                         STA temp+1
0C244 20 62 C8                      JSR sub_ConvertXYToTileType
0C247 29 01                         AND #TILE_IS_SOLID
0C249 F0 0E                         BEQ +checkTopCollision
0C24B                           
0C24B                               ;; Tile is solid; nudge ball and evaluate tile type
0C24B A9 FF                         LDA #$FF
0C24D 85 41                         STA move_block_space_to_check
0C24F A5 42                         LDA ball_flags
0C251 09 02                         ORA #NUDGE_BALL_RIGHT
0C253 20 C8 CB                      JSR sub_InitiateNudge
0C256 20 F0 C9                      JSR sub_EvaluateTileType
0C259                               
0C259                               
0C259                           +checkTopCollision:
0C259                               ;; Check if ball moves up
0C259 A5 42                         LDA ball_flags
0C25B 29 10                         AND #BALL_MOVES_DOWN
0C25D D0 27                         BNE +checkBottomCollision
0C25F                           
0C25F                               ;; Check tile at top position
0C25F A5 3D                         LDA ball_top
0C261 85 0B                         STA temp
0C263 A5 3B                         LDA ball_center
0C265 85 0C                         STA temp+1
0C267 20 62 C8                      JSR sub_ConvertXYToTileType
0C26A 29 01                         AND #TILE_IS_SOLID
0C26C F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C26E                           
0C26E                               ;; Tile is solid; move ball down and evaluate tile type
0C26E A5 27                         LDA ball_ypos_lo_prev
0C270 85 25                         STA ball_ypos_lo
0C272 A5 26                         LDA ball_ypos_hi_prev
0C274 85 24                         STA ball_ypos_hi
0C276 A5 42                         LDA ball_flags
0C278 09 10                         ORA #MOVE_BALL_DOWN
0C27A 85 42                         STA ball_flags
0C27C                           
0C27C A9 F0                         LDA #$F0 ; which is -16
0C27E 85 41                         STA move_block_space_to_check
0C280 20 F0 C9                      JSR sub_EvaluateTileType
0C283 4C AA C2                      JMP +doneCheckingCollision
0C286                           
0C286                           +checkBottomCollision:
0C286                               ;; No movement check needed: since ball is not moving up, it must move down
0C286                           
0C286                               ;; Check tile at bottom position
0C286 A5 3F                         LDA ball_bottom
0C288 85 0B                         STA temp
0C28A A5 3B                         LDA ball_center
0C28C 85 0C                         STA temp+1
0C28E 20 62 C8                      JSR sub_ConvertXYToTileType
0C291 29 01                         AND #TILE_IS_SOLID
0C293 F0 15                         BEQ +doneCheckingCollision
0C295                           
0C295                               ;; Tile is solid; move ball up and evaluate tile type
0C295 A5 27                         LDA ball_ypos_lo_prev
0C297 85 25                         STA ball_ypos_lo
0C299 A5 26                         LDA ball_ypos_hi_prev
0C29B 85 24                         STA ball_ypos_hi
0C29D A5 42                         LDA ball_flags
0C29F 29 EF                         AND #MOVE_BALL_UP
0C2A1 85 42                         STA ball_flags
0C2A3                           
0C2A3 A9 10                         LDA #$10
0C2A5 85 41                         STA move_block_space_to_check
0C2A7 20 F0 C9                      JSR sub_EvaluateTileType
0C2AA                           
0C2AA                           +doneCheckingCollision:
0C2AA                           
0C2AA                               
0C2AA                               ;; Update bonus
0C2AA                               .include "game/include/main/update_bonus.asm"
0C2AA                           
0C2AA                           ;; Update the bonus counter on screen
0C2AA                           
0C2AA                               ;; If bonus = 000, skip decreasing
0C2AA A5 37                         LDA ball_bonus
0C2AC 05 38                         ORA ball_bonus+1
0C2AE 05 39                         ORA ball_bonus+2
0C2B0 F0 0D                         BEQ +done
0C2B2                           
0C2B2                               ;; Check if bonus timer is done yet
0C2B2 A5 4A                         LDA bonus_timer
0C2B4 D0 09                         BNE +done
0C2B6                           
0C2B6                               ;; Bonus timer is done
0C2B6                               ;; Reset bonus timer
0C2B6 A9 08                         LDA #BONUS_FRAMES
0C2B8 85 4A                         STA bonus_timer
0C2BA                               
0C2BA                               ;; Subtract one from ball bonus ones
0C2BA A2 01                         LDX #$01
0C2BC 20 99 D2                      JSR sub_SubtractXFromBonus
0C2BF                           
0C2BF                           +done:
0C2BF                           
0C2BF                           
0C2BF                               ;; Check if self-destruct
0C2BF A5 1B                         LDA buttons_pressed
0C2C1 29 20                         AND #BUTTON_SELECT
0C2C3 F0 03                         BEQ +
0C2C5 20 89 CA                          JSR sub_Selfdestruct
0C2C8                               +
0C2C8                           
0C2C8                           
0C2C8                           +skipBallMovement:
0C2C8                               ;; Move blocks a pixel up/down/left/right
0C2C8                               .include "game/include/main/move_blocks.asm"
0C2C8                           
0C2C8                               ;; Set up block loop
0C2C8 A2 04                         LDX #MAX_ANIMATIONS
0C2CA                           -moveBlocksLoop:
0C2CA CA                            DEX
0C2CB                           
0C2CB                               ;; Check if block is still moving
0C2CB BD 80 03                      LDA move_block_timer,x
0C2CE F0 33                         BEQ +checkNext
0C2D0                               
0C2D0                               ;; Check if block is done moving
0C2D0 C9 01                         CMP #$01
0C2D2 D0 0B                         BNE +
0C2D4                                   ;; If so, draw a tile and remove the sprite
0C2D4 20 BB C8                          JSR sub_DrawMoveTile
0C2D7 A9 00                             LDA #$00
0C2D9 9D 80 03                          STA move_block_timer,x
0C2DC 4C 03 C3                          JMP +checkNext
0C2DF                               +
0C2DF                               
0C2DF                               ;; Check in which direction the block is moving
0C2DF                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C2DF BD 88 03                      LDA move_block_flags,x
0C2E2 29 03                         AND #%00000011
0C2E4 F0 14                         BEQ +movingDown
0C2E6 C9 01                         CMP #$01
0C2E8 F0 0A                         BEQ +movingUp
0C2EA C9 02                         CMP #$02
0C2EC F0 12                         BEQ +movingRight
0C2EE                               
0C2EE                               ;; Move block in correct direction
0C2EE                               +movingLeft:
0C2EE DE 78 03                      DEC move_block_x,x
0C2F1 4C 03 C3                      JMP +checkNext
0C2F4                           
0C2F4                               +movingUp:
0C2F4 DE 7C 03                      DEC move_block_y,x
0C2F7 4C 03 C3                      JMP +checkNext
0C2FA                           
0C2FA                               +movingDown:
0C2FA FE 7C 03                      INC move_block_y,x
0C2FD 4C 03 C3                      JMP +checkNext
0C300                           
0C300                               +movingRight:
0C300 FE 78 03                      INC move_block_x,x
0C303                           
0C303                               ;; Check next block (if any left)
0C303                               +checkNext:
0C303 E0 00                         CPX #$00
0C305 D0 C3                         BNE -moveBlocksLoop
0C307                               
0C307                               ;; Don't update sprites
0C307 E6 40                         INC sprites_update_position
0C309                           
0C309                           
0C309                           +skipSpriteMovement:
0C309                               ;; Testing timed PPU scroll concept (disabled)
0C309                               ;; .include "game/test/timed_ppuscroll_test.asm"
0C309                           
0C309                               ;; Check if ball is dead
0C309 A5 42                         LDA ball_flags
0C30B 29 01                         AND #BALL_IS_DEAD
0C30D F0 03                         BEQ +
0C30F 4C 31 C3                          JMP +ballIsDead
0C312                               +
0C312                               
0C312                               ;; Add ball to sprite buffer
0C312 A6 48                         LDX sprite_ram_pointer
0C314 A5 24                         LDA ball_ypos_hi
0C316 9D 00 02                      STA ADDR_SPRITERAM,x
0C319 E8                            INX
0C31A A9 01                         LDA #BALL_TILE_CHR
0C31C 9D 00 02                      STA ADDR_SPRITERAM,x
0C31F E8                            INX
0C320 A9 00                         LDA #BALL_ATTR
0C322 9D 00 02                      STA ADDR_SPRITERAM,x
0C325 E8                            INX
0C326 A5 22                         LDA ball_xpos_hi
0C328 9D 00 02                      STA ADDR_SPRITERAM,x
0C32B E8                            INX
0C32C 86 48                         STX sprite_ram_pointer
0C32E 4C 42 C3                      JMP +drawBlocks
0C331                           
0C331                           +ballIsDead:
0C331                               ;; Check if kill timer has reset
0C331 A5 4B                         LDA kill_timer
0C333 F0 03                         BEQ +
0C335 4C 42 C3                          JMP +drawBlocks
0C338                               +
0C338                               
0C338                               ;; Take a live
0C338 C6 2A                         DEC ball_lives
0C33A D0 03                         BNE +
0C33C                                   ;; If no lives left, initiate game over sequence
0C33C 4C F5 C3                          JMP lbl_GameOver
0C33F                               +
0C33F                               
0C33F                               ;; Reload current level
0C33F 4C 92 C5                      JMP lbl_InitiateLevelLoad
0C342                           
0C342                           
0C342                           +drawBlocks:
0C342                               ;; Draw moving block(s, if any)
0C342                               .include "game/include/main/draw_blocks.asm"
0C342                           
0C342                           ;; Handle movement of move blocks
0C342                           
0C342                               ;; Set up a loop
0C342 A0 04                         LDY #MAX_ANIMATIONS
0C344                           -drawBlocksLoop:
0C344 88                            DEY
0C345                           
0C345                               ;; If timer is zero, check the next move block
0C345 B9 80 03                      LDA move_block_timer,y
0C348 F0 52                         BEQ +nextMoveBlock
0C34A                               
0C34A                               ;; Get current sprite pointer
0C34A A6 48                         LDX sprite_ram_pointer
0C34C                           
0C34C                               ;; Draw the sprites on screen
0C34C B9 7C 03                      LDA move_block_y,y
0C34F 9D 00 02                      STA ADDR_SPRITERAM,x
0C352 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C355 18                            CLC
0C356 69 08                         ADC #$08
0C358 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C35B 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C35E E8                            INX
0C35F                           
0C35F A9 52                         LDA #$52 ; Top left chr id
0C361 9D 00 02                      STA ADDR_SPRITERAM,x
0C364 A9 53                         LDA #$53 ; Top right chr id
0C366 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C369 A9 62                         LDA #$62 ; Bottom left chr id
0C36B 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C36E A9 63                         LDA #$63 ; Bottom right chr id
0C370 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C373 E8                            INX
0C374                           
0C374 A9 00                         LDA #BALL_ATTR
0C376 9D 00 02                      STA ADDR_SPRITERAM,x
0C379 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C37C 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C37F 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C382 E8                            INX
0C383                           
0C383 B9 78 03                      LDA move_block_x,y
0C386 9D 00 02                      STA ADDR_SPRITERAM,x
0C389 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C38C 18                            CLC
0C38D 69 08                         ADC #$08
0C38F 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C392 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C395                           
0C395                               ;; Update sprite RAM pointer
0C395 A5 48                         LDA sprite_ram_pointer
0C397 18                            CLC
0C398 69 10                         ADC #$10
0C39A 85 48                         STA sprite_ram_pointer
0C39C                           
0C39C                           
0C39C                           
0C39C                           +nextMoveBlock:
0C39C                               ;; Check the next move block
0C39C C0 00                         CPY #$00
0C39E D0 A4                         BNE -drawBlocksLoop
0C3A0                           
0C3A0 4C EF C3                      JMP +doneScreenLoad
0C3A3                           
0C3A3                           
0C3A3                           
0C3A3                           +checkNextScreen:
0C3A3                           
0C3A3                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C3A3                               ;; Upon pressing START, the selected level will start
0C3A3                               .include "game/include/main/select_level.asm"
0C3A3                           
0C3A3                               ;; Change level number on start screen
0C3A3 A5 1B                         LDA buttons_pressed
0C3A5 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C3A7 F0 3C                         BEQ +checkStartPress
0C3A9                           
0C3A9                                   ;; Select next level (1, 5, 9, 13, 17)
0C3A9 A5 4E                             LDA current_level
0C3AB 18                                CLC
0C3AC 69 04                             ADC #$04
0C3AE C9 14                             CMP #$14
0C3B0 D0 02                             BNE +
0C3B2 A9 00                                 LDA #$00
0C3B4                                   +
0C3B4 85 4E                             STA current_level
0C3B6                                   
0C3B6                                   ;; Convert level number to two-byte value
0C3B6 A9 00                             LDA #$00
0C3B8 85 0E                             STA temp+3
0C3BA A5 4E                             LDA current_level
0C3BC 18                                CLC
0C3BD 69 01                             ADC #$01
0C3BF                           
0C3BF                               -
0C3BF C9 0A                             CMP #$0A
0C3C1 90 08                             BCC +
0C3C3 E6 0E                                 INC temp+3
0C3C5 38                                    SEC
0C3C6 E9 0A                                 SBC #$0A
0C3C8 4C BF C3                              JMP -
0C3CB                                   +
0C3CB                           
0C3CB                                   ;; Add level number to PPU buffer
0C3CB 18                                CLC
0C3CC 69 01                             ADC #$01
0C3CE 85 0D                             STA temp+2
0C3D0 A9 20                             LDA #$20
0C3D2 85 0B                             STA temp
0C3D4 A9 C7                             LDA #$C7
0C3D6 85 0C                             STA temp+1
0C3D8 20 FE D2                          JSR sub_WriteByteToPPUBuffer
0C3DB                                   
0C3DB C6 0C                             DEC temp+1
0C3DD A4 0E                             LDY temp+3
0C3DF C8                                INY
0C3E0 84 0D                             STY temp+2
0C3E2 20 FE D2                          JSR sub_WriteByteToPPUBuffer
0C3E5                                   
0C3E5                               +checkStartPress:
0C3E5                           
0C3E5                           
0C3E5                           
0C3E5                               ;; If START button is pressed
0C3E5 A5 1B                         LDA buttons_pressed
0C3E7 29 10                         AND #BUTTON_START
0C3E9 F0 04                         BEQ +
0C3EB                                   ;; Start the level
0C3EB A9 81                             LDA #LOAD_GAME_SCREEN
0C3ED 85 43                             STA screen_mode
0C3EF                               +
0C3EF                           
0C3EF                           
0C3EF                           
0C3EF                           +doneScreenLoad:
0C3EF                           
0C3EF                               ;; Load animations (if any)
0C3EF                               ;; and sprite clean-up
0C3EF 20 D2 CB                      JSR sub_LoadAnimations
0C3F2                           
0C3F2 4C B8 C0                      JMP lbl_MainGameLoop
0C3F5                           
0C3F5                           ;; Following sequences are outside main game loop
0C3F5                           .include "game/include/main/game_over.asm"
0C3F5                           
0C3F5                           ;; Game over sequence
0C3F5                           lbl_GameOver:
0C3F5                           
0C3F5                               ;; Check if current score exceeds high score
0C3F5 A2 00                         LDX #$00
0C3F7                               -checkHiScoreLoop:
0C3F7                           
0C3F7                                   ;; Compare ball score digit with high score digit
0C3F7 B5 2B                             LDA ball_score,x
0C3F9 D5 05                             CMP hi_score,x
0C3FB                           
0C3FB                                   ;; If the score digit is lower, the entire score must
0C3FB                                   ;; be lower, so we can skip checking the other digits
0C3FB 90 18                             BCC +hiScoreHandlingDone
0C3FD                           
0C3FD                                   ;; If the score digit is equal, check the next digit
0C3FD F0 03                             BEQ +checkNextDigit
0C3FF                           
0C3FF                                   ;; If the score digit is higher, update the high score
0C3FF 4C 0A C4                          JMP +updateHighScore
0C402                           
0C402                                   ;; Check the next digit (if any digits are left)
0C402                                   +checkNextDigit:
0C402 E8                                INX
0C403 E0 06                             CPX #$06
0C405 D0 F0                         BNE -checkHiScoreLoop
0C407                           
0C407                               ;; All digits are equal? What are the odds!
0C407                               ;; Either way, we don't have to update the high score,
0C407                               ;; although doing so won't do any harm, so if we need
0C407                               ;; three more bytes at the cost of a couple dozen
0C407                               ;; cycles, we can skip this jump.
0C407 4C 15 C4                      JMP +hiScoreHandlingDone
0C40A                           
0C40A                               ;; Transfer the ball score values to the high score values
0C40A                               +updateHighScore:
0C40A A2 00                         LDX #$00
0C40C                               -
0C40C B5 2B                             LDA ball_score,x
0C40E 95 05                             STA hi_score,x
0C410 E8                                INX
0C411 E0 06                             CPX #$06
0C413 D0 F7                         BNE -
0C415                           
0C415                               ;; The high score has been handled now.
0C415                               +hiScoreHandlingDone:
0C415                               
0C415                               ;; Disable noise channel
0C415 A9 00                         LDA #$00
0C417 8D 15 40                      STA APU_STATUS
0C41A 8D 0C 40                      STA NOISE_VOLUME
0C41D                               
0C41D                               ;; Do blinds effect
0C41D A5 6D                         LDA game_won
0C41F D0 03                         BNE +
0C421 20 50 C7                          JSR sub_BlindsEffect
0C424                               +
0C424 A9 00                         LDA #$00
0C426 85 6D                         STA game_won
0C428                           
0C428                               ;; Disable draw after HUD to disable screen
0C428 20 D5 C6                      JSR sub_WaitForNMI
0C42B                               -
0C42B AD 02 20                          LDA PPU_STATUS
0C42E 29 40                             AND #SPRITE_0_HIT
0C430 D0 F9                         BNE -
0C432                               -
0C432 AD 02 20                          LDA PPU_STATUS
0C435 29 40                             AND #SPRITE_0_HIT
0C437 F0 F9                         BEQ -
0C439 20 EB D2                      JSR sub_Waste6
0C43C 20 EE D2                      JSR sub_Waste5
0C43F 20 F1 D2                      JSR sub_Waste4
0C442 20 F4 D2                      JSR sub_Waste3
0C445 20 FA D2                      JSR sub_Waste1
0C448 20 FD D2                      JSR sub_Waste0
0C44B A9 00                         LDA #$00
0C44D 8D 01 20                      STA PPU_MASK
0C450                               
0C450                               ;; Remove game area from view
0C450 2C 02 20                      BIT PPU_STATUS
0C453 A9 20                         LDA #$20
0C455 8D 06 20                      STA PPU_ADDR
0C458 A9 A0                         LDA #$A0
0C45A 8D 06 20                      STA PPU_ADDR
0C45D A9 00                         LDA #$00
0C45F A2 16                         LDX #$16
0C461                               -xLoop:
0C461 A0 20                             LDY #$20
0C463                                   -yLoop:
0C463 8D 07 20                              STA PPU_DATA
0C466 88                                    DEY
0C467 D0 FA                             BNE -yLoop
0C469 CA                                DEX
0C46A D0 F5                         BNE -xLoop
0C46C                               
0C46C                               ;; Set lives to 0
0C46C 2C 02 20                      BIT PPU_STATUS
0C46F A9 20                         LDA #$20
0C471 8D 06 20                      STA PPU_ADDR
0C474 A9 92                         LDA #$92
0C476 8D 06 20                      STA PPU_ADDR
0C479 A9 01                         LDA #$01
0C47B 8D 07 20                      STA PPU_DATA
0C47E                               
0C47E                               ;; Reset scroll
0C47E A9 00                         LDA #$00
0C480 8D 05 20                      STA PPU_SCROLL
0C483 8D 05 20                      STA PPU_SCROLL
0C486 20 D5 C6                      JSR sub_WaitForNMI
0C489                           
0C489                               ;; Pause for a little while
0C489 A2 18                         LDX #$18
0C48B                               -
0C48B 20 D5 C6                          JSR sub_WaitForNMI
0C48E CA                                DEX
0C48F D0 FA                         BNE -
0C491                                       
0C491                               ;; Do flash effect
0C491 20 69 CB                      JSR sub_FlashEffect
0C494                           
0C494                               ;; Draw GAME OVER tiles over game screen
0C494 A9 21                         LDA #$21
0C496 85 0B                         STA temp
0C498 A9 EB                         LDA #$EB
0C49A 85 0C                         STA temp+1
0C49C                           
0C49C A2 00                         LDX #$00
0C49E                               -gameOverTileLoop:
0C49E BD 34 DC                          LDA tbl_GameOver,x
0C4A1 85 0D                             STA temp+2
0C4A3 20 FE D2                          JSR sub_WriteByteToPPUBuffer
0C4A6 E6 0C                             INC temp+1
0C4A8 E8                                INX
0C4A9 E0 0A                             CPX #$0A
0C4AB D0 F1                         BNE -gameOverTileLoop
0C4AD                               
0C4AD                               ;; Update GAME OVER attributes on game screen
0C4AD A9 23                         LDA #$23
0C4AF 85 0B                         STA temp
0C4B1 A9 DA                         LDA #$DA
0C4B3 85 0C                         STA temp+1
0C4B5 A9 AA                         LDA #$AA
0C4B7 85 0D                         STA temp+2
0C4B9 A2 04                         LDX #$04
0C4BB                               -
0C4BB 20 FE D2                          JSR sub_WriteByteToPPUBuffer
0C4BE E6 0C                             INC temp+1
0C4C0 CA                                DEX
0C4C1 D0 F8                         BNE -
0C4C3 20 D5 C6                      JSR sub_WaitForNMI
0C4C6                               
0C4C6                              
0C4C6                               ;; If player score is larger than high score
0C4C6                               ;; Overwrite high score with player score
0C4C6                               ;; [@TODO]
0C4C6                               
0C4C6                               
0C4C6                               ;; If player presses either A or START, (soft) reset the game
0C4C6                               -checkController:
0C4C6 20 C1 C6                          JSR sub_ReadController
0C4C9 A5 1A                             LDA buttons_held
0C4CB 29 90                             AND #%10010000
0C4CD F0 F7                         BEQ -checkController
0C4CF 4C 4F C0                      JMP lbl_SoftReset
0C4D2                           
0C4D2                           .include "game/include/main/level_win.asm"
0C4D2                           
0C4D2                           ;; Handling of level win state
0C4D2                           lbl_LevelWin:
0C4D2                           
0C4D2                               ;; Freeze the ball
0C4D2 A5 42                         LDA ball_flags
0C4D4 09 04                         ORA #FREEZE_BALL
0C4D6 85 42                         STA ball_flags
0C4D8                           
0C4D8                               ;; Disable noise channel
0C4D8 A9 01                         LDA #$01
0C4DA 85 57                         STA noise_muted
0C4DC                               
0C4DC                               ;; Wait a few frames
0C4DC A2 18                         LDX #$18
0C4DE 20 D6 D2                      JSR sub_WaitXFrames
0C4E1                           
0C4E1                               ;; Set null tile color to yellow
0C4E1 A9 3F                         LDA #$3F
0C4E3 85 0B                         STA temp
0C4E5 A9 02                         LDA #$02
0C4E7 85 0C                         STA temp+1
0C4E9 A9 38                         LDA #$38
0C4EB 85 0D                         STA temp+2
0C4ED 20 FE D2                      JSR sub_WriteByteToPPUBuffer
0C4F0                               
0C4F0                               ;; Quick and dirty way to remove ball from screen
0C4F0 A9 EF                         LDA #$EF
0C4F2 8D 04 02                      STA ADDR_SPRITERAM+4
0C4F5 8D 05 02                      STA ADDR_SPRITERAM+5
0C4F8 8D 06 02                      STA ADDR_SPRITERAM+6
0C4FB 8D 07 02                      STA ADDR_SPRITERAM+7
0C4FE                               
0C4FE                               ;; Wait a few frames
0C4FE A2 10                         LDX #$10
0C500 20 D6 D2                      JSR sub_WaitXFrames
0C503                               
0C503                               ;; Restore null tile color to dark blue
0C503 A9 3F                         LDA #$3F
0C505 85 0B                         STA temp
0C507 A9 02                         LDA #$02
0C509 85 0C                         STA temp+1
0C50B A9 12                         LDA #$12
0C50D 85 0D                         STA temp+2
0C50F 20 FE D2                      JSR sub_WriteByteToPPUBuffer
0C512                               
0C512                               ;; Initiate frequency beeps (@TODO)
0C512 A9 0F                         LDA #$0F
0C514 85 5F                         STA sfx_sweep_count
0C516                               -sweepsLoop:
0C516                               
0C516                                   ;; Reset volume for new sweep
0C516 A5 5F                             LDA sfx_sweep_count
0C518 85 61                             STA sfx_sweep_next_volume
0C51A                                   
0C51A                                   ;; Set up single sweep loop
0C51A A2 00                             LDX #$00
0C51C                                   -sweepLoop:
0C51C                                   
0C51C                                       ;; Set current low frequency
0C51C BD EB DC                              LDA tbl_SweepFrequency,x
0C51F 85 62                                 STA sfx_sweep_frequency
0C521                                       
0C521                                       ;; Set current volume
0C521 A4 61                                 LDY sfx_sweep_next_volume
0C523 84 60                                 STY sfx_sweep_volume
0C525                                       
0C525                                       ;; Wait for NMI to play sfx
0C525 20 D5 C6                              JSR sub_WaitForNMI
0C528                           
0C528                                       ;; Prepare next volume
0C528 B9 DB DC                              LDA tbl_SweepVolume,y
0C52B 85 61                                 STA sfx_sweep_next_volume
0C52D                                       
0C52D                                       ;; Clear pointer, except for sprite-zero and ball
0C52D A9 08                                 LDA #$08
0C52F 85 48                                 STA sprite_ram_pointer
0C531                           
0C531                                       ;; Load animations (if any)
0C531 8A                                    TXA
0C532 48                                    PHA
0C533 20 D2 CB                              JSR sub_LoadAnimations
0C536 68                                    PLA
0C537 AA                                    TAX
0C538                           
0C538                                       ;; Play next frequency
0C538 E8                                    INX
0C539 E0 05                                 CPX #$05
0C53B D0 DF                             BNE -sweepLoop
0C53D                                   
0C53D                                   ;; Play next sweep
0C53D C6 5F                             DEC sfx_sweep_count
0C53F D0 D5                         BNE -sweepsLoop
0C541                           
0C541                               ;; Wait a few frames
0C541 A2 2D                         LDX #$2D
0C543 20 D6 D2                      JSR sub_WaitXFrames
0C546                               
0C546                           
0C546                               ;; Play the end level sweep sound effect, and
0C546                               ;; initiate bonus score routine
0C546 A9 B8                         LDA #$B8
0C548 85 56                         STA soft_pulse1
0C54A                           
0C54A A9 01                         LDA #$01
0C54C 8D 15 40                      STA APU_STATUS
0C54F 85 55                         STA do_beeps
0C551                           
0C551                               -bonusPointsLoop:
0C551                                   ;; Check how many bonus points to subtract
0C551                                   ;; (either the max, or what's left)
0C551 A5 37                             LDA ball_bonus
0C553 05 38                             ORA ball_bonus+1
0C555 D0 06                             BNE +fullBonus
0C557 A5 39                             LDA ball_bonus+2
0C559 C9 09                             CMP #BONUS_COUNTDOWN_PER_FRAME
0C55B 90 02                             BCC +partBonus
0C55D                           
0C55D                                   +fullBonus:
0C55D A9 09                             LDA #BONUS_COUNTDOWN_PER_FRAME
0C55F                                   +partBonus:
0C55F                           
0C55F                                   ;; Put value that's added to score on the stack
0C55F AA                                TAX
0C560 BD 26 DD                          LDA tbl_BonusToScore,x
0C563 48                                PHA
0C564                           
0C564                                   ;; Subtract X-register from bonus
0C564 20 99 D2                          JSR sub_SubtractXFromBonus
0C567                           
0C567                                   ;; Get value from stack and add it to the score
0C567 68                                PLA
0C568 20 E4 C6                          JSR sub_AddAccumulatorToScore
0C56B                           
0C56B                                   ;; Wait for NMI twice
0C56B 20 D5 C6                          JSR sub_WaitForNMI
0C56E 20 D5 C6                          JSR sub_WaitForNMI
0C571                           
0C571                                   ;; Check if bonus countdown is done
0C571 A5 37                             LDA ball_bonus
0C573 05 38                             ORA ball_bonus+1
0C575 05 39                             ORA ball_bonus+2
0C577 D0 D8                         BNE -bonusPointsLoop
0C579                           
0C579                               ;; fade out the beeping
0C579 A2 08                         LDX #$08
0C57B                               -fadeOutLoop:
0C57B 20 D5 C6                          JSR sub_WaitForNMI
0C57E 20 D5 C6                          JSR sub_WaitForNMI
0C581 C6 56                             DEC soft_pulse1
0C583 CA                                DEX
0C584 D0 F5                         BNE -fadeOutLoop
0C586                           
0C586                               ;; Stop random beeping
0C586 A9 02                         LDA #$02
0C588 85 55                         STA do_beeps
0C58A                               
0C58A                               ;; Wait a few frames
0C58A A2 30                         LDX #$30
0C58C 20 D6 D2                      JSR sub_WaitXFrames
0C58F                           
0C58F                               ;; Load next level
0C58F 4C 92 C5                      JMP lbl_InitiateLevelLoad
0C592                               
0C592                           .include "game/include/main/initiate_level_load.asm"
0C592                           
0C592                           ;; Load level
0C592                           lbl_InitiateLevelLoad:
0C592                               
0C592                               ;; Blind out the screen
0C592 20 50 C7                      JSR sub_BlindsEffect
0C595                               
0C595                               ;; If ball is dead, (re)load current level
0C595                               ;; If ball is alive, load next level
0C595 A5 42                         LDA ball_flags
0C597 29 01                         AND #BALL_IS_DEAD
0C599 D0 05                         BNE +
0C59B E6 4E                             INC current_level
0C59D 4C A6 C5                          JMP +loadLevel
0C5A0                               +
0C5A0                               
0C5A0                               ;; Revive ball
0C5A0 A5 42                         LDA ball_flags
0C5A2 29 FE                         AND #REVIVE_BALL
0C5A4 85 42                         STA ball_flags
0C5A6                           
0C5A6                           +loadLevel:
0C5A6                               ;; This loops back to level 1 after level 25* for now,
0C5A6                               ;; as a proper game ending is yet to be introduced.
0C5A6                               ;; *26 in test mode
0C5A6 A5 4E                         LDA current_level
0C5A8                               ifdef TESTING
0C5A8 C9 01                             CMP #LAST_LEVEL
0C5AA                               else
0C5AA                                   CMP #25
0C5AA                               endif
0C5AA D0 03                         BNE +
0C5AC 4C B6 C5                          JMP lbl_GameWin
0C5AF                               +
0C5AF                               
0C5AF                               ;; Tell the game to load the level screen on the next loop.
0C5AF A9 81                         LDA #LOAD_GAME_SCREEN
0C5B1 85 43                         STA screen_mode
0C5B3                           
0C5B3                               ;; Jump to the beginning of the loop, instantly starting screen drawing
0C5B3 4C B8 C0                      JMP lbl_MainGameLoop0C5B6                           .include "game/include/main/game_win.asm"
0C5B6                           
0C5B6                           lbl_GameWin:
0C5B6                           
0C5B6                               ;; Tell the game that it has been won
0C5B6 E6 6D                         INC game_won
0C5B8 E6 63                         INC sfx_endgame_enabled
0C5BA                               
0C5BA                               ;; Clear out game screen
0C5BA 20 D5 C6                      JSR sub_WaitForNMI
0C5BD                               -
0C5BD AD 02 20                          LDA PPU_STATUS
0C5C0 29 40                             AND #SPRITE_0_HIT
0C5C2 D0 F9                         BNE -
0C5C4                               -
0C5C4 AD 02 20                          LDA PPU_STATUS
0C5C7 29 40                             AND #SPRITE_0_HIT
0C5C9 F0 F9                         BEQ -
0C5CB 20 EB D2                      JSR sub_Waste6
0C5CE 20 EE D2                      JSR sub_Waste5
0C5D1 20 F1 D2                      JSR sub_Waste4
0C5D4 20 F4 D2                      JSR sub_Waste3
0C5D7 20 FA D2                      JSR sub_Waste1
0C5DA 20 FD D2                      JSR sub_Waste0
0C5DD A9 00                         LDA #$00
0C5DF 8D 01 20                      STA PPU_MASK
0C5E2                               
0C5E2                               ;; Remove game area from view
0C5E2 2C 02 20                      BIT PPU_STATUS
0C5E5 A9 20                         LDA #$20
0C5E7 8D 06 20                      STA PPU_ADDR
0C5EA A9 A0                         LDA #$A0
0C5EC 8D 06 20                      STA PPU_ADDR
0C5EF A9 00                         LDA #$00
0C5F1 A2 16                         LDX #$16
0C5F3                               -xLoop:
0C5F3 A0 20                             LDY #$20
0C5F5                                   -yLoop:
0C5F5 8D 07 20                              STA PPU_DATA
0C5F8 88                                    DEY
0C5F9 D0 FA                             BNE -yLoop
0C5FB CA                                DEX
0C5FC D0 F5                         BNE -xLoop
0C5FE                               
0C5FE                               ;; Set lives to 0
0C5FE 2C 02 20                      BIT PPU_STATUS
0C601 A9 20                         LDA #$20
0C603 8D 06 20                      STA PPU_ADDR
0C606 A9 92                         LDA #$92
0C608 8D 06 20                      STA PPU_ADDR
0C60B A9 01                         LDA #$01
0C60D 8D 07 20                      STA PPU_DATA
0C610                               
0C610                               ;; Reset scroll
0C610 A9 00                         LDA #$00
0C612 8D 05 20                      STA PPU_SCROLL
0C615 8D 05 20                      STA PPU_SCROLL
0C618 20 D5 C6                      JSR sub_WaitForNMI
0C61B                               
0C61B                               ;; Do a flashy screen and play a frequency sweep at the same time
0C61B A2 00                         LDX #$00
0C61D                               -endSweepsLoop:
0C61D                                   ;; Reset frequency
0C61D A9 00                             LDA #$00
0C61F 85 64                             STA sfx_endgame_p1_rest
0C621 85 67                             STA sfx_endgame_p2_rest
0C623 A9 08                             LDA #$08
0C625 85 65                             STA sfx_endgame_p1_freq_hi
0C627 A9 7A                             LDA #$7A
0C629 85 66                             STA sfx_endgame_p1_freq_lo
0C62B A9 09                             LDA #$09
0C62D 85 68                             STA sfx_endgame_p2_freq_hi
0C62F A9 3A                             LDA #$3A
0C631 85 69                             STA sfx_endgame_p2_freq_lo
0C633                                   
0C633                                   ;; Get current sweep length
0C633 BD F0 DC                          LDA tbl_EndSweepLength,x
0C636 85 10                             STA temp+5
0C638 A0 00                             LDY #$00
0C63A                                   -endSweepLoop:
0C63A                           
0C63A A5 20                                 LDA frame_counter
0C63C 29 01                                 AND #$01
0C63E F0 2D                                 BEQ +playNote
0C640                           
0C640                                           ;; Get background color from table
0C640 8A                                        TXA
0C641 48                                        PHA
0C642 E6 4D                                     INC endgame_palette_timer
0C644 A5 4D                                     LDA endgame_palette_timer
0C646 29 0F                                     AND #$0F
0C648 AA                                        TAX
0C649 BD 35 DD                                  LDA tbl_EndGamePalette,x
0C64C 85 0D                                     STA temp+2
0C64E 68                                        PLA
0C64F AA                                        TAX
0C650                                       
0C650                                           ;; Put background color in PPU buffer
0C650 98                                        TYA
0C651 48                                        PHA
0C652 A9 3F                                     LDA #$3F
0C654 85 0B                                     STA temp
0C656 A9 00                                     LDA #$00
0C658 85 0C                                     STA temp+1
0C65A 20 FE D2                                  JSR sub_WriteByteToPPUBuffer
0C65D A9 0D                                     LDA #$0D
0C65F 85 0C                                     STA temp+1
0C661 20 FE D2                                  JSR sub_WriteByteToPPUBuffer
0C664 A9 19                                     LDA #$19
0C666 85 0C                                     STA temp+1
0C668 20 FE D2                                  JSR sub_WriteByteToPPUBuffer
0C66B 68                                        PLA
0C66C A8                                        TAY
0C66D                           
0C66D                                       +playNote:
0C66D                                       ;; Play the note
0C66D 20 D5 C6                              JSR sub_WaitForNMI
0C670                                       
0C670                                       ;; Prepare the next note
0C670 A5 64                                 LDA sfx_endgame_p1_rest
0C672 18                                    CLC
0C673 7D 14 DD                              ADC tbl_EndSweepFreqDeltaRest,x
0C676 85 64                                 STA sfx_endgame_p1_rest
0C678 A5 66                                 LDA sfx_endgame_p1_freq_lo
0C67A 7D 02 DD                              ADC tbl_EndSweepFreqDeltaLo,x
0C67D 85 66                                 STA sfx_endgame_p1_freq_lo
0C67F A5 65                                 LDA sfx_endgame_p1_freq_hi
0C681 69 00                                 ADC #$00
0C683 85 65                                 STA sfx_endgame_p1_freq_hi
0C685                                       
0C685 A5 67                                 LDA sfx_endgame_p2_rest
0C687 38                                    SEC
0C688 FD 14 DD                              SBC tbl_EndSweepFreqDeltaRest,x
0C68B 85 67                                 STA sfx_endgame_p2_rest
0C68D A5 69                                 LDA sfx_endgame_p2_freq_lo
0C68F FD 02 DD                              SBC tbl_EndSweepFreqDeltaLo,x
0C692 85 69                                 STA sfx_endgame_p2_freq_lo
0C694 A5 68                                 LDA sfx_endgame_p2_freq_hi
0C696 E9 00                                 SBC #$00
0C698 85 68                                 STA sfx_endgame_p2_freq_hi
0C69A                           
0C69A                                       ;; Do next frequency in the sweep
0C69A C8                                    INY
0C69B C4 10                                 CPY temp+5
0C69D D0 9B                             BNE -endSweepLoop
0C69F                                   
0C69F E8                                INX
0C6A0 E0 12                             CPX #$12
0C6A2 F0 03                             BEQ +disableSfx
0C6A4 4C 1D C6                      JMP -endSweepsLoop
0C6A7                           
0C6A7                               ;; Stop endgame sweep
0C6A7                               +disableSfx:
0C6A7 A9 FF                         LDA #$FF
0C6A9 85 63                         STA sfx_endgame_enabled
0C6AB                               
0C6AB                               ;; Wait a little
0C6AB A2 10                         LDX #$10
0C6AD 20 D6 D2                      JSR sub_WaitXFrames
0C6B0                           
0C6B0                               ;; Initiate the game over sequence
0C6B0 4C F5 C3                      JMP lbl_GameOver
0C6B3                           
0C6B3                           
0C6B3                           
0C6B3                           ;; Subroutines
0C6B3                           .include "include/subroutines.asm"
0C6B3                           
0C6B3                           ;; RNG
0C6B3                           .include "subroutine/GetRandomNumber.asm"
0C6B3                           
0C6B3                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6B3                           ;;
0C6B3                           ;; subroutine/GetRandomNumber.asm
0C6B3                           ;;
0C6B3                           ;; Simple and fast random number generator by White Flame.
0C6B3                           ;;
0C6B3                           ;; Set random_seed to an arbitrary number to randomize between
0C6B3                           ;; gaming sessions, for instance using the frame timer upon
0C6B3                           ;; pressing START on the intro screen.
0C6B3                           ;;
0C6B3                           ;;     ;; IF START PRESSED:
0C6B3                           ;;     LDA frame_counter
0C6B3                           ;;     STA random_seed
0C6B3                           ;;
0C6B3                           ;; Source:
0C6B3                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C6B3                           ;;
0C6B3                           ;;
0C6B3                           
0C6B3                           sub_GetRandomNumber:
0C6B3                               ;; Force EOR if random_seed is zero
0C6B3 A5 21                         LDA random_seed
0C6B5 F0 05                         BEQ +doEor
0C6B7                           
0C6B7                               ;; Shift left, and EOR if the high bit is set
0C6B7 0A                            ASL
0C6B8 F0 04                         BEQ +noEor
0C6BA 90 02                         BCC +noEor
0C6BC                           
0C6BC                           +doEor:
0C6BC 49 1D                         EOR #$1D
0C6BE                           
0C6BE                           +noEor:
0C6BE 85 21                         STA random_seed
0C6C0                           
0C6C0 60                            RTS
0C6C1                           
0C6C1                           
0C6C1                           ;; Read controller input
0C6C1                           .include "subroutine/ReadController.asm"
0C6C1                           
0C6C1                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6C1                           ;;
0C6C1                           ;; subroutine/ReadController.asm
0C6C1                           ;;
0C6C1                           ;; Subroutine that polls the controller and stores the input
0C6C1                           ;; buttons in a variable. This version only handles controller
0C6C1                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C6C1                           ;;
0C6C1                           ;;
0C6C1                           
0C6C1                           sub_ReadController:
0C6C1                           
0C6C1                               ;; Set strobe bit
0C6C1 A9 01                         LDA #$01
0C6C3 8D 16 40                      STA JOYPAD_1
0C6C6                           
0C6C6                               ;; Set up ring timer
0C6C6 85 1A                         STA buttons_held
0C6C8                           
0C6C8                               ;; Clear strobe bit
0C6C8 4A                            LSR
0C6C9 8D 16 40                      STA JOYPAD_1
0C6CC                           
0C6CC                               ;; Loop through button presses
0C6CC                               -
0C6CC AD 16 40                          LDA JOYPAD_1
0C6CF 4A                                LSR
0C6D0 26 1A                             ROL buttons_held
0C6D2                           
0C6D2                               ;; Check if ring timer is done
0C6D2 90 F8                         BCC -
0C6D4                           
0C6D4                               ;; Return from subroutine
0C6D4 60                            RTS
0C6D5                           
0C6D5                           
0C6D5                           ;; vBlank/NMI wait
0C6D5                           .include "subroutine/WaitForNMI.asm"
0C6D5                           
0C6D5                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6D5                           ;;
0C6D5                           ;; subroutine/WaitForVBlank.asm
0C6D5                           ;;
0C6D5                           ;; Subroutine that essentially pauses script execution until
0C6D5                           ;; vBlank happens.
0C6D5                           ;;
0C6D5                           ;;
0C6D5                           
0C6D5                           sub_WaitForNMI:
0C6D5 A9 01                         LDA #$01
0C6D7 85 6A                         STA check_nmi
0C6D9                               -
0C6D9 A5 6A                             LDA check_nmi
0C6DB D0 FC                         BNE -
0C6DD 60                            RTS
0C6DE                           
0C6DE                           .include "subroutine/WaitForVBlank.asm"
0C6DE                           
0C6DE                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6DE                           ;;
0C6DE                           ;; subroutine/WaitForVBlank.asm
0C6DE                           ;;
0C6DE                           ;; Subroutine that essentially pauses script execution until
0C6DE                           ;; vBlank happens.
0C6DE                           ;;
0C6DE                           ;;
0C6DE                           
0C6DE                           sub_WaitForVBlank:
0C6DE 2C 02 20                      BIT $2002
0C6E1 10 FB                         BPL sub_WaitForVBlank
0C6E3 60                            RTS
0C6E4                           
0C6E4                           
0C6E4                           ;; Game specific subroutines
0C6E4                           .include "game/include/subroutines.asm"
0C6E4                           
0C6E4                           ;; additional game-specific subroutines go here
0C6E4                           
0C6E4                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C6E4                           
0C6E4                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C6E4                           ;;
0C6E4                           ;;  sub_AddAccumulatorToScore.asm
0C6E4                           ;;
0C6E4                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C6E4                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C6E4                           ;;  actual score.
0C6E4                           ;;
0C6E4                           ;;
0C6E4                           
0C6E4                           
0C6E4                           sub_AddAccumulatorToScore:
0C6E4                           
0C6E4                               ;; Clear old add_to_score
0C6E4 A2 05                         LDX #$05
0C6E6 A0 00                         LDY #$00
0C6E8                               -
0C6E8 94 31                             STY add_to_score,x
0C6EA CA                                DEX
0C6EB 10 FB                         BPL -
0C6ED                           
0C6ED                               ;; Set accumulator to add_to_score variables
0C6ED                               ;; Check and update 100s
0C6ED                               -checkHundreds:
0C6ED C9 64                             CMP #100
0C6EF 90 08                             BCC +checkTens
0C6F1 38                                    SEC
0C6F2 E9 64                                 SBC #100
0C6F4 E6 34                                 INC add_to_score+3
0C6F6 4C ED C6                              JMP -checkHundreds
0C6F9                                   +checkTens:
0C6F9                           
0C6F9                               ;; Check and update 10s
0C6F9                               -checkTens:
0C6F9 C9 0A                             CMP #10
0C6FB 90 08                             BCC +setOnes
0C6FD 38                                    SEC
0C6FE E9 0A                                 SBC #10
0C700 E6 35                                 INC add_to_score+4
0C702 4C F9 C6                              JMP -checkTens
0C705                                   +setOnes:
0C705                           
0C705                               ;; We're left with 1s
0C705 85 36                         STA add_to_score+5
0C707                           
0C707                               ;; Byte for byte, add add_to_score to ball_score
0C707 A9 00                         LDA #$00
0C709 85 44                         STA ppu_buffer_update
0C70B A4 45                         LDY ppu_buffer_pointer
0C70D A2 05                         LDX #$05
0C70F                               -
0C70F B5 31                             LDA add_to_score,x
0C711 18                                CLC
0C712 75 2B                             ADC ball_score,x
0C714 C9 0A                             CMP #10
0C716 90 05                             BCC +
0C718 38                                    SEC
0C719 E9 0A                                 SBC #10
0C71B F6 2A                                 INC ball_score-1,x
0C71D                                   +
0C71D                                   
0C71D                                   ;; Update new score digit
0C71D 95 2B                             STA ball_score,x
0C71F                           
0C71F                                   ;; Update score tile in PPU
0C71F A9 20                             LDA #$20
0C721 99 00 03                          STA ppu_buffer,y
0C724 C8                                INY
0C725 8A                                TXA
0C726 18                                CLC
0C727 69 83                             ADC #$83
0C729 99 00 03                          STA ppu_buffer,y
0C72C C8                                INY
0C72D B5 2B                             LDA ball_score,x
0C72F 18                                CLC
0C730 69 01                             ADC #$01
0C732 99 00 03                          STA ppu_buffer,y
0C735 C8                                INY
0C736                           
0C736                                   ;; Check next digit (if any left)
0C736 CA                                DEX
0C737 30 03                             BMI +done
0C739 4C 0F C7                      JMP -
0C73C                           
0C73C                           +done:
0C73C                               ;; Update PPU buffer pointer and status
0C73C 84 45                         STY ppu_buffer_pointer
0C73E A9 01                         LDA #$01
0C740 85 44                         STA ppu_buffer_update
0C742                           
0C742                               ;; Done: return 
0C742 60                            RTS
0C743                           
0C743                           .include "game/subroutine/BackgroundNoise.asm"
0C743                           
0C743                           ;; Play background noise
0C743                           sub_BackgroundNoise:
0C743 A9 32                         LDA #$32
0C745 8D 0C 40                      STA NOISE_VOLUME
0C748 A9 0E                         LDA #$0E
0C74A 8D 0E 40                      STA NOISE_PERIOD
0C74D 85 53                         STA current_noise
0C74F 60                            RTS
0C750                           
0C750                           .include "game/subroutine/BlindsEffect.asm"
0C750                           
0C750                           ;; Do the blinds effect (i.e. wipe the screen line by line)
0C750                           sub_BlindsEffect:
0C750                           
0C750                               ;; Set up loop fading
0C750 A9 00                         LDA #$00
0C752 85 12                         STA temp+7
0C754 A0 08                         LDY #$08
0C756                               -fadeLoop:
0C756 84 13                             STY temp+8
0C758                           
0C758                                   ;; Wait for NMI to pass
0C758 20 D5 C6                          JSR sub_WaitForNMI
0C75B                                   
0C75B                                   ;; Now wait for No-sprite 0
0C75B                                   -
0C75B AD 02 20                              LDA PPU_STATUS
0C75E 29 40                                 AND #SPRITE_0_HIT
0C760 D0 F9                             BNE -
0C762                               
0C762                                   ;; Now wait for Sprite 0
0C762                                   -
0C762 AD 02 20                              LDA PPU_STATUS
0C765 29 40                                 AND #SPRITE_0_HIT
0C767 F0 F9                             BEQ -
0C769                                   
0C769                                   ;; Waste time until we're almost at the last HBlank before the playing field
0C769 20 EB D2                          JSR sub_Waste6
0C76C 20 EE D2                          JSR sub_Waste5
0C76F 20 F1 D2                          JSR sub_Waste4
0C772 20 F4 D2                          JSR sub_Waste3
0C775 20 FA D2                          JSR sub_Waste1
0C778 20 FD D2                          JSR sub_Waste0
0C77B                                   
0C77B                                   
0C77B                                   ;; Setup tile row loop
0C77B A0 16                             LDY #22
0C77D                                   -tileLoop:
0C77D                                   
0C77D                                       ;; Disable drawing
0C77D A5 1D                                 LDA soft_ppu_mask
0C77F 29 F7                                 AND #%11110111
0C781 8D 01 20                              STA PPU_MASK
0C784                                       
0C784                                       ;; Set up scanline loop
0C784 A2 08                                 LDX #$08
0C786                                       -scanlineLoop:
0C786 E4 13                                     CPX temp+8
0C788 D0 0A                                     BNE +wasteTime
0C78A                                           
0C78A                                           ;; Restore drawing
0C78A A5 1D                                     LDA soft_ppu_mask
0C78C 09 08                                     ORA #%00001000
0C78E 8D 01 20                                  STA PPU_MASK
0C791 4C 9A C7                                  JMP +wasteMoreTime
0C794                           
0C794                                           ;; Waste 12 frames
0C794                                           +wasteTime:
0C794 E6 6C                                     INC void     ;+5
0C796 C6 6C                                     DEC void     ;+5
0C798 49 00                                     EOR #$00     ;+2
0C79A                                           
0C79A                                           ;; Waste about a scanline worth of frames
0C79A                                           +wasteMoreTime:
0C79A 20 F7 D2                                  JSR sub_Waste2
0C79D 20 FD D2                                  JSR sub_Waste0
0C7A0 20 FD D2                                  JSR sub_Waste0
0C7A3 E6 6C                                     INC void
0C7A5 49 00                                     EOR #$00
0C7A7 49 00                                     EOR #$00
0C7A9 CA                                        DEX
0C7AA D0 DA                                 BNE -scanlineLoop
0C7AC C6 6C                                 DEC void
0C7AE 49 00                                 EOR #$00
0C7B0 88                                    DEY
0C7B1 D0 CA                             BNE -tileLoop
0C7B3                           
0C7B3 A4 13                             LDY temp+8
0C7B5                                   
0C7B5 E6 12                             INC temp+7
0C7B7 A5 12                             LDA temp+7
0C7B9 C9 02                             CMP #$02
0C7BB D0 99                             BNE -fadeLoop
0C7BD                           
0C7BD A9 00                             LDA #$00
0C7BF 85 12                             STA temp+7
0C7C1 88                                DEY
0C7C2 D0 92                         BNE -fadeLoop
0C7C4                               
0C7C4 60                            RTS
0C7C5                           
0C7C5                           .include "game/subroutine/ClearScreen.asm"
0C7C5                           
0C7C5                           ;; Subroutine to clear the screen
0C7C5                           ;; If it's a game screen, add noise
0C7C5                           
0C7C5                           sub_ClearScreen:
0C7C5                               ;; Check of game screen or not
0C7C5 A5 43                         LDA screen_mode
0C7C7 29 03                         AND #CHECK_SCREEN_MODE
0C7C9 C9 01                         CMP #IS_GAME_SCREEN
0C7CB F0 02                         BEQ +
0C7CD A9 00                             LDA #$00
0C7CF                               +
0C7CF 85 0C                         STA temp+1
0C7D1                               
0C7D1                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C7D1 2C 02 20                      BIT PPU_STATUS
0C7D4 A9 20                         LDA #$20
0C7D6 8D 06 20                      STA PPU_ADDR
0C7D9 A9 00                         LDA #$00
0C7DB 8D 06 20                      STA PPU_ADDR
0C7DE                               
0C7DE                               ;; Set up tile to draw and loop
0C7DE 85 0B                         STA temp
0C7E0 AA                            TAX
0C7E1 A8                            TAY
0C7E2                           
0C7E2                               -     
0C7E2                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C7E2 A5 0B                             LDA temp
0C7E4 8D 07 20                          STA PPU_DATA
0C7E7                           
0C7E7                                   ;; Check if we should draw noise next. Noise is drawn if:
0C7E7                                   ;; - Screen mode is game screen
0C7E7                                   ;; - Y between #$06 and #$19 (inclusive)
0C7E7                                   ;; - X between #$02 and #$1D (inclusive)
0C7E7                                   
0C7E7                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C7E7 A5 0C                             LDA temp+1
0C7E9 F0 1C                             BEQ +nextTileInRow
0C7EB                                   
0C7EB                                   ;; If Y < $6, skip the check
0C7EB C0 06                             CPY #$06
0C7ED 90 18                             BCC +nextTileInRow
0C7EF                                   
0C7EF                                   ;; If X < $1, skip the check
0C7EF E0 01                             CPX #$01
0C7F1 90 14                             BCC +nextTileInRow
0C7F3                                   
0C7F3                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C7F3 E0 1D                             CPX #$1D
0C7F5 D0 04                             BNE +
0C7F7 A9 00                                 LDA #$00
0C7F9 85 0B                                 STA temp
0C7FB                                   +
0C7FB B0 0A                             BCS +nextTileInRow
0C7FD                                   
0C7FD                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C7FD 20 B3 C6                          JSR sub_GetRandomNumber
0C800 29 07                             AND #%00000111
0C802 18                                CLC
0C803 69 68                             ADC #$68
0C805 85 0B                             STA temp
0C807                           
0C807                           +nextTileInRow:
0C807                                   
0C807                                   ;; Check if a row has been done. If not, draw the next
0C807 E8                                INX
0C808 E0 20                             CPX #$20
0C80A D0 D6                             BNE -
0C80C                                   
0C80C                                   ;; Go to the next row (if any left)
0C80C A2 00                             LDX #00
0C80E C8                                INY
0C80F                                   
0C80F                                   ;; If Y is 1A, skip noise tile check until done drawing
0C80F C0 1A                             CPY #$1A
0C811 D0 04                             BNE +
0C813 A9 00                                 LDA #$00
0C815 85 0C                                 STA temp+1
0C817                                   +
0C817                                   
0C817 C0 1E                             CPY #$1E
0C819 D0 C7                         BNE -
0C81B                           
0C81B                               ;; Clear attribute table
0C81B A9 23                         LDA #$23
0C81D 8D 06 20                      STA PPU_ADDR
0C820 A9 C0                         LDA #$C0
0C822 8D 06 20                      STA PPU_ADDR
0C825 A9 00                         LDA #$00
0C827 A2 40                         LDX #$40
0C829                               -
0C829 8D 07 20                          STA PPU_DATA
0C82C CA                                DEX
0C82D D0 FA                         BNE -
0C82F                               
0C82F 60                            RTS
0C830                           
0C830                           .include "game/subroutine/ColorizeBall.asm"
0C830                           
0C830                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C830                           ;;
0C830                           ;;  Subroutine: ColorizeBall
0C830                           ;;
0C830                           ;;  Applies the color set through ball_flags to the ball sprite.
0C830                           ;;  Expects ball_flags to be in the accumulator
0C830                           ;;
0C830                           
0C830                           
0C830                           sub_ColorizeBall:
0C830                           
0C830                               ;; Get color from ball_flags
0C830 4A                            LSR
0C831 4A                            LSR
0C832 4A                            LSR
0C833 4A                            LSR
0C834 4A                            LSR
0C835 AA                            TAX
0C836                           
0C836                               ;; Add new light color of ball to PPU palette
0C836 A9 3F                         LDA #$3F
0C838 85 0B                         STA temp
0C83A A9 11                         LDA #$11
0C83C 85 0C                         STA temp+1
0C83E BD 70 D4                      LDA tbl_BallColorLight,x
0C841 85 0D                         STA temp+2
0C843 20 FE D2                      JSR sub_WriteByteToPPUBuffer
0C846                               
0C846                               ;; Add new dark color of ball to PPU palette
0C846 E6 0C                         INC temp+1
0C848 BD 6A D4                      LDA tbl_BallColorDark,x
0C84B 85 0D                         STA temp+2
0C84D 20 FE D2                      JSR sub_WriteByteToPPUBuffer
0C850                               
0C850 60                            RTS
0C851                           
0C851                           .include "game/subroutine/ColorsMatch.asm"
0C851                           
0C851                           ;; Subroutine to check if ball color matches colliding tile color
0C851                           
0C851                           sub_ColorsMatch:
0C851                               ;; Save tile color in temp variable
0C851 A5 4F                         LDA colliding_tile
0C853 29 0E                         AND #%00001110
0C855 85 0B                         STA temp
0C857                           
0C857                               ;; Get ball color
0C857 A5 42                         LDA ball_flags
0C859 29 E0                         AND #%11100000
0C85B 4A                            LSR
0C85C 4A                            LSR
0C85D 4A                            LSR
0C85E 4A                            LSR
0C85F                           
0C85F                               ;; Compare with tile color
0C85F C5 0B                         CMP temp
0C861 60                            RTS
0C862                           
0C862                           .include "game/subroutine/ConvertXYToTileType.asm"
0C862                           
0C862                           ;; Subroutine to convert the ball's position to a tile type
0C862                           ;; - Expects temp to be y-position of ball within game area
0C862                           ;; - Expects temp+1 to be x-position of ball within game area
0C862                           ;; - Puts result in accumulator and zp variable
0C862                           ;; - Corrupts X-register
0C862                           
0C862                           sub_ConvertXYToTileType:
0C862 A5 0C                         LDA temp+1
0C864 4A                            LSR
0C865 4A                            LSR
0C866 4A                            LSR
0C867 4A                            LSR
0C868 85 14                         STA temp+9
0C86A A5 0B                         LDA temp
0C86C 29 F0                         AND #%11110000
0C86E 18                            CLC
0C86F 65 14                         ADC temp+9
0C871 85 14                         STA temp+9
0C873 AA                            TAX
0C874 BD 00 04                      LDA tile_type, x
0C877 85 4F                         STA colliding_tile
0C879 60                            RTS
0C87A                           
0C87A                           .include "game/subroutine/DisableEnableRendering.asm"
0C87A                           
0C87A                           ;; Subroutines to disable or enable screen rendering
0C87A                           
0C87A                           sub_DisableRendering:
0C87A                               ;; Force NMI skip, disable rendering
0C87A A9 01                     	LDA #$01
0C87C 85 1F                     	STA force_skip_nmi
0C87E 20 DE C6                      JSR sub_WaitForVBlank
0C881 A5 1D                         LDA soft_ppu_mask
0C883 29 E7                         AND #%11100111
0C885 8D 01 20                      STA PPU_MASK
0C888 85 1D                         STA soft_ppu_mask
0C88A 20 DE C6                      JSR sub_WaitForVBlank
0C88D 60                            RTS
0C88E                           
0C88E                           sub_EnableRendering:
0C88E                               ;; Enable rendering
0C88E A9 00                     	LDA #$00
0C890 8D 05 20                  	STA PPU_SCROLL
0C893 8D 05 20                  	STA PPU_SCROLL
0C896 20 DE C6                      JSR sub_WaitForVBlank
0C899 85 1F                     	STA force_skip_nmi
0C89B A5 1D                         LDA soft_ppu_mask
0C89D 09 18                         ORA #%00011000
0C89F 85 1D                         STA soft_ppu_mask
0C8A1 8D 01 20                      STA PPU_MASK
0C8A4 20 DE C6                      JSR sub_WaitForVBlank
0C8A7 60                            RTS
0C8A8                           
0C8A8                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C8A8                           
0C8A8                           ;; Draw a tile from the logo on the intro screen
0C8A8                           sub_drawIntroScreenLogoTile:
0C8A8 B9 44 D3                      LDA tbl_IntroScreenLogoChr,y
0C8AB C9 60                         CMP #$60
0C8AD D0 08                         BNE +
0C8AF 20 B3 C6                          JSR sub_GetRandomNumber
0C8B2 29 07                             AND #$07
0C8B4 18                                CLC
0C8B5 69 60                             ADC #$60
0C8B7                               +
0C8B7 8D 07 20                      STA PPU_DATA
0C8BA 60                            RTS
0C8BB                           
0C8BB                           .include "game/subroutine/DrawMoveTile.asm"
0C8BB                           
0C8BB                           ;; Draw the move tile as follows:
0C8BB                           ;;
0C8BB                           ;;  1 2
0C8BB                           ;;  3 4 5
0C8BB                           ;;    6 7
0C8BB                           ;;
0C8BB                           ;; (1,2,3,4) is the move block itself
0C8BB                           ;; (5,6,7) are shades unless that tile is solid
0C8BB                           
0C8BB                           ;; X holds the move block sprite slot
0C8BB                           
0C8BB                           sub_DrawMoveTile:
0C8BB                           
0C8BB                               ;; Get tile type index from sprite x and y values
0C8BB                               ;; and store it in a temp variable
0C8BB BD 78 03                      LDA move_block_x,x
0C8BE 18                            CLC
0C8BF 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C8C1 4A                            LSR
0C8C2 4A                            LSR
0C8C3 4A                            LSR
0C8C4 4A                            LSR
0C8C5 85 14                         STA temp+9
0C8C7 BD 7C 03                      LDA move_block_y,x
0C8CA 18                            CLC
0C8CB 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C8CD 29 F0                         AND #%11110000
0C8CF 18                            CLC
0C8D0 65 14                         ADC temp+9
0C8D2 85 14                         STA temp+9
0C8D4 A8                            TAY
0C8D5                               
0C8D5                               ;; Add move tile data on the new tile location
0C8D5 BD 84 03                      LDA move_block_tile_type,x
0C8D8 99 00 04                      STA tile_type,y
0C8DB                           
0C8DB                               ;; Draw the original tile type in the ppu buffer
0C8DB                               ;; - get PPU address to write to (temp, temp+1)
0C8DB 8A                            TXA
0C8DC 48                            PHA
0C8DD A6 14                         LDX temp+9
0C8DF 20 99 CB                      JSR sub_GetPPUAddrFromYXIndex
0C8E2 68                            PLA
0C8E3 AA                            TAX
0C8E4                               
0C8E4                               ;; - based on color, select tile 42 or 4A for top left
0C8E4 BD 88 03                      LDA move_block_flags,x
0C8E7 4A                            LSR
0C8E8 4A                            LSR
0C8E9 4A                            LSR
0C8EA 4A                            LSR
0C8EB 4A                            LSR
0C8EC A8                            TAY
0C8ED B9 2D DC                      LDA tbl_MoveBlockTopLeftTile,y
0C8F0 85 13                         STA temp+8
0C8F2                               
0C8F2                               ;; - save palette ID in temp+6
0C8F2 98                            TYA
0C8F3 4A                            LSR
0C8F4 85 11                         STA temp+6
0C8F6                               
0C8F6                               ;; Prepare PPU buffer
0C8F6 A4 45                         LDY ppu_buffer_pointer
0C8F8 A9 00                         LDA #$00
0C8FA 85 44                         STA ppu_buffer_update
0C8FC                               
0C8FC                               ;; Draw tile 1 (top left tile of move block)
0C8FC 20 DD C9                      JSR sub_DrawTileTemp018
0C8FF                           
0C8FF                               
0C8FF                               ;; Draw tile 2 (top right tile of move block)
0C8FF E6 0C                         INC temp+1
0C901 E6 13                         INC temp+8
0C903 20 DD C9                      JSR sub_DrawTileTemp018
0C906                           
0C906                               ;; Draw tile 3 (bottom left tile of move block)
0C906 A5 0C                         LDA temp+1
0C908 18                            CLC
0C909 69 1F                         ADC #$1F
0C90B 85 0C                         STA temp+1
0C90D A5 0B                         LDA temp
0C90F 69 00                         ADC #$00
0C911 85 0B                         STA temp
0C913 A5 13                         LDA temp+8
0C915 18                            CLC
0C916 69 0F                         ADC #$0F
0C918 85 13                         STA temp+8
0C91A 20 DD C9                      JSR sub_DrawTileTemp018
0C91D                           
0C91D                               ;; Draw tile 4 (bottom right tile of move block)
0C91D E6 0C                         INC temp+1
0C91F E6 13                         INC temp+8
0C921 20 DD C9                      JSR sub_DrawTileTemp018
0C924                           
0C924                               ;; Load tile type offset in X register
0C924 8A                            TXA
0C925 48                            PHA
0C926 A6 14                         LDX temp+9
0C928                               
0C928                               ;; Load shade tile in temp+8
0C928 A9 00                         LDA #$00
0C92A 85 13                         STA temp+8
0C92C                           
0C92C                               ;; Draw tile 5 (right shade) unless tile is solid
0C92C E6 0C                         INC temp+1
0C92E                               
0C92E 8A                            TXA
0C92F 29 0F                         AND #%00001111
0C931 C9 0D                         CMP #$0D
0C933 F0 0A                         BEQ +nextTile
0C935                           
0C935 BD 01 04                      LDA tile_type+1,x
0C938 29 01                         AND #%00000001
0C93A D0 03                         BNE +nextTile
0C93C                               
0C93C 20 DD C9                      JSR sub_DrawTileTemp018
0C93F                               
0C93F                           
0C93F                           +nextTile:
0C93F                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C93F A5 0C                         LDA temp+1
0C941 18                            CLC
0C942 69 1F                         ADC #$1F
0C944 85 0C                         STA temp+1
0C946 A5 0B                         LDA temp
0C948 69 00                         ADC #$00
0C94A 85 0B                         STA temp
0C94C                           
0C94C 8A                            TXA
0C94D 29 F0                         AND #%11110000
0C94F C9 90                         CMP #$90
0C951 F0 0A                         BEQ +nextTile
0C953                           
0C953 BD 10 04                      LDA tile_type+16,x
0C956 29 01                         AND #%00000001
0C958 D0 03                         BNE +nextTile
0C95A                               
0C95A 20 DD C9                      JSR sub_DrawTileTemp018
0C95D                           
0C95D                               
0C95D                           +nextTile:
0C95D                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C95D E6 0C                         INC temp+1
0C95F                           
0C95F 8A                            TXA
0C960 29 F0                         AND #%11110000
0C962 C9 90                         CMP #$90
0C964 F0 11                         BEQ +setTileAttributes
0C966                               
0C966 8A                            TXA
0C967 29 0F                         AND #%00001111
0C969 C9 0D                         CMP #$0D
0C96B F0 0A                         BEQ +setTileAttributes
0C96D                               
0C96D BD 11 04                      LDA tile_type+17,x
0C970 29 01                         AND #%00000001
0C972 D0 03                         BNE +setTileAttributes
0C974                               
0C974 20 DD C9                      JSR sub_DrawTileTemp018
0C977                               
0C977                           
0C977                           +setTileAttributes:
0C977                               ;; Update attribute table accordingly through ppu buffer
0C977                               ;; - PPU buffer high byte
0C977 20 6F D2                      JSR sub_SetTileAttributeAddress
0C97A                           
0C97A 8A                            TXA
0C97B 29 10                         AND #%00010000
0C97D F0 05                         BEQ +        
0C97F A9 F0                             LDA #%11110000
0C981 4C 86 C9                          JMP ++
0C984                               +
0C984 A9 0F                         LDA #%00001111
0C986                               ++
0C986 85 0D                         STA temp+2
0C988                               
0C988 8A                            TXA
0C989 29 01                         AND #%00000001
0C98B F0 07                         BEQ +
0C98D A5 0D                             LDA temp+2
0C98F 09 CC                             ORA #%11001100
0C991 4C 98 C9                          JMP ++
0C994                               +
0C994 A5 0D                         LDA temp+2
0C996 09 33                         ORA #%00110011
0C998                               ++
0C998 85 0D                         STA temp+2
0C99A                               
0C99A C9 FC                         CMP #%11111100
0C99C F0 22                         BEQ +continue
0C99E                               
0C99E C9 F3                         CMP #%11110011
0C9A0 D0 09                         BNE +
0C9A2 A5 11                             LDA temp+6
0C9A4 0A                                ASL
0C9A5 0A                                ASL
0C9A6 85 11                             STA temp+6
0C9A8 4C C0 C9                          JMP +continue
0C9AB                               +
0C9AB                               
0C9AB C9 CF                         CMP #%11001111
0C9AD D0 0A                         BNE +
0C9AF A6 11                             LDX temp+6
0C9B1 BD CE DB                          LDA tbl_Times16,x
0C9B4 85 11                             STA temp+6
0C9B6 4C C0 C9                          JMP +continue
0C9B9                               +
0C9B9                               
0C9B9 A6 11                         LDX temp+6
0C9BB BD DE DB                      LDA tbl_Times64,x
0C9BE 85 11                         STA temp+6
0C9C0                                   
0C9C0                           +continue:
0C9C0 A5 0B                         LDA temp
0C9C2 38                            SEC
0C9C3 E9 C0                         SBC #$C0
0C9C5 AA                            TAX
0C9C6 BD A0 04                      LDA tile_attributes,x
0C9C9 25 0D                         AND temp+2
0C9CB 05 11                         ORA temp+6
0C9CD 9D A0 04                      STA tile_attributes,x
0C9D0 99 00 03                      STA ppu_buffer,y
0C9D3 C8                            INY
0C9D4                           
0C9D4                               ;; Restore original X
0C9D4 68                            PLA
0C9D5 AA                            TAX
0C9D6                               
0C9D6                               ;; Update PPU buffer
0C9D6 84 45                         STY ppu_buffer_pointer
0C9D8 A9 01                         LDA #$01
0C9DA 85 44                         STA ppu_buffer_update
0C9DC                           
0C9DC                               ;; Return
0C9DC 60                            RTS
0C9DD                           
0C9DD                           .include "game/subroutine/DrawTileTemp018.asm"
0C9DD                           
0C9DD                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C9DD                           
0C9DD                           sub_DrawTileTemp018:
0C9DD A5 0B                         LDA temp
0C9DF 99 00 03                      STA ppu_buffer,y
0C9E2 C8                            INY
0C9E3 A5 0C                         LDA temp+1
0C9E5 99 00 03                      STA ppu_buffer,y
0C9E8 C8                            INY
0C9E9 A5 13                         LDA temp+8
0C9EB 99 00 03                      STA ppu_buffer,y
0C9EE C8                            INY
0C9EF 60                            RTS
0C9F0                           
0C9F0                           .include "game/subroutine/EvaluateTileType.asm"
0C9F0                           
0C9F0                           ;; Subroutine to evaluate the colliding tile type and take its
0C9F0                           ;; corresponding action (move block, kill player, ...)
0C9F0                           ;; - Expects X-register to be the tile_type offset
0C9F0                           ;; - Uses zp variable colliding_tile
0C9F0                           
0C9F0                           sub_EvaluateTileType:
0C9F0                           
0C9F0                               ;; Check if collided tile is a color block
0C9F0 A5 4F                         LDA colliding_tile
0C9F2 29 80                         AND #IS_COLOR_BLOCK
0C9F4 D0 03                         BNE +
0C9F6 4C 5F CA                          JMP +checkIfPaintBlock
0C9F9                               +
0C9F9                               
0C9F9                               ;; It's a color block. Check if the colors match
0C9F9 20 51 C8                      JSR sub_ColorsMatch
0C9FC F0 06                         BEQ +
0C9FE                                   ;; Colors don't match
0C9FE                                   ;; Play bounce sound effect
0C9FE A2 02                             LDX #SFX_BOUNCE
0CA00 20 EA D0                          JSR sub_PreloadSfxFromX
0CA03                                   
0CA03                                   ;; Return
0CA03 60                                RTS
0CA04                               +
0CA04                           
0CA04                               ;; Colors match; destroy color block
0CA04                               
0CA04                               ;; Convert the metatile offset value (which is in the X register)
0CA04                               ;; to its corresponding address in PPU
0CA04 20 99 CB                      JSR sub_GetPPUAddrFromYXIndex
0CA07                           
0CA07                               ;; Remove color block from screen by drawing a total
0CA07                               ;; of 7 tiles over it (shade included)
0CA07 20 F9 D0                      JSR sub_RemoveBlockFromScreen
0CA0A                               
0CA0A                               ;; - Load destruction animation on tile
0CA0A                               ;; Get most recent slot for explosion    
0CA0A 8A                            TXA
0CA0B 85 0D                         STA temp+2
0CA0D A6 46                         LDX explosion_pointer
0CA0F                           
0CA0F                               ;; If 0, use max pointer value
0CA0F D0 02                         BNE +
0CA11 A2 04                             LDX #MAX_ANIMATIONS
0CA13                               +
0CA13                           
0CA13                               ;; Decrease pointer by one
0CA13 CA                            DEX
0CA14 86 46                         STX explosion_pointer
0CA16                           
0CA16                               ;; Load explosion data into RAM
0CA16 A9 00                         LDA #$00
0CA18 9D 64 03                      STA explosion_currentframe,x
0CA1B                           
0CA1B A9 04                         LDA #ANIMATION_SPEED
0CA1D 9D 60 03                      STA explosion_timer,x
0CA20                           
0CA20 A5 0D                         LDA temp+2
0CA22 29 0F                         AND #%00001111
0CA24 A8                            TAY
0CA25 B9 CE DB                      LDA tbl_Times16,y
0CA28 18                            CLC
0CA29 69 0E                         ADC #$0E
0CA2B 9D 6C 03                      STA explosion_x,x
0CA2E                           
0CA2E A5 0D                         LDA temp+2
0CA30 29 F0                         AND #%11110000
0CA32 18                            CLC
0CA33 69 29                         ADC #$29
0CA35 9D 70 03                      STA explosion_y,x
0CA38                           
0CA38 A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0CA3A 9D 68 03                      STA explosion_attributes,x
0CA3D A9 01                         LDA #$01
0CA3F 9D 74 03                      STA explosion_active,x
0CA42                           
0CA42 A5 0D                         LDA temp+2
0CA44 AA                            TAX
0CA45                               
0CA45                               
0CA45                               ;; - Write #$00 in tile type ram (makes not-solid)
0CA45 A9 00                         LDA #$00
0CA47 9D 00 04                      STA tile_type, x
0CA4A                           
0CA4A                           
0CA4A                               ;; Add (80 + level number) to score
0CA4A A5 4E                         LDA current_level
0CA4C 18                            CLC
0CA4D 69 51                         ADC #81
0CA4F 20 E4 C6                      JSR sub_AddAccumulatorToScore
0CA52                           
0CA52                           
0CA52                               ;; Play thud sound effect
0CA52 A2 01                         LDX #SFX_THUD
0CA54 20 EA D0                      JSR sub_PreloadSfxFromX
0CA57                           
0CA57                           
0CA57                               ;; - If there are no color blocks left:
0CA57                               ;;   - Initiate level-win state
0CA57 C6 50                         DEC blocks_left
0CA59 D0 03                         BNE +
0CA5B 4C D2 C4                          JMP lbl_LevelWin
0CA5E                               +
0CA5E                               
0CA5E 60                            RTS
0CA5F                           
0CA5F                           
0CA5F                           
0CA5F                           +checkIfPaintBlock:
0CA5F                           
0CA5F                               ;; Check if collided tile is a paint block
0CA5F A5 4F                         LDA colliding_tile
0CA61 29 20                         AND #IS_PAINT_BLOCK
0CA63 F0 1E                         BEQ +checkIfDeathBlock
0CA65                                   ;; It's a paint block. Update ball color
0CA65                                   ;; Save x-register
0CA65 8A                                TXA
0CA66 48                                PHA
0CA67                           
0CA67                                   ;; Get tile color
0CA67 A5 4F                             LDA colliding_tile
0CA69 29 0E                             AND #%00001110
0CA6B 0A                                ASL
0CA6C 0A                                ASL
0CA6D 0A                                ASL
0CA6E 0A                                ASL
0CA6F 85 0B                             STA temp
0CA71                           
0CA71                                   ;; Apply tile color to ball
0CA71 A5 42                             LDA ball_flags
0CA73 29 1F                             AND #%00011111
0CA75 05 0B                             ORA temp
0CA77 85 42                             STA ball_flags
0CA79 20 30 C8                          JSR sub_ColorizeBall
0CA7C                           
0CA7C                                   ;; Play paint sound effect
0CA7C A9 10                             LDA #$10
0CA7E 85 5C                             STA sfx_timer+2
0CA80                           
0CA80                                   ;; Restore x-register
0CA80 68                                PLA
0CA81 AA                                TAX
0CA82                           
0CA82                                   ;; Return
0CA82 60                                RTS
0CA83                                   
0CA83                                   
0CA83                                   
0CA83                           +checkIfDeathBlock:
0CA83                           
0CA83                               ;; Check if collided tile is a death block
0CA83 A5 4F                         LDA colliding_tile
0CA85 29 10                         AND #IS_DEATH_BLOCK
0CA87 F0 3D                         BEQ +checkIfMoveBlock
0CA89                           
0CA89                           ;; Also, when the player presses select during gameplay,
0CA89                           ;; insta-selfdestruct the ball.
0CA89                           sub_Selfdestruct:
0CA89                           
0CA89                                   ;; It is a death block
0CA89                                   ;; Freeze and kill player
0CA89 A5 42                             LDA ball_flags
0CA8B 09 05                             ORA #%00000101
0CA8D 85 42                             STA ball_flags
0CA8F                                   
0CA8F                                   ;; Get free explosion slot
0CA8F A6 46                             LDX explosion_pointer
0CA91 D0 02                             BNE +
0CA93 A2 04                                 LDX #MAX_ANIMATIONS
0CA95                                   +
0CA95 CA                                DEX
0CA96 86 46                             STX explosion_pointer
0CA98                           
0CA98                                   ;; Load explosion data into RAM
0CA98 A9 00                             LDA #$00
0CA9A 9D 64 03                          STA explosion_currentframe,x
0CA9D                           
0CA9D A9 04                             LDA #ANIMATION_SPEED
0CA9F 9D 60 03                          STA explosion_timer,x
0CAA2                           
0CAA2 A5 22                             LDA ball_xpos_hi
0CAA4 38                                SEC
0CAA5 E9 08                             SBC #$08
0CAA7 9D 6C 03                          STA explosion_x,x
0CAAA                           
0CAAA A5 24                             LDA ball_ypos_hi
0CAAC 38                                SEC
0CAAD E9 06                             SBC #$06
0CAAF 9D 70 03                          STA explosion_y,x
0CAB2                           
0CAB2 A9 01                             LDA #$01
0CAB4 9D 68 03                          STA explosion_attributes,x  ; set subpalette 1 for ball explosion
0CAB7 9D 74 03                          STA explosion_active,x      ; set explosion animation to active
0CABA 85 57                             STA noise_muted             ; mute background noise
0CABC                                   
0CABC                                   ;; Play explosion sound effect
0CABC A2 00                             LDX #SFX_EXPLOSION
0CABE 20 EA D0                          JSR sub_PreloadSfxFromX
0CAC1                           
0CAC1                                   ;; Set kill timer
0CAC1 A9 60                             LDA #$60
0CAC3 85 4B                             STA kill_timer
0CAC5                           
0CAC5                                   ;; Return
0CAC5 60                                RTS
0CAC6                           
0CAC6                           
0CAC6                           
0CAC6                           +checkIfMoveBlock:
0CAC6                           
0CAC6                               ;; Check if collided tile is a move block
0CAC6 A5 4F                         LDA colliding_tile
0CAC8 29 40                         AND #IS_MOVE_BLOCK
0CACA D0 06                         BNE +
0CACC                                   ;; Tile is not a move block
0CACC                                   ;; Therefore, it is a solid wall
0CACC                                   
0CACC                                   ;; Play bounce sound effect
0CACC A2 02                             LDX #SFX_BOUNCE
0CACE 20 EA D0                          JSR sub_PreloadSfxFromX
0CAD1                           
0CAD1                                   ;; Return
0CAD1 60                                RTS
0CAD2                               +
0CAD2                           
0CAD2                               ;; It is a move block. Check if colors match
0CAD2 20 51 C8                      JSR sub_ColorsMatch
0CAD5 F0 06                         BEQ +
0CAD7                                   ;; Colors do not match
0CAD7                                   ;; Play bounce sound effect
0CAD7 A2 02                             LDX #SFX_BOUNCE
0CAD9 20 EA D0                          JSR sub_PreloadSfxFromX
0CADC                           
0CADC                                   ;; Return
0CADC 60                                RTS
0CADD                               +
0CADD                           
0CADD                               ;; Colors match
0CADD                               ;; - Check if next tile is within the playground
0CADD                               ;; (push X onto stack as well)
0CADD 8A                            TXA
0CADE 48                            PHA
0CADF 18                            CLC
0CAE0 65 41                         ADC move_block_space_to_check
0CAE2 AA                            TAX
0CAE3                               
0CAE3 29 0F                         AND #%00001111
0CAE5 C9 0E                         CMP #$0E
0CAE7 90 03                         BCC +
0CAE9 4C 61 CB                          JMP +dontMoveBlock
0CAEC                               +
0CAEC 8A                            TXA
0CAED 29 F0                         AND #%11110000
0CAEF C9 A0                         CMP #$A0
0CAF1 D0 03                         BNE +
0CAF3 4C 61 CB                          JMP +dontMoveBlock
0CAF6                               +
0CAF6 C9 F0                         CMP #$F0
0CAF8 D0 03                         BNE +
0CAFA 4C 61 CB                          JMP +dontMoveBlock
0CAFD                               +
0CAFD                               
0CAFD                               ;; Check if the next tile is solid
0CAFD BD 00 04                      LDA tile_type,x
0CB00 29 01                         AND #TILE_IS_SOLID
0CB02 F0 03                         BEQ +
0CB04 4C 61 CB                          JMP +dontMoveBlock
0CB07                               +
0CB07                               
0CB07                               ;; Move block has room to move
0CB07                               ;; Pull original X from stack
0CB07 68                            PLA
0CB08 AA                            TAX        
0CB09                               
0CB09                               ;; Add the tiles that need updating to ppu buffer, and
0CB09                               ;; update attribute table accordingly through ppu buffer
0CB09 20 99 CB                      JSR sub_GetPPUAddrFromYXIndex
0CB0C 20 F9 D0                      JSR sub_RemoveBlockFromScreen
0CB0F                           
0CB0F                               ;; Store original tile type in temp variable
0CB0F BD 00 04                      LDA tile_type,x
0CB12 85 13                         STA temp+8
0CB14                           
0CB14                               ;; Write #$00 in tile type ram (makes not-solid)
0CB14 A9 00                         LDA #$00
0CB16 9D 00 04                      STA tile_type,x
0CB19                           
0CB19                               ;; Add move tile sprite over the original tile
0CB19                               ;; - Store x in temp variable
0CB19 86 0E                         STX temp+3
0CB1B                               
0CB1B                               ;; - Update move block pointer
0CB1B A6 47                         LDX move_block_pointer
0CB1D D0 02                         BNE +
0CB1F A2 04                             LDX #MAX_ANIMATIONS
0CB21                               +
0CB21 CA                            DEX
0CB22 86 47                         STX move_block_pointer
0CB24                           
0CB24                               ;; = Set move block tile type
0CB24 A5 13                         LDA temp+8
0CB26 9D 84 03                      STA move_block_tile_type,x
0CB29                           
0CB29                               ;; - Set move block X position
0CB29 A5 0E                         LDA temp+3
0CB2B 29 0F                         AND #%00001111
0CB2D A8                            TAY
0CB2E C8                            INY
0CB2F B9 CE DB                      LDA tbl_Times16,y
0CB32 9D 78 03                      STA move_block_x,x
0CB35                               
0CB35                               ;; - Set move block Y position
0CB35 A5 0E                         LDA temp+3
0CB37 29 F0                         AND #%11110000
0CB39 18                            CLC
0CB3A 69 30                         ADC #$30
0CB3C 9D 7C 03                      STA move_block_y,x
0CB3F DE 7C 03                      DEC move_block_y,x
0CB42                               
0CB42                               ;; - Set timer to 16 (+1) frames
0CB42 A9 11                         LDA #$11
0CB44 9D 80 03                      STA move_block_timer,x
0CB47                               
0CB47                               ;; - Set move direction
0CB47 A5 41                         LDA move_block_space_to_check
0CB49 29 81                         AND #%10000001
0CB4B 18                            CLC
0CB4C 2A                            ROL
0CB4D 69 00                         ADC #$00
0CB4F 85 0F                         STA temp+4
0CB51                               
0CB51                               ;; - Set block color as ball color and add direction
0CB51 A5 42                         LDA ball_flags
0CB53 29 E0                         AND #BALL_COLOR
0CB55 05 0F                         ORA temp+4
0CB57 9D 88 03                      STA move_block_flags,x
0CB5A                               
0CB5A                               ;; - Restore original X
0CB5A A6 0E                         LDX temp+3
0CB5C                               
0CB5C                               ;; - Initiate move sound effect
0CB5C A9 18                         LDA #$18
0CB5E 85 5B                         STA sfx_timer+1
0CB60                           
0CB60                               ;; Return
0CB60 60                            RTS
0CB61                           
0CB61                           
0CB61                           ;; Do not move the move block
0CB61                           +dontMoveBlock:
0CB61                           
0CB61                               ;; Play bounce sound effect
0CB61 A2 02                         LDX #SFX_BOUNCE
0CB63 20 EA D0                      JSR sub_PreloadSfxFromX
0CB66                           
0CB66                               ;; Restore X from stack
0CB66 68                            PLA
0CB67 AA                            TAX
0CB68                               
0CB68                               ;; Return
0CB68 60                            RTS
0CB69                           
0CB69                           .include "game/subroutine/FlashEffect.asm"
0CB69                           
0CB69                           ;; Apply flashing light effect to background color
0CB69                           sub_FlashEffect:
0CB69 A2 00                         LDX #$00
0CB6B 86 0C                         STX temp+1
0CB6D A9 3F                         LDA #$3F
0CB6F 85 0B                         STA temp
0CB71                           
0CB71                               -flashLoop:
0CB71 BD 3E DC                          LDA tbl_BackgroundFade,x
0CB74 85 0D                             STA temp+2
0CB76 20 FE D2                          JSR sub_WriteByteToPPUBuffer
0CB79 A9 0D                             LDA #$0D
0CB7B 85 0C                             STA temp+1
0CB7D 20 FE D2                          JSR sub_WriteByteToPPUBuffer
0CB80 A9 19                             LDA #$19
0CB82 85 0C                             STA temp+1
0CB84 20 FE D2                          JSR sub_WriteByteToPPUBuffer
0CB87 A9 00                             LDA #$00
0CB89 85 0C                             STA temp+1
0CB8B A0 03                             LDY #$03
0CB8D                                   -
0CB8D 20 D5 C6                              JSR sub_WaitForNMI
0CB90 88                                    DEY
0CB91 D0 FA                             BNE -
0CB93 E8                                INX
0CB94 E0 0A                             CPX #$0A
0CB96 D0 D9                         BNE -flashLoop
0CB98                               
0CB98 60                            RTS
0CB99                           
0CB99                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0CB99                           
0CB99                           ;; Get the PPU address from YX index
0CB99                           ;; - Expects YX index (aka tile offset) to be in the X register
0CB99                           ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0CB99                           
0CB99                           ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0CB99                           ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0CB99                           
0CB99                           sub_GetPPUAddrFromYXIndex:
0CB99 8A                            TXA
0CB9A 29 C0                         AND #%11000000
0CB9C 18                            CLC
0CB9D 2A                            ROL
0CB9E 2A                            ROL
0CB9F 2A                            ROL
0CBA0 69 20                         ADC #$20
0CBA2 85 0B                         STA temp
0CBA4                               
0CBA4 8A                            TXA
0CBA5 29 0F                         AND #%00001111
0CBA7 0A                            ASL
0CBA8 85 0C                         STA temp+1
0CBAA                               
0CBAA 8A                            TXA
0CBAB 29 30                         AND #%00110000
0CBAD 0A                            ASL
0CBAE 0A                            ASL
0CBAF 18                            CLC
0CBB0 65 0C                         ADC temp+1
0CBB2 85 0C                         STA temp+1
0CBB4                               
0CBB4 A5 0B                         LDA temp
0CBB6 69 00                         ADC #$00
0CBB8 85 0B                         STA temp
0CBBA                               
0CBBA A5 0C                         LDA temp+1
0CBBC 18                            CLC
0CBBD 69 C2                         ADC #$C2
0CBBF 85 0C                         STA temp+1
0CBC1                               
0CBC1 A5 0B                         LDA temp
0CBC3 69 00                         ADC #$00
0CBC5 85 0B                         STA temp
0CBC7                           
0CBC7 60                            RTS
0CBC8                           
0CBC8                           .include "game/subroutine/InitiateNudge.asm"
0CBC8                           
0CBC8                           ;; Tell ball to nudge
0CBC8                           sub_InitiateNudge:
0CBC8 85 42                         STA ball_flags
0CBCA A9 06                         LDA #NUDGE_FRAMES
0CBCC 85 49                         STA nudge_timer
0CBCE 60                            RTS
0CBCF                           
0CBCF                           .include "game/subroutine/JumpToPointer.asm"
0CBCF                           
0CBCF                           ;; Helper subroutine to JSR to a variable pointer address
0CBCF                           sub_JumpToPointer:
0CBCF 6C 17 00                      JMP (pointer)
0CBD2                               ;RTS must be handled by the routine (pointer) jumps to
0CBD2                           
0CBD2                           .include "game/subroutine/LoadAnimations.asm"
0CBD2                           
0CBD2                           sub_LoadAnimations:
0CBD2                           
0CBD2                               ;; Set up loop
0CBD2 A2 00                         LDX #$00
0CBD4                               -loop_load_animation:
0CBD4                                   ;; Check if current animation is active. If not, goto next
0CBD4 BD 74 03                          LDA explosion_active,x
0CBD7 D0 03                             BNE +
0CBD9 4C 64 CC                              JMP +next
0CBDC                                   +
0CBDC                           
0CBDC                                   ;; Check the explosion framecounter
0CBDC BD 60 03                          LDA explosion_timer,x
0CBDF D0 17                             BNE +
0CBE1                                       ;; Frametimer is 0
0CBE1                                       ;; Reset to animation speed
0CBE1 A9 04                                 LDA #ANIMATION_SPEED
0CBE3 9D 60 03                              STA explosion_timer,x
0CBE6                           
0CBE6                                       ;; Set next animation frame, and check if we're done yet
0CBE6 FE 64 03                              INC explosion_currentframe,x
0CBE9 BD 64 03                              LDA explosion_currentframe,x
0CBEC C9 0A                                 CMP #ANIM_SLIDES
0CBEE D0 08                                 BNE +
0CBF0                           
0CBF0                                       ;; If we're done, inactivate current explosion, go to the next one
0CBF0 A9 00                                 LDA #$00
0CBF2 9D 74 03                              STA explosion_active,x
0CBF5 4C 64 CC                              JMP +next
0CBF8                                   +
0CBF8                           
0CBF8                                   ;; Load (x,y) position in temp variables
0CBF8 BD 6C 03                          LDA explosion_x,x
0CBFB 85 0C                             STA temp+1
0CBFD 85 0E                             STA temp+3
0CBFF BD 70 03                          LDA explosion_y,x
0CC02 85 0D                             STA temp+2
0CC04                           
0CC04                                   ;; Load attribute in temp variable
0CC04 BD 68 03                          LDA explosion_attributes,x
0CC07 85 0F                             STA temp+4
0CC09                           
0CC09                                   ;; Load current frame into Y-register
0CC09 BC 64 03                          LDY explosion_currentframe,x
0CC0C                           
0CC0C                                   ;; Load current frame ROM address from table
0CC0C B9 60 D4                          LDA explosion_anim_lo,y
0CC0F 85 17                             STA pointer
0CC11 B9 56 D4                          LDA explosion_anim_hi,y
0CC14 85 18                             STA pointer+1
0CC16                           
0CC16                                   ;; Save x-register on stack
0CC16 8A                                TXA
0CC17 48                                PHA
0CC18                           
0CC18                                   ;; Load sprites into sprite RAM
0CC18 A6 48                             LDX sprite_ram_pointer
0CC1A A0 00                             LDY #$00
0CC1C                           
0CC1C                                   ;; Prepare (x,y) offset for loop
0CC1C 84 0B                             STY temp
0CC1E                           
0CC1E                                   -loop_load_sprite:
0CC1E                                   
0CC1E                                       ;; Do not draw empty sprites
0CC1E B1 17                                 LDA (pointer),y
0CC20 F0 18                                 BEQ +nextSprite
0CC22                                   
0CC22                                           ;; Add y-position to sprite ram buffer
0CC22 A5 0D                                     LDA temp+2
0CC24 9D 00 02                                  STA ADDR_SPRITERAM,x
0CC27 E8                                        INX
0CC28                           
0CC28                                           ;; Get tile number from frame ROM address, and
0CC28                                           ;; add it to sprite ram buffer
0CC28 B1 17                                     LDA (pointer),y
0CC2A 9D 00 02                                  STA ADDR_SPRITERAM,x
0CC2D E8                                        INX
0CC2E                           
0CC2E                                           ;; Add attribute data to sprite ram buffer
0CC2E A5 0F                                     LDA temp+4
0CC30 9D 00 02                                  STA ADDR_SPRITERAM,x
0CC33 E8                                        INX
0CC34                           
0CC34                                           ;; Add x-position to sprite ram buffer
0CC34 A5 0E                                     LDA temp+3
0CC36 9D 00 02                                  STA ADDR_SPRITERAM,x
0CC39 E8                                        INX
0CC3A                           
0CC3A                                       +nextSprite:
0CC3A                           
0CC3A                                       ;; Check if all sprites are done
0CC3A C8                                    INY
0CC3B C0 09                                 CPY #SLIDE_SIZE
0CC3D F0 21                                 BEQ +updateSpriteRamPointer
0CC3F                           
0CC3F                                       ;; Update x value
0CC3F A5 0E                                 LDA temp+3
0CC41 18                                    CLC
0CC42 69 08                                 ADC #$08
0CC44 85 0E                                 STA temp+3
0CC46                           
0CC46                                       ;; Update temp for x,y position
0CC46 E6 0B                                 INC temp
0CC48 A5 0B                                 LDA temp
0CC4A C9 03                                 CMP #SLIDE_WIDTH
0CC4C D0 0F                                 BNE +
0CC4E                                           ;; Row is done; reset x-position
0CC4E A5 0C                                     LDA temp+1
0CC50 85 0E                                     STA temp+3
0CC52                           
0CC52                                           ;; Update y-position
0CC52 A5 0D                                     LDA temp+2
0CC54 18                                        CLC
0CC55 69 08                                     ADC #$08
0CC57 85 0D                                     STA temp+2
0CC59                           
0CC59                                           ;; Reset row timer
0CC59 A9 00                                     LDA #$00
0CC5B 85 0B                                     STA temp
0CC5D                                       +
0CC5D                           
0CC5D 4C 1E CC                          JMP -loop_load_sprite
0CC60                           
0CC60                               +updateSpriteRamPointer:
0CC60 86 48                             STX sprite_ram_pointer
0CC62                           
0CC62                                   ;; Retrieve x-register from stack
0CC62 68                                PLA
0CC63 AA                                TAX
0CC64                           
0CC64                               +next:
0CC64                                   ;; Check if all animations have been updated
0CC64 E8                                INX
0CC65 E0 04                             CPX #MAX_ANIMATIONS
0CC67 F0 03                             BEQ +cleanUpSpriteRam
0CC69                           
0CC69 4C D4 CB                      JMP -loop_load_animation
0CC6C                           
0CC6C                           +cleanUpSpriteRam:
0CC6C A6 48                         LDX sprite_ram_pointer
0CC6E A9 EF                         LDA #$EF
0CC70                               -
0CC70 9D 00 02                          STA ADDR_SPRITERAM,x
0CC73 E8                                INX
0CC74 D0 FA                         BNE -
0CC76                               
0CC76 60                            RTS
0CC77                               
0CC77                           .include "game/subroutine/LoadGameScreen.asm"
0CC77                           
0CC77                           ;; Load the game screen, based on level number
0CC77                           sub_LoadGameScreen:
0CC77                           
0CC77                               ;; Clear the screen
0CC77 20 C5 C7                      JSR sub_ClearScreen
0CC7A                               
0CC7A                               ;; Clear collision and attribute data; reset blocks left in the process
0CC7A A2 00                         LDX #$00
0CC7C 8A                            TXA
0CC7D 85 50                         STA blocks_left
0CC7F                               -
0CC7F 9D 00 04                          STA tile_type,x
0CC82 E8                                INX
0CC83 D0 FA                         BNE -
0CC85                               
0CC85                               ;; Get pointer from current level
0CC85 A6 4E                         LDX current_level
0CC87 BD 80 DB                      LDA tbl_lvl_layout_lo,x
0CC8A 85 17                         STA pointer
0CC8C BD 66 DB                      LDA tbl_lvl_layout_hi,x
0CC8F 85 18                         STA pointer+1
0CC91                           
0CC91                               ;; Set up the loop
0CC91 A0 00                         LDY #$00
0CC93                           -drawRowColumnLoop:
0CC93                           
0CC93                               ;; Load (x,y) of current set of tiles
0CC93 B1 17                         LDA (pointer),y
0CC95                           
0CC95                               ;; Check if level is done; if so, skip the loop
0CC95 C9 FF                         CMP #LEVEL_END
0CC97 D0 03                         BNE +
0CC99 4C E2 CD                          JMP +doneLevelLoad
0CC9C                               +
0CC9C                           
0CC9C                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CC9C 85 0B                         STA temp
0CC9E C8                            INY
0CC9F B1 17                         LDA (pointer),y
0CCA1 85 0C                         STA temp+1
0CCA3                               
0CCA3                               ;; Convert (x,y) to PPU address
0CCA3                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CCA3 A5 0B                         LDA temp
0CCA5 29 0F                         AND #%00001111
0CCA7 4A                            LSR
0CCA8 4A                            LSR
0CCA9 09 20                         ORA #$20
0CCAB 85 0D                         STA temp+2
0CCAD                               
0CCAD                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CCAD A5 0B                         LDA temp
0CCAF 29 F0                         AND #%11110000
0CCB1 4A                            LSR
0CCB2 4A                            LSR
0CCB3 4A                            LSR
0CCB4 85 0E                         STA temp+3
0CCB6                               
0CCB6 A5 0B                         LDA temp
0CCB8 29 03                         AND #%00000011
0CCBA AA                            TAX
0CCBB BD DE DB                      LDA tbl_Times64,x
0CCBE 18                            CLC
0CCBF 65 0E                         ADC temp+3
0CCC1 18                            CLC
0CCC2 69 C2                         ADC #$C2
0CCC4 85 0E                         STA temp+3
0CCC6                               
0CCC6                               ;; Add carry to temp+2
0CCC6 A5 0D                         LDA temp+2
0CCC8 69 00                         ADC #$00
0CCCA 85 0D                         STA temp+2
0CCCC                           
0CCCC                               ;; Convert tile data to loop count and tile type
0CCCC                               ;; temp+4 = color
0CCCC A5 0C                         LDA temp+1
0CCCE 29 07                         AND #%00000111
0CCD0 85 0F                         STA temp+4
0CCD2                               
0CCD2                               ;; If color = 7, this is a wall
0CCD2 C9 07                         CMP #%00000111
0CCD4 F0 12                         BEQ +wallHack
0CCD6                                   
0CCD6                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CCD6 29 01                             AND #%00000001
0CCD8 F0 02                             BEQ +
0CCDA A9 05                                 LDA #$05
0CCDC                                   +
0CCDC 85 12                             STA temp+7
0CCDE                                
0CCDE                                   ;; temp+5 = tile type
0CCDE A5 0C                             LDA temp+1
0CCE0 4A                                LSR
0CCE1 4A                                LSR
0CCE2 4A                                LSR
0CCE3 29 03                             AND #%00000011
0CCE5 4C EE CC                          JMP +setTileType
0CCE8                               +wallHack:
0CCE8                               
0CCE8                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CCE8 A9 00                         LDA #$00
0CCEA 85 12                         STA temp+7
0CCEC A9 04                         LDA #$04
0CCEE                           
0CCEE                           +setTileType:    
0CCEE 85 10                         STA temp+5
0CCF0                               
0CCF0                               ;; X = tile offset
0CCF0 18                            CLC
0CCF1 65 12                         ADC temp+7
0CCF3 AA                            TAX
0CCF4                               
0CCF4                               ;; temp+6 = number of tiles
0CCF4 A5 0C                         LDA temp+1
0CCF6 29 60                         AND #%01100000
0CCF8 4A                            LSR
0CCF9 4A                            LSR
0CCFA 4A                            LSR
0CCFB 4A                            LSR
0CCFC 4A                            LSR
0CCFD 85 11                         STA temp+6
0CCFF                               
0CCFF                               ;; Translate (x,y) to (y,x) for tile RAM
0CCFF A5 0B                         LDA temp
0CD01 0A                            ASL
0CD02 0A                            ASL
0CD03 0A                            ASL
0CD04 0A                            ASL
0CD05 85 13                         STA temp+8
0CD07 A5 0B                         LDA temp
0CD09 4A                            LSR
0CD0A 4A                            LSR
0CD0B 4A                            LSR
0CD0C 4A                            LSR
0CD0D 05 13                         ORA temp+8
0CD0F 85 0B                         STA temp
0CD11                               
0CD11                               ;; Set up loop
0CD11 98                            TYA
0CD12 48                            PHA
0CD13 A4 11                         LDY temp+6
0CD15                           
0CD15                               -drawTileLoop:
0CD15                                   ;; Write PPU address
0CD15 2C 02 20                          BIT PPU_STATUS
0CD18 A5 0D                             LDA temp+2
0CD1A 8D 06 20                          STA PPU_ADDR
0CD1D A5 0E                             LDA temp+3
0CD1F 8D 06 20                          STA PPU_ADDR
0CD22                                   
0CD22                                   ;; Write first and second tile
0CD22 BD E2 DB                          LDA tbl_GametileTopLeft,x
0CD25 8D 07 20                          STA PPU_DATA
0CD28 BD EC DB                          LDA tbl_GametileTopRight,x
0CD2B 8D 07 20                          STA PPU_DATA
0CD2E                                   
0CD2E                                   ;; Update PPU address
0CD2E 2C 02 20                          BIT PPU_STATUS
0CD31 A5 0D                             LDA temp+2
0CD33 8D 06 20                          STA PPU_ADDR
0CD36 A5 0E                             LDA temp+3
0CD38 18                                CLC
0CD39 69 20                             ADC #$20
0CD3B 8D 06 20                          STA PPU_ADDR
0CD3E                                   
0CD3E                                   ;; Write third and fourth tile
0CD3E BD F6 DB                          LDA tbl_GametileBottomLeft,x
0CD41 8D 07 20                          STA PPU_DATA
0CD44 BD 00 DC                          LDA tbl_GametileBottomRight,x
0CD47 8D 07 20                          STA PPU_DATA
0CD4A                           
0CD4A                                   ;; Push x-register to stack
0CD4A 8A                                TXA
0CD4B 48                                PHA
0CD4C                           
0CD4C                                   ;; Update tile RAM (aka collision table)
0CD4C A6 10                             LDX temp+5
0CD4E BD 0A DC                          LDA tbl_GameTileRamByte,x
0CD51 05 0F                             ORA temp+4
0CD53 0A                                ASL
0CD54 09 01                             ORA #%00000001
0CD56 A6 0B                             LDX temp
0CD58 9D 00 04                          STA tile_type,x
0CD5B                           
0CD5B                                   ;; Check if shade 1 should be drawn
0CD5B E8                                INX
0CD5C BD 00 04                          LDA tile_type,x
0CD5F D0 05                             BNE +
0CD61 A9 00                                 LDA #$00
0CD63 8D 07 20                              STA PPU_DATA
0CD66                                   +
0CD66                                   
0CD66                                   ;; Check if shade 2 should be drawn
0CD66 A5 0E                             LDA temp+3
0CD68 18                                CLC
0CD69 69 41                             ADC #$41
0CD6B 85 0E                             STA temp+3
0CD6D A5 0D                             LDA temp+2
0CD6F 69 00                             ADC #$00
0CD71 85 0D                             STA temp+2
0CD73                                   
0CD73 8A                                TXA
0CD74 18                                CLC
0CD75 69 0F                             ADC #$0F
0CD77 AA                                TAX
0CD78                                   
0CD78 BD 00 04                          LDA tile_type,x
0CD7B D0 0F                             BNE +
0CD7D A5 0D                                 LDA temp+2
0CD7F 8D 06 20                              STA PPU_ADDR
0CD82 A5 0E                                 LDA temp+3
0CD84 8D 06 20                              STA PPU_ADDR
0CD87 A9 00                                 LDA #$00
0CD89 8D 07 20                              STA PPU_DATA
0CD8C                                   +
0CD8C                           
0CD8C                                   ;; Check if shade 3 should be drawn
0CD8C E8                                INX
0CD8D E6 0E                             INC temp+3
0CD8F BD 00 04                          LDA tile_type,x
0CD92 D0 0F                             BNE +
0CD94 A5 0D                                 LDA temp+2
0CD96 8D 06 20                              STA PPU_ADDR
0CD99 A5 0E                                 LDA temp+3
0CD9B 8D 06 20                              STA PPU_ADDR
0CD9E A9 00                                 LDA #$00
0CDA0 8D 07 20                              STA PPU_DATA
0CDA3                                   +
0CDA3                                   
0CDA3                                   ;; Restore x-register from stack
0CDA3 68                                PLA
0CDA4 AA                                TAX
0CDA5                                   
0CDA5                                   ;; Reset pointer for next tile
0CDA5 A5 0E                             LDA temp+3
0CDA7 38                                SEC
0CDA8 E9 42                             SBC #$42
0CDAA 85 0E                             STA temp+3
0CDAC A5 0D                             LDA temp+2
0CDAE E9 00                             SBC #$00
0CDB0 85 0D                             STA temp+2
0CDB2                                   
0CDB2                                   ;; Draw next metatile in this loop (if any left)
0CDB2 88                                DEY
0CDB3 30 27                             BMI +doneDrawingRowColumn
0CDB5                                   
0CDB5                                   ;; Is it a row or a column?
0CDB5 A5 0C                             LDA temp+1
0CDB7 10 17                             BPL +
0CDB9                                       ;; It is a column: move pointer down (+$40)
0CDB9 A5 0E                                 LDA temp+3
0CDBB 18                                    CLC
0CDBC 69 40                                 ADC #$40
0CDBE 85 0E                                 STA temp+3
0CDC0 A5 0D                                 LDA temp+2
0CDC2 69 00                                 ADC #$00
0CDC4 85 0D                                 STA temp+2
0CDC6                                       
0CDC6                                       ;; Add 16 to temp (as a tile RAM pointer)
0CDC6 A5 0B                                 LDA temp
0CDC8 18                                    CLC
0CDC9 69 10                                 ADC #$10
0CDCB 85 0B                                 STA temp
0CDCD 4C D9 CD                              JMP +drawNextTile
0CDD0                                   +
0CDD0                                   
0CDD0                                   ;; It is a row: move pointer right (+$02)
0CDD0 A5 0E                             LDA temp+3
0CDD2 18                                CLC
0CDD3 69 02                             ADC #$02
0CDD5 85 0E                             STA temp+3
0CDD7                                   
0CDD7                                   ;; Add 1 to temp (as a tile RAM pointer)
0CDD7 E6 0B                             INC temp
0CDD9                           
0CDD9                               
0CDD9                               ;; Next tile in the row/column
0CDD9                                   +drawNextTile:
0CDD9 4C 15 CD                      JMP -drawTileLoop
0CDDC                           
0CDDC                               ;; Go to the next set of tiles
0CDDC                           +doneDrawingRowColumn:
0CDDC 68                            PLA
0CDDD A8                            TAY
0CDDE C8                            INY
0CDDF 4C 93 CC                      JMP -drawRowColumnLoop
0CDE2                           
0CDE2                           ;; Level loading is done
0CDE2                           +doneLevelLoad:
0CDE2                           
0CDE2                               ;; Count number of color blocks
0CDE2 A2 A0                         LDX #160
0CDE4                               -
0CDE4 BD FF 03                          LDA tile_type-1,x
0CDE7 29 80                             AND #%10000000
0CDE9 F0 02                             BEQ +
0CDEB E6 50                                 INC blocks_left
0CDED                                   +
0CDED CA                                DEX
0CDEE D0 F4                         BNE -
0CDF0                           
0CDF0                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CDF0 A9 20                         LDA #$20
0CDF2 8D 06 20                      STA PPU_ADDR
0CDF5 A9 A2                         LDA #$A2
0CDF7 8D 06 20                      STA PPU_ADDR
0CDFA A9 35                         LDA #$35
0CDFC 20 37 D0                      JSR sub_Draw28HorizontalTiles
0CDFF                           
0CDFF                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CDFF A9 23                         LDA #$23
0CE01 8D 06 20                      STA PPU_ADDR
0CE04 A9 42                         LDA #$42
0CE06 8D 06 20                      STA PPU_ADDR
0CE09 A9 31                         LDA #$31
0CE0B 20 37 D0                      JSR sub_Draw28HorizontalTiles
0CE0E                           
0CE0E                               ;; Left & right game bounds
0CE0E                               ;; Set PPU_ADDR and store in temp variables
0CE0E A9 20                         LDA #$20
0CE10 85 0B                         STA temp
0CE12 8D 06 20                      STA PPU_ADDR
0CE15 A9 C1                         LDA #$C1
0CE17 85 0C                         STA temp+1
0CE19 8D 06 20                      STA PPU_ADDR
0CE1C                               
0CE1C                               ;; Set vertical bound tile and set up loop
0CE1C A0 33                         LDY #$33
0CE1E A2 14                         LDX #20
0CE20                               -
0CE20                                   ;; Show left tile
0CE20 8C 07 20                          STY PPU_DATA
0CE23                                   
0CE23                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CE23 A5 0B                             LDA temp
0CE25 8D 06 20                          STA PPU_ADDR
0CE28 A5 0C                             LDA temp+1
0CE2A 18                                CLC
0CE2B 69 1D                             ADC #29
0CE2D 85 0C                             STA temp+1
0CE2F 8D 06 20                          STA PPU_ADDR
0CE32                           
0CE32                                   ;; Show right tile
0CE32 8C 07 20                          STY PPU_DATA
0CE35                           
0CE35                                   ;; Check if we're done yet
0CE35 CA                                DEX
0CE36 F0 18                             BEQ +drawCorners
0CE38                                   
0CE38                                   ;; Not done yet: add 3 to low byte for next left bound
0CE38 A5 0C                             LDA temp+1
0CE3A 18                                CLC
0CE3B 69 03                             ADC #3
0CE3D 85 0C                             STA temp+1
0CE3F                                   
0CE3F                                   ;; Apply carry to high byte
0CE3F A5 0B                             LDA temp
0CE41 69 00                             ADC #$00
0CE43 85 0B                             STA temp
0CE45                                   
0CE45                                   ;; Store next PPU_ADDR to draw at
0CE45 8D 06 20                          STA PPU_ADDR
0CE48 A5 0C                             LDA temp+1
0CE4A 8D 06 20                          STA PPU_ADDR
0CE4D 4C 20 CE                      JMP -
0CE50                               
0CE50                               
0CE50                           
0CE50                           +drawCorners:
0CE50                               ;; Draw the corners of the playing field
0CE50 A9 20                         LDA #$20
0CE52 8D 06 20                      STA PPU_ADDR
0CE55 A9 A1                         LDA #$A1
0CE57 8D 06 20                      STA PPU_ADDR
0CE5A A9 39                         LDA #$39
0CE5C 8D 07 20                      STA PPU_DATA
0CE5F                           
0CE5F A9 20                         LDA #$20
0CE61 8D 06 20                      STA PPU_ADDR
0CE64 A9 BE                         LDA #$BE
0CE66 8D 06 20                      STA PPU_ADDR
0CE69 A9 3A                         LDA #$3A
0CE6B 8D 07 20                      STA PPU_DATA
0CE6E                           
0CE6E A9 23                         LDA #$23
0CE70 8D 06 20                      STA PPU_ADDR
0CE73 A9 41                         LDA #$41
0CE75 8D 06 20                      STA PPU_ADDR
0CE78 A9 36                         LDA #$36
0CE7A 8D 07 20                      STA PPU_DATA
0CE7D                           
0CE7D A9 23                         LDA #$23
0CE7F 8D 06 20                      STA PPU_ADDR
0CE82 A9 5E                         LDA #$5E
0CE84 8D 06 20                      STA PPU_ADDR
0CE87 A9 34                         LDA #$34
0CE89 8D 07 20                      STA PPU_DATA
0CE8C                               
0CE8C                           
0CE8C                               ;; Draw the hud labels
0CE8C A9 20                         LDA #$20
0CE8E 8D 06 20                      STA PPU_ADDR
0CE91 A9 62                         LDA #$62
0CE93 8D 06 20                      STA PPU_ADDR
0CE96 A2 00                         LDX #$00
0CE98                               -
0CE98 BD 0F DC                          LDA tbl_HudText,x
0CE9B 8D 07 20                          STA PPU_DATA
0CE9E E8                                INX
0CE9F E0 1E                             CPX #$1E
0CEA1 D0 F5                         BNE -
0CEA3                           
0CEA3                           
0CEA3                               ;; Draw the current score
0CEA3 A9 20                         LDA #$20
0CEA5 8D 06 20                      STA PPU_ADDR
0CEA8 A9 83                         LDA #$83
0CEAA 8D 06 20                      STA PPU_ADDR
0CEAD A2 00                         LDX #$00
0CEAF                               -
0CEAF B5 2B                             LDA ball_score,x
0CEB1 18                                CLC
0CEB2 69 01                             ADC #$01
0CEB4 8D 07 20                          STA PPU_DATA
0CEB7 E8                                INX
0CEB8 E0 06                             CPX #$06
0CEBA D0 F3                         BNE -
0CEBC                           
0CEBC                           
0CEBC                               ;; Draw the level number
0CEBC                               ;; (with primitive HEX>DEC)
0CEBC A5 4E                         LDA current_level
0CEBE 18                            CLC
0CEBF 69 01                         ADC #$01
0CEC1 85 0C                         STA temp+1
0CEC3                               
0CEC3 C9 14                         CMP #20
0CEC5 B0 13                         BCS +tempIsTwo
0CEC7                               
0CEC7 C9 0A                         CMP #10
0CEC9 B0 05                         BCS +tempIsOne
0CECB                               
0CECB A9 00                         LDA #$00
0CECD 4C E1 CE                      JMP +setTemp
0CED0                               
0CED0                           +tempIsOne:
0CED0 38                            SEC
0CED1 E9 0A                         SBC #10
0CED3 85 0C                         STA temp+1
0CED5 A9 01                         LDA #$01
0CED7 4C E1 CE                      JMP +setTemp
0CEDA                               
0CEDA                           +tempIsTwo:
0CEDA 38                            SEC
0CEDB E9 14                         SBC #20
0CEDD 85 0C                         STA temp+1
0CEDF A9 02                         LDA #$02
0CEE1                           
0CEE1                           +setTemp:
0CEE1 85 0B                         STA temp
0CEE3                               
0CEE3 E6 0B                         INC temp
0CEE5 E6 0C                         INC temp+1
0CEE7                               
0CEE7 A9 20                         LDA #$20
0CEE9 8D 06 20                      STA PPU_ADDR
0CEEC A9 8B                         LDA #$8B
0CEEE 8D 06 20                      STA PPU_ADDR
0CEF1 A5 0B                         LDA temp
0CEF3 8D 07 20                      STA PPU_DATA
0CEF6 A5 0C                         LDA temp+1
0CEF8 8D 07 20                      STA PPU_DATA
0CEFB                           
0CEFB                           
0CEFB                               ;; Draw lives (presumes lives to be capped at 9)
0CEFB A9 20                         LDA #$20
0CEFD 8D 06 20                      STA PPU_ADDR
0CF00 A9 92                         LDA #$92
0CF02 8D 06 20                      STA PPU_ADDR
0CF05 A6 2A                         LDX ball_lives
0CF07 E8                            INX
0CF08 8E 07 20                      STX PPU_DATA
0CF0B                           
0CF0B                           
0CF0B                               ;; Set and draw bonus
0CF0B A9 07                         LDA #$07
0CF0D 85 37                         STA ball_bonus
0CF0F A9 09                         LDA #$09
0CF11 85 38                         STA ball_bonus+1
0CF13 85 39                         STA ball_bonus+2
0CF15                               
0CF15 A9 20                         LDA #$20
0CF17 8D 06 20                      STA PPU_ADDR
0CF1A A9 9A                         LDA #$9A
0CF1C 8D 06 20                      STA PPU_ADDR
0CF1F A2 00                         LDX #$00
0CF21                               -
0CF21 B5 37                             LDA ball_bonus,x
0CF23 18                                CLC
0CF24 69 01                             ADC #$01
0CF26 8D 07 20                          STA PPU_DATA
0CF29 E8                                INX
0CF2A E0 03                             CPX #$03
0CF2C D0 F3                         BNE -
0CF2E                           
0CF2E                           
0CF2E                               ;; Set attribute data to RAM
0CF2E                               
0CF2E                               ;; Byte 0-6 of attribute ram should be #%10100000
0CF2E A2 00                         LDX #$00
0CF30 A9 A0                         LDA #$A0
0CF32                               -
0CF32 9D A0 04                          STA tile_attributes,x
0CF35 E8                                INX
0CF36 E0 07                             CPX #$07
0CF38 D0 F8                         BNE -
0CF3A                               
0CF3A                               ;; Byte 7 should be #%11100000 (because of opaque tile)
0CF3A A9 E0                         LDA #$E0
0CF3C 9D A0 04                      STA tile_attributes,x
0CF3F E8                            INX
0CF40                           
0CF40                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CF40                           
0CF40                           -attributeLoop:
0CF40                               ;; Reset current attribute value
0CF40 A9 00                         LDA #$00
0CF42 85 0D                         STA temp+2
0CF44                           
0CF44                               ;; Get first metatile in tile ram based on attribute index
0CF44                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CF44 8A                            TXA
0CF45                           
0CF45 38                            SEC
0CF46 E9 08                         SBC #$08
0CF48 85 0C                         STA temp+1      ; attr - 8 (temp1)
0CF4A 0A                            ASL             ; * 2
0CF4B 85 0B                         STA temp        ; temp = temp1 * 2
0CF4D                           
0CF4D A5 0C                         LDA temp+1      ; temp1
0CF4F 29 F8                         AND #%11111000  ; rounded down to 8's
0CF51 0A                            ASL             ; * 2
0CF52 18                            CLC
0CF53 65 0B                         ADC temp        ; + temp1 * 2
0CF55 85 0B                         STA temp        ; first metatile
0CF57                           
0CF57                               ;; Store first metatile in y-register
0CF57 A8                            TAY
0CF58                           
0CF58                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CF58 8A                            TXA
0CF59 29 07                         AND #%00000111
0CF5B C9 07                         CMP #%00000111
0CF5D F0 0B                         BEQ +
0CF5F                           
0CF5F                               ;; If X >= $30, don't apply bottom right metatile
0CF5F E0 30                         CPX #$30
0CF61 B0 07                         BCS +
0CF63                               
0CF63                               ;; Add metatile1 subpalette to attribute value
0CF63 B9 00 04                      LDA tile_type,y
0CF66 29 0C                         AND #%00001100
0CF68 85 0D                         STA temp+2
0CF6A                               +
0CF6A                           
0CF6A                           
0CF6A                               ;; Apply second metatile
0CF6A 88                            DEY
0CF6B                           
0CF6B                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CF6B 8A                            TXA
0CF6C 29 07                         AND #%00000111
0CF6E F0 10                         BEQ +
0CF70                           
0CF70                               ;; If X >= $30, don't apply bottom left metatile
0CF70 E0 30                         CPX #$30
0CF72 B0 0C                         BCS +
0CF74                           
0CF74                           
0CF74                           
0CF74                               ;; Add metatile2 subpalette to attribute value
0CF74 B9 00 04                      LDA tile_type,y
0CF77 29 0C                         AND #%00001100
0CF79 4A                            LSR
0CF7A 4A                            LSR
0CF7B 05 0D                         ORA temp+2
0CF7D 4C 82 CF                      JMP ++
0CF80                               +
0CF80 A5 0D                         LDA temp+2
0CF82                               ++
0CF82 0A                            ASL
0CF83 0A                            ASL
0CF84 85 0D                         STA temp+2
0CF86                           
0CF86                           
0CF86                               ;; Apply third metatile
0CF86 98                            TYA
0CF87 38                            SEC
0CF88 E9 0F                         SBC #$0F
0CF8A A8                            TAY
0CF8B                           
0CF8B                               ;; If X MOD 8 == 7, don't apply top right metatile
0CF8B 8A                            TXA
0CF8C 29 07                         AND #%00000111
0CF8E C9 07                         CMP #%00000111
0CF90 F0 11                         BEQ +
0CF92                           
0CF92                               ;; If X < $10, don't apply top right metatile
0CF92 8A                            TXA
0CF93 29 F0                         AND #%11110000
0CF95 F0 0C                         BEQ +
0CF97                           
0CF97                               ;; Add metatile3 subpalette to attribute value
0CF97 B9 00 04                      LDA tile_type,y
0CF9A 29 0C                         AND #%00001100
0CF9C 4A                            LSR
0CF9D 4A                            LSR
0CF9E 05 0D                         ORA temp+2
0CFA0 4C A5 CF                      JMP ++
0CFA3                               +
0CFA3 A5 0D                         LDA temp+2
0CFA5                               ++
0CFA5 0A                            ASL
0CFA6 0A                            ASL
0CFA7 85 0D                         STA temp+2
0CFA9                           
0CFA9                           
0CFA9                               ;; Apply fourth metatile
0CFA9 88                            DEY
0CFAA                           
0CFAA                               ;; If X MOD 8 == 0, don't apply top left metatile
0CFAA 8A                            TXA
0CFAB 29 07                         AND #%00000111
0CFAD F0 11                         BEQ +
0CFAF                           
0CFAF                               ;; If X < $10, don't apply top left metatile
0CFAF 8A                            TXA
0CFB0 29 F0                         AND #%11110000
0CFB2 F0 0C                         BEQ +
0CFB4                           
0CFB4                               ;; Add metatile4 subpalette to attribute value
0CFB4 B9 00 04                      LDA tile_type,y
0CFB7 29 0C                         AND #%00001100
0CFB9 4A                            LSR
0CFBA 4A                            LSR
0CFBB 05 0D                         ORA temp+2
0CFBD 4C C2 CF                      JMP ++
0CFC0                               +
0CFC0 A5 0D                         LDA temp+2
0CFC2                               ++
0CFC2 9D A0 04                      STA tile_attributes,x
0CFC5                           
0CFC5                               ;; Check the next attribute, if any left
0CFC5 E8                            INX
0CFC6 E0 38                         CPX #$38
0CFC8 F0 03                         BEQ +
0CFCA 4C 40 CF                          JMP -attributeLoop
0CFCD                               +
0CFCD                           
0CFCD                               ;; Stream attribute RAM to PPU
0CFCD 2C 02 20                      BIT PPU_STATUS
0CFD0 A9 23                         LDA #$23
0CFD2 8D 06 20                      STA PPU_ADDR
0CFD5 A9 C0                         LDA #$C0
0CFD7 8D 06 20                      STA PPU_ADDR
0CFDA A2 00                         LDX #$00
0CFDC                               -
0CFDC BD A0 04                          LDA tile_attributes,x
0CFDF 8D 07 20                          STA PPU_DATA
0CFE2 E8                                INX
0CFE3 E0 40                             CPX #$40
0CFE5 D0 F5                         BNE -
0CFE7                           
0CFE7                               ;; Set initial ball position
0CFE7 A6 4E                         LDX current_level
0CFE9 BD 9A DB                      LDA tbl_lvl_ball_startpos,x
0CFEC 29 F0                         AND #%11110000
0CFEE 18                            CLC
0CFEF 69 34                         ADC #$34
0CFF1 85 24                         STA ball_ypos_hi
0CFF3 BD 9A DB                      LDA tbl_lvl_ball_startpos,x
0CFF6 0A                            ASL
0CFF7 0A                            ASL
0CFF8 0A                            ASL
0CFF9 0A                            ASL
0CFFA 18                            CLC
0CFFB 69 14                         ADC #$14
0CFFD 85 22                         STA ball_xpos_hi
0CFFF A9 00                         LDA #$00
0D001 85 23                         STA ball_xpos_lo
0D003 85 25                         STA ball_ypos_lo
0D005                               
0D005                               ;; Set initial ball color and direction
0D005 BD B4 DB                      LDA tbl_lvl_ball_init,x
0D008 29 F0                         AND #%11110000
0D00A 85 42                         STA ball_flags
0D00C 20 30 C8                      JSR sub_ColorizeBall
0D00F                               
0D00F                               ;; Reset bonus timer
0D00F A9 08                         LDA #BONUS_FRAMES
0D011 85 4A                         STA bonus_timer
0D013                               
0D013                               ;; Play background noise
0D013 A9 08                         LDA #$08
0D015 8D 15 40                      STA APU_STATUS
0D018 8D 0F 40                      STA NOISE_LENGTH
0D01B A9 0E                         LDA #$0E
0D01D 85 53                         STA current_noise
0D01F A9 00                         LDA #$00
0D021 85 51                         STA max_noise
0D023 85 54                         STA noise_timer
0D025 85 52                         STA sweep_noise
0D027 85 57                         STA noise_muted
0D029 20 43 C7                      JSR sub_BackgroundNoise
0D02C                           
0D02C                               ;; Freeze the ball
0D02C A5 42                         LDA ball_flags
0D02E 09 04                         ORA #FREEZE_BALL
0D030 85 42                         STA ball_flags
0D032                               
0D032                               ;; Start unfreeze timer
0D032 A9 30                         LDA #$30
0D034 85 4C                         STA unfreeze_timer
0D036                           
0D036                               ;; Return
0D036 60                            RTS
0D037                           
0D037                           
0D037                           ;; Subroutine: draw 28 tiles in a row
0D037                           sub_Draw28HorizontalTiles:
0D037 A2 1C                         LDX #28
0D039                               -
0D039 8D 07 20                          STA PPU_DATA
0D03C CA                                DEX
0D03D D0 FA                         BNE -
0D03F 60                            RTS
0D040                           
0D040                           .include "game/subroutine/LoadIntroScreen.asm"
0D040                           
0D040                           ;; Load the intro screen
0D040                           sub_LoadIntroScreen:
0D040                           
0D040                               ;; Load intro palette
0D040 2C 02 20                      BIT PPU_STATUS
0D043 A9 3F                         LDA #$3F
0D045 8D 06 20                      STA PPU_ADDR
0D048 A9 00                         LDA #$00
0D04A 8D 06 20                      STA PPU_ADDR
0D04D A2 00                         LDX #$00
0D04F                               -
0D04F BD 24 D3                          LDA tbl_IntroScreenPalette,x
0D052 8D 07 20                          STA PPU_DATA
0D055 E8                                INX
0D056 E0 20                             CPX #$20
0D058 D0 F5                         BNE -
0D05A                               
0D05A                               ;; Put ball in the middle
0D05A A9 7C                         LDA #$7C
0D05C 85 22                         STA ball_xpos_hi
0D05E 85 24                         STA ball_ypos_hi
0D060                           
0D060                               ;; Clear the screen
0D060 20 C5 C7                      JSR sub_ClearScreen
0D063                           
0D063                               ;; Set up intro screen draw loop
0D063 A2 00                         LDX #$00
0D065                           
0D065                           -loop_IntroScreenData:
0D065                           
0D065                               ;; Get current byte from intro screen data
0D065 BD 4C D3                      LDA tbl_IntroScreenData,x
0D068                           
0D068                               ;; If current byte is #$3E, draw high score
0D068 C9 3E                         CMP #$3E
0D06A D0 14                         BNE +
0D06C A0 00                             LDY #$00
0D06E                                   -
0D06E B9 05 00                              LDA hi_score,y
0D071 18                                    CLC
0D072 69 01                                 ADC #1
0D074 8D 07 20                              STA PPU_DATA
0D077 C8                                    INY
0D078 C0 06                                 CPY #$06
0D07A D0 F2                             BNE -
0D07C E8                                INX
0D07D 4C 65 D0                          JMP -loop_IntroScreenData
0D080                               +
0D080                           
0D080                               ;; If current byte is #$3F, we're done drawing.
0D080 C9 3F                         CMP #$3F
0D082 D0 03                         BNE +
0D084 4C D1 D0                          JMP +goToEndIntroScreen
0D087                               +
0D087                           
0D087                               ;; If highest bits are %11, draw a plain tile
0D087 29 C0                         AND #%11000000
0D089 D0 03                         BNE +
0D08B 4C B1 D0                          JMP +drawTile
0D08E                               +
0D08E                               
0D08E                               ;; If highest bits are %01, set the PPU address
0D08E                               ;; If not, draw two logo tiles
0D08E C9 40                         CMP #%01000000
0D090 D0 03                         BNE +drawLogo
0D092 4C BB D0                          JMP +setPpuAddr
0D095                           
0D095                           +drawLogo:
0D095                               ;; Get bits 0-2 and store in a temp variable
0D095 BD 4C D3                      LDA tbl_IntroScreenData,x
0D098 29 07                         AND #%00000111
0D09A 85 0B                         STA temp
0D09C                               
0D09C                               ;; Get bits 3-5, shift over to get a value from 0-7
0D09C BD 4C D3                      LDA tbl_IntroScreenData,x
0D09F 4A                            LSR
0D0A0 4A                            LSR
0D0A1 4A                            LSR
0D0A2 29 07                         AND #%00000111
0D0A4                               
0D0A4                               ;; Draw the tile that corresponds with that value
0D0A4 A8                            TAY
0D0A5 20 A8 C8                      JSR sub_drawIntroScreenLogoTile
0D0A8                               
0D0A8                               ;; Do the same for the value stored in temp
0D0A8 A4 0B                         LDY temp
0D0AA 20 A8 C8                      JSR sub_drawIntroScreenLogoTile
0D0AD                           
0D0AD                               ;; Next byte please
0D0AD E8                            INX
0D0AE 4C 65 D0                      JMP -loop_IntroScreenData
0D0B1                           
0D0B1                           +drawTile:
0D0B1                               ;; Just draw the tile value on screen
0D0B1 BD 4C D3                      LDA tbl_IntroScreenData,x
0D0B4 8D 07 20                      STA PPU_DATA
0D0B7                               
0D0B7                               ;; Next byte please
0D0B7 E8                            INX
0D0B8 4C 65 D0                      JMP -loop_IntroScreenData
0D0BB                           
0D0BB                           
0D0BB                           +setPpuAddr:
0D0BB                               ;; Reset the PPU latch
0D0BB 2C 02 20                      BIT PPU_STATUS
0D0BE                               
0D0BE                               ;; Sanitize and write the high byte of the PPU address
0D0BE BD 4C D3                      LDA tbl_IntroScreenData,x
0D0C1 29 3F                         AND #%00111111
0D0C3 8D 06 20                      STA PPU_ADDR
0D0C6                           
0D0C6                               ;; Write the low byte of the PPU address
0D0C6 E8                            INX
0D0C7 BD 4C D3                      LDA tbl_IntroScreenData,x
0D0CA 8D 06 20                      STA PPU_ADDR
0D0CD                               
0D0CD                               ;; PPU has been set up to draw tiles at the correct spot now.
0D0CD                               
0D0CD                               ;; Next byte please.
0D0CD E8                            INX
0D0CE 4C 65 D0                      JMP -loop_IntroScreenData
0D0D1                           
0D0D1                           +goToEndIntroScreen:
0D0D1                           
0D0D1                               ;; To color the 1.LEVEL: line green, we need to update two
0D0D1                               ;; values in the PPU attribute data.
0D0D1 A0 08                         LDY #$08
0D0D3 2C 02 20                      BIT PPU_STATUS
0D0D6 A9 23                         LDA #$23
0D0D8 8D 06 20                      STA PPU_ADDR
0D0DB A9 C8                         LDA #$C8
0D0DD 8D 06 20                      STA PPU_ADDR
0D0E0 A9 0A                         LDA #%00001010
0D0E2                               -
0D0E2 8D 07 20                          STA PPU_DATA
0D0E5 88                                DEY
0D0E6 D0 FA                         BNE -
0D0E8                           
0D0E8 60                            RTS
0D0E9                           
0D0E9                           .include "game/subroutine/LoadWinScreen.asm"
0D0E9                           
0D0E9                           ;; Load the win screen (in progress)
0D0E9                           sub_LoadWinScreen:
0D0E9 60                            RTS
0D0EA                           
0D0EA                           .include "game/subroutine/PreloadSfxFromX.asm"
0D0EA                           
0D0EA                           sub_PreloadSfxFromX:
0D0EA                               
0D0EA                               ;; Load sample X into sfx address (low byte)
0D0EA BD 8D DC                      LDA tbl_Sfx_lo,x
0D0ED 85 58                         STA sfx_address
0D0EF                               
0D0EF                               ;; Load sample X into sfx address (high byte)
0D0EF BD 8A DC                      LDA tbl_Sfx_hi,x
0D0F2 85 59                         STA sfx_address+1
0D0F4                               
0D0F4                               ;; Start SFX timer
0D0F4 A9 01                         LDA #$01
0D0F6 85 5A                         STA sfx_timer
0D0F8                               
0D0F8 60                            RTS
0D0F9                               
0D0F9                               0D0F9                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0D0F9                           
0D0F9                           ;; Remove a block from screen
0D0F9                           sub_RemoveBlockFromScreen:
0D0F9                           
0D0F9                               ;; Get current buffer location
0D0F9 A4 45                         LDY ppu_buffer_pointer
0D0FB                               
0D0FB                               ;; TILE 1: if metatile on top left is solid, draw
0D0FB                               ;; null tile, else draw random noise tile
0D0FB A9 00                         LDA #$00
0D0FD 85 44                         STA ppu_buffer_update
0D0FF                               
0D0FF A5 0B                         LDA temp
0D101 99 00 03                      STA ppu_buffer,y
0D104 C8                            INY
0D105 A5 0C                         LDA temp+1
0D107 99 00 03                      STA ppu_buffer,y
0D10A C8                            INY
0D10B                               
0D10B 8A                            TXA
0D10C 29 0F                         AND #%00001111
0D10E F0 11                         BEQ +drawRandomTile
0D110                           
0D110 8A                            TXA
0D111 29 F0                         AND #%11110000
0D113 F0 0C                         BEQ +drawRandomTile
0D115                           
0D115 BD EF 03                      LDA tile_type-17,x
0D118 29 01                         AND #%00000001
0D11A F0 05                         BEQ +drawRandomTile  
0D11C                           
0D11C                               ;; Draw a null tile
0D11C A9 00                         LDA #$00
0D11E 4C 29 D1                      JMP +addToPPUBuffer
0D121                               
0D121                           +drawRandomTile:
0D121                               ;; Draw a random tile
0D121 20 B3 C6                      JSR sub_GetRandomNumber
0D124 29 07                         AND #%00000111
0D126 18                            CLC
0D127 69 68                         ADC #$68
0D129                               
0D129                               ;; Add tile to ppu buffer
0D129                           +addToPPUBuffer:
0D129 99 00 03                      STA ppu_buffer,y
0D12C C8                            INY
0D12D                           
0D12D                               ;; TILE 2: If metatile above is solid, draw null,
0D12D                               ;; else draw random noise.
0D12D E6 0C                         INC temp+1
0D12F A5 0B                         LDA temp
0D131 99 00 03                      STA ppu_buffer,y
0D134 C8                            INY
0D135 A5 0C                         LDA temp+1
0D137 99 00 03                      STA ppu_buffer,y
0D13A C8                            INY
0D13B                               
0D13B 8A                            TXA
0D13C 29 F0                         AND #%11110000
0D13E F0 0C                         BEQ +drawRandomTile
0D140                               
0D140 BD F0 03                      LDA tile_type-16,x
0D143 29 01                         AND #%00000001
0D145 F0 05                         BEQ +drawRandomTile
0D147                               
0D147 A9 00                         LDA #%00
0D149 4C 54 D1                      JMP +addToPPUBuffer
0D14C                           
0D14C                           +drawRandomTile:
0D14C 20 B3 C6                      JSR sub_GetRandomNumber
0D14F 29 07                         AND #%00000111
0D151 18                            CLC
0D152 69 68                         ADC #$68
0D154                           
0D154                           +addToPPUBuffer:
0D154 99 00 03                      STA ppu_buffer,y
0D157 C8                            INY
0D158                               
0D158                               ;; TILE 3 - If metatile left is solid, draw null,
0D158                               ;; else draw random noise.
0D158 A5 0C                         LDA temp+1
0D15A 18                            CLC
0D15B 69 1F                         ADC #$1F
0D15D 85 0C                         STA temp+1
0D15F A5 0B                         LDA temp
0D161 69 00                         ADC #$00
0D163 85 0B                         STA temp
0D165 99 00 03                      STA ppu_buffer,y
0D168 C8                            INY
0D169 A5 0C                         LDA temp+1
0D16B 99 00 03                      STA ppu_buffer,y
0D16E C8                            INY
0D16F                               
0D16F 8A                            TXA
0D170 29 0F                         AND #%00001111
0D172 F0 0C                         BEQ +drawRandomTile
0D174                               
0D174 BD FF 03                      LDA tile_type-1,x
0D177 29 01                         AND #%00000001
0D179 F0 05                         BEQ +drawRandomTile
0D17B                               
0D17B A9 00                         LDA #%00
0D17D 4C 88 D1                      JMP +addToPPUBuffer
0D180                           
0D180                           +drawRandomTile:
0D180 20 B3 C6                      JSR sub_GetRandomNumber
0D183 29 07                         AND #%00000111
0D185 18                            CLC
0D186 69 68                         ADC #$68
0D188                               
0D188                           +addToPPUBuffer:
0D188 99 00 03                      STA ppu_buffer,y
0D18B C8                            INY
0D18C                               
0D18C                               ;; TILE 4 - Always random noise
0D18C E6 0C                         INC temp+1
0D18E A5 0B                         LDA temp
0D190 99 00 03                      STA ppu_buffer,y
0D193 C8                            INY
0D194 A5 0C                         LDA temp+1
0D196 99 00 03                      STA ppu_buffer,y
0D199 C8                            INY
0D19A 20 B3 C6                      JSR sub_GetRandomNumber
0D19D 29 07                         AND #%00000111
0D19F 18                            CLC
0D1A0 69 68                         ADC #$68
0D1A2 99 00 03                      STA ppu_buffer,y
0D1A5 C8                            INY
0D1A6                           
0D1A6                               ;; TILE 5 - If tile on the right is solid, skip,
0D1A6                               ;; else draw random noise tile
0D1A6 E6 0C                         INC temp+1
0D1A8                               
0D1A8 8A                            TXA
0D1A9 29 0F                         AND #%00001111
0D1AB C9 0D                         CMP #$0D
0D1AD F0 1F                         BEQ +skipTile
0D1AF                               
0D1AF BD 01 04                      LDA tile_type+1,x
0D1B2 29 01                         AND #%00000001
0D1B4 D0 18                         BNE +skipTile
0D1B6 A5 0B                             LDA temp
0D1B8 99 00 03                          STA ppu_buffer,y
0D1BB C8                                INY
0D1BC A5 0C                             LDA temp+1
0D1BE 99 00 03                          STA ppu_buffer,y
0D1C1 C8                                INY
0D1C2 20 B3 C6                          JSR sub_GetRandomNumber
0D1C5 29 07                             AND #%00000111
0D1C7 18                                CLC
0D1C8 69 68                             ADC #$68
0D1CA 99 00 03                          STA ppu_buffer,y
0D1CD C8                                INY    
0D1CE                               +skipTile:
0D1CE                           
0D1CE                               ;; TILE 6 - If tile on bottom is solid, skip,
0D1CE                               ;; else draw random noise
0D1CE A5 0C                         LDA temp+1
0D1D0 18                            CLC
0D1D1 69 1F                         ADC #$1F
0D1D3 85 0C                         STA temp+1
0D1D5 A5 0B                         LDA temp
0D1D7 69 00                         ADC #$00
0D1D9 85 0B                         STA temp
0D1DB                           
0D1DB 8A                            TXA
0D1DC 29 F0                         AND #%11110000
0D1DE C9 90                         CMP #$90
0D1E0 F0 1F                         BEQ +skipTile
0D1E2                           
0D1E2 BD 10 04                      LDA tile_type+16,x
0D1E5 29 01                         AND #%00000001
0D1E7 D0 18                         BNE +skipTile
0D1E9 A5 0B                             LDA temp
0D1EB 99 00 03                          STA ppu_buffer,y
0D1EE C8                                INY
0D1EF A5 0C                             LDA temp+1
0D1F1 99 00 03                          STA ppu_buffer,y
0D1F4 C8                                INY
0D1F5 20 B3 C6                          JSR sub_GetRandomNumber
0D1F8 29 07                             AND #%00000111
0D1FA 18                                CLC
0D1FB 69 68                             ADC #$68
0D1FD 99 00 03                          STA ppu_buffer,y
0D200 C8                                INY    
0D201                               +skipTile:
0D201                               
0D201                               ;; TILE 7 - If tile on bottom right is solid, skip,
0D201                               ;; else draw random noise
0D201 E6 0C                         INC temp+1
0D203                           
0D203 8A                            TXA
0D204 29 F0                         AND #%11110000
0D206 C9 90                         CMP #$90
0D208 F0 26                         BEQ +skipTile
0D20A                               
0D20A 8A                            TXA
0D20B 29 0F                         AND #%00001111
0D20D C9 0D                         CMP #$0D
0D20F F0 1F                         BEQ +skipTile
0D211                               
0D211 BD 11 04                      LDA tile_type+17,x
0D214 29 01                         AND #%00000001
0D216 D0 18                         BNE +skipTile
0D218 A5 0B                             LDA temp
0D21A 99 00 03                          STA ppu_buffer,y
0D21D C8                                INY
0D21E A5 0C                             LDA temp+1
0D220 99 00 03                          STA ppu_buffer,y
0D223 C8                                INY
0D224 20 B3 C6                          JSR sub_GetRandomNumber
0D227 29 07                             AND #%00000111
0D229 18                                CLC
0D22A 69 68                             ADC #$68
0D22C 99 00 03                          STA ppu_buffer,y
0D22F C8                                INY    
0D230                               +skipTile:   
0D230                           
0D230                           
0D230                               ;; Update attribute table accordingly through ppu buffer
0D230 20 6F D2                      JSR sub_SetTileAttributeAddress
0D233                               
0D233 8A                            TXA
0D234 29 10                         AND #%00010000
0D236 F0 05                         BEQ +
0D238 A9 F0                             LDA #%11110000
0D23A 4C 3F D2                          JMP ++
0D23D                               +
0D23D A9 0F                         LDA #%00001111
0D23F                               ++
0D23F 85 0D                         STA temp+2
0D241                               
0D241 8A                            TXA
0D242 48                            PHA
0D243 29 01                         AND #%00000001
0D245 F0 07                         BEQ +
0D247 A5 0D                             LDA temp+2
0D249 09 CC                             ORA #%11001100
0D24B 4C 52 D2                          JMP ++
0D24E                               +
0D24E A5 0D                         LDA temp+2
0D250 09 33                         ORA #%00110011
0D252                               ++
0D252 85 0D                         STA temp+2
0D254                               
0D254 A5 0B                         LDA temp
0D256 38                            SEC
0D257 E9 C0                         SBC #$C0
0D259 AA                            TAX
0D25A BD A0 04                      LDA tile_attributes,x
0D25D 25 0D                         AND temp+2
0D25F 9D A0 04                      STA tile_attributes,x
0D262 99 00 03                      STA ppu_buffer,y
0D265 C8                            INY
0D266 68                            PLA
0D267 AA                            TAX
0D268                           
0D268                               ;; Tell PPU to update tiles and attributes next frame
0D268 84 45                         STY ppu_buffer_pointer
0D26A A9 01                         LDA #$01
0D26C 85 44                         STA ppu_buffer_update
0D26E                            
0D26E                               ;; We're done - return
0D26E 60                            RTS
0D26F                           
0D26F                           .include "game/subroutine/SetTileAttributeAddress.asm"
0D26F                           
0D26F                           ;; Set the correct tile attribute address based on game tile (x) 
0D26F                           ;; into the correct ppu buffer slot (y)
0D26F                           
0D26F                           sub_SetTileAttributeAddress:
0D26F A9 23                         LDA #$23
0D271 99 00 03                      STA ppu_buffer,y
0D274 C8                            INY
0D275                               
0D275 8A                            TXA
0D276 29 F0                         AND #%11110000
0D278 4A                            LSR
0D279 4A                            LSR
0D27A 4A                            LSR
0D27B 4A                            LSR
0D27C 18                            CLC
0D27D 69 01                         ADC #$01
0D27F 4A                            LSR
0D280 0A                            ASL
0D281 0A                            ASL
0D282 0A                            ASL
0D283 18                            CLC
0D284 69 C8                         ADC #$C8
0D286 85 0B                         STA temp
0D288 8A                            TXA
0D289 29 0F                         AND #%00001111
0D28B 18                            CLC
0D28C 69 01                         ADC #$01
0D28E 4A                            LSR
0D28F 18                            CLC
0D290 65 0B                         ADC temp
0D292 85 0B                         STA temp
0D294 99 00 03                      STA ppu_buffer,y
0D297 C8                            INY
0D298                                  
0D298 60                            RTS
0D299                           
0D299                           .include "game/subroutine/SubtractXFromBonus.asm"
0D299                           
0D299                           sub_SubtractXFromBonus:
0D299 86 14                         STX temp+9
0D29B A5 39                         LDA ball_bonus+2
0D29D 38                            SEC
0D29E E5 14                         SBC temp+9
0D2A0 30 05                         BMI +
0D2A2 85 39                             STA ball_bonus+2
0D2A4 4C BC D2                          JMP +updateBonusOnScreen
0D2A7                               +
0D2A7                           
0D2A7 18                            CLC
0D2A8 69 0A                         ADC #$0A
0D2AA 85 39                         STA ball_bonus+2
0D2AC C6 38                         DEC ball_bonus+1
0D2AE 10 0C                         BPL +updateBonusOnScreen
0D2B0                           
0D2B0 A9 09                         LDA #$09
0D2B2 85 38                         STA ball_bonus+1
0D2B4 C6 37                         DEC ball_bonus
0D2B6 10 04                         BPL +updateBonusOnScreen
0D2B8                           
0D2B8 A9 00                         LDA #$00
0D2BA 85 37                         STA ball_bonus
0D2BC                           
0D2BC                               +updateBonusOnScreen:
0D2BC A9 20                         LDA #$20
0D2BE 85 0B                         STA temp
0D2C0 A9 9C                         LDA #$9C
0D2C2 85 0C                         STA temp+1
0D2C4 A2 02                         LDX #$02
0D2C6                               
0D2C6                               -updateNextDigit:
0D2C6 B5 37                             LDA ball_bonus,x
0D2C8 18                                CLC
0D2C9 69 01                             ADC #$01
0D2CB 85 0D                             STA temp+2
0D2CD 20 FE D2                          JSR sub_WriteByteToPPUBuffer
0D2D0 C6 0C                             DEC temp+1
0D2D2 CA                                DEX
0D2D3 10 F1                         BPL -updateNextDigit
0D2D5                           
0D2D5 60                            RTS
0D2D6                           
0D2D6                           .include "game/subroutine/WaitXFrames.asm"
0D2D6                           
0D2D6                           sub_WaitXFrames:
0D2D6                               
0D2D6                               ;; Push X to stack
0D2D6 8A                            TXA
0D2D7 48                            PHA
0D2D8                               
0D2D8                               ;; Wait for NMI
0D2D8 20 D5 C6                      JSR sub_WaitForNMI
0D2DB                           
0D2DB                               ;; Clear pointer, except for sprite-zero and ball
0D2DB A9 08                         LDA #$08
0D2DD 85 48                         STA sprite_ram_pointer
0D2DF                           
0D2DF                               ;; Load animations (if any)
0D2DF 20 D2 CB                      JSR sub_LoadAnimations
0D2E2                               
0D2E2                               ;; Restore original X
0D2E2 68                            PLA
0D2E3 AA                            TAX
0D2E4                               
0D2E4                               ;; Check if all X frames have passed
0D2E4 CA                            DEX
0D2E5 D0 EF                         BNE sub_WaitXFrames
0D2E7                               
0D2E7                               ;; Return
0D2E7 60                            RTS
0D2E8                           
0D2E8                           .include "game/subroutine/Waste.asm"
0D2E8 20 EB D2                  sub_Waste7: JSR sub_Waste6
0D2EB 20 EE D2                  sub_Waste6: JSR sub_Waste5
0D2EE 20 F1 D2                  sub_Waste5: JSR sub_Waste4
0D2F1 20 F4 D2                  sub_Waste4: JSR sub_Waste3
0D2F4 20 F7 D2                  sub_Waste3: JSR sub_Waste2
0D2F7 20 FA D2                  sub_Waste2: JSR sub_Waste1
0D2FA 20 FD D2                  sub_Waste1: JSR sub_Waste0
0D2FD 60                        sub_Waste0: RTS0D2FE                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0D2FE                           
0D2FE                           ;; Write the byte in temp+2 and the ppu address (temp)
0D2FE                           ;; to a buffer, so NMI can update it before the next frame
0D2FE                           
0D2FE                           sub_WriteByteToPPUBuffer:
0D2FE                           
0D2FE                               ;; Prevent updating until full 3-byte buffer is filled,
0D2FE                               ;; so that graphics won't glitch out if NMI happens during
0D2FE                               ;; updating the buffer
0D2FE A9 00                         LDA #$00
0D300 85 44                         STA ppu_buffer_update
0D302                           
0D302                               ;; Check if buffer full; if so, wait a frame and force update
0D302 A4 45                         LDY ppu_buffer_pointer
0D304 C0 60                         CPY #$60
0D306 D0 05                         BNE +
0D308 E6 44                             INC ppu_buffer_update
0D30A 20 DE C6                          JSR sub_WaitForVBlank
0D30D                               +
0D30D                           
0D30D                               ;; Add ppu_addr high byte to buffer
0D30D A5 0B                         LDA temp
0D30F 99 00 03                      STA ppu_buffer,y
0D312                           
0D312                               ;; Add ppu_addr low byte to buffer
0D312 C8                            INY
0D313 A5 0C                         LDA temp+1
0D315 99 00 03                      STA ppu_buffer,y
0D318                           
0D318                               ;; Add ppu_data to buffer
0D318 C8                            INY
0D319 A5 0D                         LDA temp+2
0D31B 99 00 03                      STA ppu_buffer,y
0D31E                           
0D31E                               ;; Update buffer pointer
0D31E C8                            INY
0D31F 84 45                         STY ppu_buffer_pointer
0D321                           
0D321                               ;; Tell NMI to update next round
0D321 E6 44                         INC ppu_buffer_update
0D323                           
0D323                               ;; Return
0D323 60                            RTS
0D324                           
0D324                           
0D324                           
0D324                           
0D324                           ;; LUTs
0D324                           .include "game/include/tables.asm"
0D324                           
0D324                           ;; Initial screen palette
0D324                           tbl_IntroScreenPalette:
0D324 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D328 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D32C 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D330 0F 0F 10 30                   .db #$0F, #$0F, #$10, #$30
0D334                           
0D334 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D338 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D33C 0F 0F 14 30                   .db #$0F, #$0F, #$14, #$30
0D340 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D344                           
0D344                           
0D344                           ;; Intro: mapping logo index to chr tile
0D344                           tbl_IntroScreenLogoChr:
0D344 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D34C                           
0D34C                           
0D34C                           ;; Intro screen data
0D34C                           tbl_IntroScreenData:
0D34C                           
0D34C                               ;; Set PPU address $20A3 and draw
0D34C 60 A3                         .db #$60, #$A3
0D34E 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D356                           
0D356                               ;; Set PPU address $20C6 and draw
0D356 60 C6                         .db #$60, #$C6
0D358 01 02                         .db #_0, #_1    
0D35A                           
0D35A                               ;; Set PPU address $20B4 and draw
0D35A 60 B4                         .db #$60, #$B4
0D35C 12 13 00 1D 0D 19 1C 0F..     .db #_H, #_I, #_SPACE, #_S, #_C, #_O, #_R, #_E, #_COLON
0D365                           
0D365                               ;; Set PPU address $20D6 and draw high score
0D365 60 D6 3E                      .db #$60, #$D6, #$3E
0D368                           
0D368                               
0D368                               ;; Set PPU address $2122 and draw
0D368 61 22                         .db #$61, #$22
0D36A 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D371 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D377 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D37F 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D384                               
0D384                               ;; Set PPU address $2147 and draw
0D384 61 47                         .db #$61, #$47
0D386 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D38D 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D391 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D397 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D39D                               
0D39D                               ;; Set PPU address $218B and draw
0D39D 61 8B                         .db #$61, #$8B
0D39F 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D3A5 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D3AA                               
0D3AA                               ;; Set PPU address $21E6 and draw
0D3AA 61 E6                         .db #$61, #$E6
0D3AC 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D3B4 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D3B8 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D3BF                               
0D3BF                               ;; Set PPU address $222D and draw
0D3BF 62 2D                         .db #$62, #$2D
0D3C1 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D3C7                               
0D3C7                               ;; Set PPU address $2281
0D3C7 62 81                         .db #$62, #$81
0D3C9                               
0D3C9                               ;; Draw the Crillion logo
0D3C9 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D3CD C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D3D1 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D3D5 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D3D9                               
0D3D9 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D3DD C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D3E1 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D3E5 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D3E9                               
0D3E9 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D3ED C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D3F1 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D3F5 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D3F9                           
0D3F9 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D3FD C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D401 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D405 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D409                               
0D409 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D40D C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D411 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D415 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D419                           
0D419 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D41D C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D421 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D425 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D428                           
0D428                               ;; End of intro
0D428 3F                            .db #$3F
0D429                           
0D429                           
0D429                           ;; Animation frames table
0D429                           .include "game/include/table/animation_frames.asm"
0D429                           
0D429                           ;; CHR tile-id's per slide of explosion
0D429                           explosion_slide0:
0D429 00 00 00                      .db #$00, #$00, #$00
0D42C 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D42F 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D432                           
0D432                           explosion_slide1:
0D432 00 00 00                      .db #$00, #$00, #$00
0D435 29 2A 2B                      .db #$29, #$2A, #$2B
0D438 39 3A 3B                      .db #$39, #$3A, #$3B
0D43B                           
0D43B                           explosion_slide2:
0D43B 16 00 00                      .db #$16, #$00, #$00
0D43E 26 27 28                      .db #$26, #$27, #$28
0D441 36 37 38                      .db #$36, #$37, #$38
0D444                           
0D444                           explosion_slide3:
0D444 00 14 15                      .db #$00, #$14, #$15
0D447 23 24 25                      .db #$23, #$24, #$25
0D44A 33 34 35                      .db #$33, #$34, #$35
0D44D                           
0D44D                           explosion_slide4:
0D44D 10 11 12                      .db #$10, #$11, #$12
0D450 20 21 22                      .db #$20, #$21, #$22
0D453 30 31 32                      .db #$30, #$31, #$32
0D456                           
0D456                           ;; High and low bytes of animation slides
0D456                           explosion_anim_hi:
0D456 D4                            .db >#explosion_slide0
0D457 D4                            .db >#explosion_slide1
0D458 D4                            .db >#explosion_slide2
0D459 D4                            .db >#explosion_slide3
0D45A D4                            .db >#explosion_slide4
0D45B D4                            .db >#explosion_slide4
0D45C D4                            .db >#explosion_slide3
0D45D D4                            .db >#explosion_slide2
0D45E D4                            .db >#explosion_slide1
0D45F D4                            .db >#explosion_slide0
0D460                           
0D460                           explosion_anim_lo:
0D460 29                            .db <#explosion_slide0
0D461 32                            .db <#explosion_slide1
0D462 3B                            .db <#explosion_slide2
0D463 44                            .db <#explosion_slide3
0D464 4D                            .db <#explosion_slide4
0D465 4D                            .db <#explosion_slide4
0D466 44                            .db <#explosion_slide3
0D467 3B                            .db <#explosion_slide2
0D468 32                            .db <#explosion_slide1
0D469 29                            .db <#explosion_slide0
0D46A                           
0D46A                           
0D46A                           
0D46A                           ;; Ball palette color table (CBRYGM)
0D46A                           tbl_BallColorDark:
0D46A 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D470                            
0D470                           tbl_BallColorLight:
0D470 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D476                           
0D476                               
0D476                           ;; Screen mode drawing routine addresses
0D476                           tbl_LoadScreenHi:
0D476 D0 CC D0                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D479                           
0D479                           tbl_LoadScreenLo:
0D479 40 77 E9                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D47C                           
0D47C                           
0D47C                           ;; Level data
0D47C                           .include "game/include/table/level_data.asm"
0D47C                           
0D47C                           ;; Level layout tables
0D47C                           ;; (see ext_assets/LevelDesign.xlsx for more info)
0D47C                           
0D47C                           ifdef TESTING
0D47C                           lvl_test:
0D47C 64 41 74 07 11 11 C1 13       .db #$64, #%01000001, #$74, #%00000111, #$11, #%00010001, #$C1, #%00010011
0D484 18 1A C8 0B 13 E7 58 67       .db #$18, #%00011010, #$C8, #%00001011, #$13, #%11100111, #$58, #%01100111
0D48C FF                            .db #LEVEL_END
0D48D                           endif
0D48D                           
0D48D                           lvl_layout_01:
0D48D 61 21                         .db #$61, #%00100001
0D48F 52 61                         .db #$52, #%01100001
0D491 43 65                         .db #$43, #%01100101
0D493 83 05                         .db #$83, #%00000101
0D495 93 15                         .db #$93, #%00010101
0D497 34 7A                         .db #$34, #%01111010
0D499 74 7A                         .db #$74, #%01111010
0D49B 35 7A                         .db #$35, #%01111010
0D49D 75 7A                         .db #$75, #%01111010
0D49F 46 65                         .db #$46, #%01100101
0D4A1 86 25                         .db #$86, #%00100101
0D4A3 57 61                         .db #$57, #%01100001
0D4A5 68 21                         .db #$68, #%00100001
0D4A7 FF                            .db #LEVEL_END
0D4A8                           
0D4A8                           lvl_layout_02:
0D4A8 C0 0A                         .db #$C0, #%00001010
0D4AA 11 15                         .db #$11, #%00010101
0D4AC 21 62                         .db #$21, #%01100010
0D4AE 61 62                         .db #$61, #%01100010
0D4B0 A1 42                         .db #$A1, #%01000010
0D4B2 12 67                         .db #$12, #%01100111
0D4B4 52 67                         .db #$52, #%01100111
0D4B6 92 67                         .db #$92, #%01100111
0D4B8 C3 0D                         .db #$C3, #%00001101
0D4BA 14 11                         .db #$14, #%00010001
0D4BC 24 65                         .db #$24, #%01100101
0D4BE 64 65                         .db #$64, #%01100101
0D4C0 A4 45                         .db #$A4, #%01000101
0D4C2 15 67                         .db #$15, #%01100111
0D4C4 55 67                         .db #$55, #%01100111
0D4C6 95 67                         .db #$95, #%01100111
0D4C8 17 12                         .db #$17, #%00010010
0D4CA 27 61                         .db #$27, #%01100001
0D4CC 67 61                         .db #$67, #%01100001
0D4CE A7 41                         .db #$A7, #%01000001
0D4D0 38 7A                         .db #$38, #%01111010
0D4D2 98 5A                         .db #$98, #%01011010
0D4D4 18 27                         .db #$18, #%00100111
0D4D6 48 27                         .db #$48, #%00100111
0D4D8 78 27                         .db #$78, #%00100111
0D4DA C8 07                         .db #$C8, #%00000111
0D4DC FF                            .db #LEVEL_END
0D4DD                           
0D4DD                           lvl_layout_03:
0D4DD 00 7A                         .db #$00, #%01111010
0D4DF 40 7A                         .db #$40, #%01111010
0D4E1 80 7A                         .db #$80, #%01111010
0D4E3 C0 1A                         .db #$C0, #%00011010
0D4E5 10 A1                         .db #$10, #%10100001
0D4E7 13 E1                         .db #$13, #%11100001
0D4E9 17 C1                         .db #$17, #%11000001
0D4EB 30 C1                         .db #$30, #%11000001
0D4ED 34 C1                         .db #$34, #%11000001
0D4EF 38 A1                         .db #$38, #%10100001
0D4F1 50 E1                         .db #$50, #%11100001
0D4F3 55 81                         .db #$55, #%10000001
0D4F5 57 C1                         .db #$57, #%11000001
0D4F7 70 C1                         .db #$70, #%11000001
0D4F9 73 A1                         .db #$73, #%10100001
0D4FB 76 E1                         .db #$76, #%11100001
0D4FD 90 E1                         .db #$90, #%11100001
0D4FF 95 81                         .db #$95, #%10000001
0D501 97 C1                         .db #$97, #%11000001
0D503 B0 C1                         .db #$B0, #%11000001
0D505 B4 C1                         .db #$B4, #%11000001
0D507 B8 A1                         .db #$B8, #%10100001
0D509 D0 A1                         .db #$D0, #%10100001
0D50B D3 E1                         .db #$D3, #%11100001
0D50D D7 C1                         .db #$D7, #%11000001
0D50F FF                            .db #LEVEL_END
0D510                           
0D510                           lvl_layout_04:
0D510 00 4C                         .db #$00, #%01001100
0D512 40 6C                         .db #$40, #%01101100
0D514 80 4C                         .db #$80, #%01001100
0D516 81 AC                         .db #$81, #%10101100
0D518 C1 2C                         .db #$C1, #%00101100
0D51A 02 6C                         .db #$02, #%01101100
0D51C 42 CC                         .db #$42, #%11001100
0D51E 62 EC                         .db #$62, #%11101100
0D520 A2 CC                         .db #$A2, #%11001100
0D522 C3 CC                         .db #$C3, #%11001100
0D524 04 4C                         .db #$04, #%01001100
0D526 84 2C                         .db #$84, #%00101100
0D528 25 AC                         .db #$25, #%10101100
0D52A 85 AC                         .db #$85, #%10101100
0D52C 06 AC                         .db #$06, #%10101100
0D52E 36 CC                         .db #$36, #%11001100
0D530 56 CC                         .db #$56, #%11001100
0D532 66 EC                         .db #$66, #%11101100
0D534 96 6C                         .db #$96, #%01101100
0D536 C7 AC                         .db #$C7, #%10101100
0D538 08 2C                         .db #$08, #%00101100
0D53A 78 6C                         .db #$78, #%01101100
0D53C D8 0C                         .db #$D8, #%00001100
0D53E 30 A1                         .db #$30, #%10100001
0D540 B0 21                         .db #$B0, #%00100001
0D542 01 41                         .db #$01, #%01000001
0D544 41 61                         .db #$41, #%01100001
0D546 91 A1                         .db #$91, #%10100001
0D548 A1 21                         .db #$A1, #%00100001
0D54A 52 C1                         .db #$52, #%11000001
0D54C 72 E1                         .db #$72, #%11100001
0D54E B2 C1                         .db #$B2, #%11000001
0D550 C2 21                         .db #$C2, #%00100001
0D552 03 41                         .db #$03, #%01000001
0D554 33 C1                         .db #$33, #%11000001
0D556 83 21                         .db #$83, #%00100001
0D558 D3 E1                         .db #$D3, #%11100001
0D55A 05 21                         .db #$05, #%00100001
0D55C 45 E1                         .db #$45, #%11100001
0D55E A5 21                         .db #$A5, #%00100001
0D560 16 A1                         .db #$16, #%10100001
0D562 76 A1                         .db #$76, #%10100001
0D564 27 A1                         .db #$27, #%10100001
0D566 57 21                         .db #$57, #%00100001
0D568 87 41                         .db #$87, #%01000001
0D56A B7 A1                         .db #$B7, #%10100001
0D56C 19 21                         .db #$19, #%00100001
0D56E 39 41                         .db #$39, #%01000001
0D570 89 41                         .db #$89, #%01000001
0D572 C9 21                         .db #$C9, #%00100001
0D574 D0 1A                         .db #$D0, #%00011010
0D576 55 1A                         .db #$55, #%00011010
0D578 95 1A                         .db #$95, #%00011010
0D57A D7 1A                         .db #$D7, #%00011010
0D57C 09 1A                         .db #$09, #%00011010
0D57E 79 1A                         .db #$79, #%00011010
0D580 FF                            .db #LEVEL_END
0D581                           
0D581                           lvl_layout_05:
0D581 40 0A                         .db #$40, #%00001010
0D583 70 1A                         .db #$70, #%00011010
0D585 B0 42                         .db #$B0, #%01000010
0D587 41 A7                         .db #$41, #%10100111
0D589 B1 22                         .db #$B1, #%00100010
0D58B D1 15                         .db #$D1, #%00010101
0D58D 22 0A                         .db #$22, #%00001010
0D58F 52 05                         .db #$52, #%00000101
0D591 B2 42                         .db #$B2, #%01000010
0D593 03 27                         .db #$03, #%00100111
0D595 33 67                         .db #$33, #%01100111
0D597 73 67                         .db #$73, #%01100111
0D599 B3 47                         .db #$B3, #%01000111
0D59B 05 E5                         .db #$05, #%11100101
0D59D 25 A5                         .db #$25, #%10100101
0D59F 35 25                         .db #$35, #%00100101
0D5A1 65 45                         .db #$65, #%01000101
0D5A3 A5 45                         .db #$A5, #%01000101
0D5A5 46 E5                         .db #$46, #%11100101
0D5A7 66 E5                         .db #$66, #%11100101
0D5A9 86 E5                         .db #$86, #%11100101
0D5AB A6 E2                         .db #$A6, #%11100010
0D5AD C6 E5                         .db #$C6, #%11100101
0D5AF 27 25                         .db #$27, #%00100101
0D5B1 77 05                         .db #$77, #%00000101
0D5B3 B7 02                         .db #$B7, #%00000010
0D5B5 09 05                         .db #$09, #%00000101
0D5B7 79 05                         .db #$79, #%00000101
0D5B9 B9 02                         .db #$B9, #%00000010
0D5BB FF                            .db #LEVEL_END
0D5BC                           
0D5BC                           lvl_layout_06:
0D5BC 00 03                         .db #$00, #%00000011
0D5BE 20 03                         .db #$20, #%00000011
0D5C0 40 03                         .db #$40, #%00000011
0D5C2 A0 03                         .db #$A0, #%00000011
0D5C4 C0 03                         .db #$C0, #%00000011
0D5C6 11 03                         .db #$11, #%00000011
0D5C8 31 03                         .db #$31, #%00000011
0D5CA 51 03                         .db #$51, #%00000011
0D5CC 91 03                         .db #$91, #%00000011
0D5CE B1 03                         .db #$B1, #%00000011
0D5D0 D1 03                         .db #$D1, #%00000011
0D5D2 02 03                         .db #$02, #%00000011
0D5D4 22 03                         .db #$22, #%00000011
0D5D6 42 03                         .db #$42, #%00000011
0D5D8 A2 03                         .db #$A2, #%00000011
0D5DA C2 03                         .db #$C2, #%00000011
0D5DC 13 03                         .db #$13, #%00000011
0D5DE 33 03                         .db #$33, #%00000011
0D5E0 53 03                         .db #$53, #%00000011
0D5E2 93 03                         .db #$93, #%00000011
0D5E4 B3 03                         .db #$B3, #%00000011
0D5E6 D3 03                         .db #$D3, #%00000011
0D5E8 04 03                         .db #$04, #%00000011
0D5EA 24 03                         .db #$24, #%00000011
0D5EC 44 03                         .db #$44, #%00000011
0D5EE A4 03                         .db #$A4, #%00000011
0D5F0 C4 03                         .db #$C4, #%00000011
0D5F2 15 03                         .db #$15, #%00000011
0D5F4 35 03                         .db #$35, #%00000011
0D5F6 55 03                         .db #$55, #%00000011
0D5F8 95 03                         .db #$95, #%00000011
0D5FA B5 03                         .db #$B5, #%00000011
0D5FC D5 03                         .db #$D5, #%00000011
0D5FE 06 03                         .db #$06, #%00000011
0D600 26 03                         .db #$26, #%00000011
0D602 46 03                         .db #$46, #%00000011
0D604 A6 03                         .db #$A6, #%00000011
0D606 C6 03                         .db #$C6, #%00000011
0D608 17 03                         .db #$17, #%00000011
0D60A 37 03                         .db #$37, #%00000011
0D60C 57 03                         .db #$57, #%00000011
0D60E 97 03                         .db #$97, #%00000011
0D610 B7 03                         .db #$B7, #%00000011
0D612 D7 03                         .db #$D7, #%00000011
0D614 08 03                         .db #$08, #%00000011
0D616 28 03                         .db #$28, #%00000011
0D618 48 03                         .db #$48, #%00000011
0D61A A8 03                         .db #$A8, #%00000011
0D61C C8 03                         .db #$C8, #%00000011
0D61E 19 03                         .db #$19, #%00000011
0D620 39 03                         .db #$39, #%00000011
0D622 59 03                         .db #$59, #%00000011
0D624 99 03                         .db #$99, #%00000011
0D626 B9 03                         .db #$B9, #%00000011
0D628 D9 03                         .db #$D9, #%00000011
0D62A 60 4B                         .db #$60, #%01001011
0D62C 71 CB                         .db #$71, #%11001011
0D62E 62 4B                         .db #$62, #%01001011
0D630 64 4B                         .db #$64, #%01001011
0D632 75 CB                         .db #$75, #%11001011
0D634 66 4B                         .db #$66, #%01001011
0D636 68 4B                         .db #$68, #%01001011
0D638 79 0B                         .db #$79, #%00001011
0D63A 70 03                         .db #$70, #%00000011
0D63C 72 03                         .db #$72, #%00000011
0D63E 74 03                         .db #$74, #%00000011
0D640 76 03                         .db #$76, #%00000011
0D642 78 03                         .db #$78, #%00000011
0D644 FF                            .db #LEVEL_END
0D645                           
0D645                           lvl_layout_07:
0D645 00 11                         .db #$00, #%00010001
0D647 01 FA                         .db #$01, #%11111010
0D649 12 BA                         .db #$12, #%10111010
0D64B 23 DA                         .db #$23, #%11011010
0D64D 34 FA                         .db #$34, #%11111010
0D64F 05 DA                         .db #$05, #%11011010
0D651 15 FA                         .db #$15, #%11111010
0D653 45 BA                         .db #$45, #%10111010
0D655 56 DA                         .db #$56, #%11011010
0D657 27 BA                         .db #$27, #%10111010
0D659 67 DA                         .db #$67, #%11011010
0D65B 38 3A                         .db #$38, #%00111010
0D65D 78 BA                         .db #$78, #%10111010
0D65F 09 3A                         .db #$09, #%00111010
0D661 39 3A                         .db #$39, #%00111010
0D663 89 1A                         .db #$89, #%00011010
0D665 B0 01                         .db #$B0, #%00000001
0D667 D0 01                         .db #$D0, #%00000001
0D669 A1 01                         .db #$A1, #%00000001
0D66B C1 11                         .db #$C1, #%00010001
0D66D B2 01                         .db #$B2, #%00000001
0D66F D2 01                         .db #$D2, #%00000001
0D671 A3 01                         .db #$A3, #%00000001
0D673 C3 01                         .db #$C3, #%00000001
0D675 B4 01                         .db #$B4, #%00000001
0D677 D4 01                         .db #$D4, #%00000001
0D679 A5 01                         .db #$A5, #%00000001
0D67B C5 01                         .db #$C5, #%00000001
0D67D B6 01                         .db #$B6, #%00000001
0D67F D6 01                         .db #$D6, #%00000001
0D681 A7 01                         .db #$A7, #%00000001
0D683 C7 01                         .db #$C7, #%00000001
0D685 FF                            .db #LEVEL_END
0D686                           
0D686                           lvl_layout_08:
0D686 40 B5                         .db #$40, #%10110101
0D688 31 0D                         .db #$31, #%00001101
0D68A 61 10                         .db #$61, #%00010000
0D68C 42 C7                         .db #$42, #%11000111
0D68E 52 67                         .db #$52, #%01100111
0D690 63 C7                         .db #$63, #%11000111
0D692 83 E7                         .db #$83, #%11100111
0D694 05 07                         .db #$05, #%00000111
0D696 15 3A                         .db #$15, #%00111010
0D698 07 63                         .db #$07, #%01100011
0D69A 27 13                         .db #$27, #%00010011
0D69C 38 A5                         .db #$38, #%10100101
0D69E 09 14                         .db #$09, #%00010100
0D6A0 19 05                         .db #$19, #%00000101
0D6A2 D0 E0                         .db #$D0, #%11100000
0D6A4 C2 A0                         .db #$C2, #%10100000
0D6A6 B3 E0                         .db #$B3, #%11100000
0D6A8 D5 E0                         .db #$D5, #%11100000
0D6AA C6 E0                         .db #$C6, #%11100000
0D6AC B0 C4                         .db #$B0, #%11000100
0D6AE C0 A4                         .db #$C0, #%10100100
0D6B0 D1 A4                         .db #$D1, #%10100100
0D6B2 C4 24                         .db #$C4, #%00100100
0D6B4 C5 04                         .db #$C5, #%00000100
0D6B6 B7 44                         .db #$B7, #%01000100
0D6B8 B8 A4                         .db #$B8, #%10100100
0D6BA D9 05                         .db #$D9, #%00000101
0D6BC FF                            .db #LEVEL_END
0D6BD                           
0D6BD                           lvl_layout_09:
0D6BD 81 04                         .db #$81, #%00000100
0D6BF D1 04                         .db #$D1, #%00000100
0D6C1 32 C4                         .db #$32, #%11000100
0D6C3 A2 C4                         .db #$A2, #%11000100
0D6C5 C2 24                         .db #$C2, #%00100100
0D6C7 13 24                         .db #$13, #%00100100
0D6C9 53 04                         .db #$53, #%00000100
0D6CB C3 27                         .db #$C3, #%00100111
0D6CD 15 6C                         .db #$15, #%01101100
0D6CF 55 6C                         .db #$55, #%01101100
0D6D1 95 6C                         .db #$95, #%01101100
0D6D3 D5 0C                         .db #$D5, #%00001100
0D6D5 27 C7                         .db #$27, #%11000111
0D6D7 47 C7                         .db #$47, #%11000111
0D6D9 67 C7                         .db #$67, #%11000111
0D6DB 87 C7                         .db #$87, #%11000111
0D6DD A7 C7                         .db #$A7, #%11000111
0D6DF C7 C7                         .db #$C7, #%11000111
0D6E1 08 13                         .db #$08, #%00010011
0D6E3 28 15                         .db #$28, #%00010101
0D6E5 48 12                         .db #$48, #%00010010
0D6E7 68 15                         .db #$68, #%00010101
0D6E9 88 11                         .db #$88, #%00010001
0D6EB A8 10                         .db #$A8, #%00010000
0D6ED C8 14                         .db #$C8, #%00010100
0D6EF 09 07                         .db #$09, #%00000111
0D6F1 19 03                         .db #$19, #%00000011
0D6F3 39 05                         .db #$39, #%00000101
0D6F5 59 02                         .db #$59, #%00000010
0D6F7 79 05                         .db #$79, #%00000101
0D6F9 99 01                         .db #$99, #%00000001
0D6FB B9 00                         .db #$B9, #%00000000
0D6FD D9 04                         .db #$D9, #%00000100
0D6FF FF                            .db #LEVEL_END
0D700                           
0D700                           lvl_layout_10:
0D700 00 02                         .db #$00, #%00000010
0D702 10 C9                         .db #$10, #%11001001
0D704 50 C9                         .db #$50, #%11001001
0D706 90 C9                         .db #$90, #%11001001
0D708 D0 C9                         .db #$D0, #%11001001
0D70A 31 C9                         .db #$31, #%11001001
0D70C 71 C9                         .db #$71, #%11001001
0D70E B1 C9                         .db #$B1, #%11001001
0D710 13 C9                         .db #$13, #%11001001
0D712 53 C9                         .db #$53, #%11001001
0D714 93 C9                         .db #$93, #%11001001
0D716 D3 C9                         .db #$D3, #%11001001
0D718 34 C9                         .db #$34, #%11001001
0D71A 74 C9                         .db #$74, #%11001001
0D71C B4 C9                         .db #$B4, #%11001001
0D71E 16 C9                         .db #$16, #%11001001
0D720 56 C9                         .db #$56, #%11001001
0D722 96 C9                         .db #$96, #%11001001
0D724 D6 C9                         .db #$D6, #%11001001
0D726 37 C9                         .db #$37, #%11001001
0D728 77 C9                         .db #$77, #%11001001
0D72A B7 C9                         .db #$B7, #%11001001
0D72C D8 12                         .db #$D8, #%00010010
0D72E FF                            .db #LEVEL_END
0D72F                           
0D72F                           lvl_layout_11:
0D72F 00 65                         .db #$00, #%01100101
0D731 40 45                         .db #$40, #%01000101
0D733 50 A7                         .db #$50, #%10100111
0D735 80 05                         .db #$80, #%00000101
0D737 90 A7                         .db #$90, #%10100111
0D739 A0 65                         .db #$A0, #%01100101
0D73B 01 43                         .db #$01, #%01000011
0D73D 31 23                         .db #$31, #%00100011
0D73F 61 A7                         .db #$61, #%10100111
0D741 81 A7                         .db #$81, #%10100111
0D743 A1 63                         .db #$A1, #%01100011
0D745 02 44                         .db #$02, #%01000100
0D747 32 44                         .db #$32, #%01000100
0D749 92 04                         .db #$92, #%00000100
0D74B A2 64                         .db #$A2, #%01100100
0D74D 03 40                         .db #$03, #%01000000
0D74F 33 40                         .db #$33, #%01000000
0D751 64 81                         .db #$64, #%10000001
0D753 84 82                         .db #$84, #%10000010
0D755 93 00                         .db #$93, #%00000000
0D757 A3 60                         .db #$A3, #%01100000
0D759 04 41                         .db #$04, #%01000001
0D75B 34 41                         .db #$34, #%01000001
0D75D 94 02                         .db #$94, #%00000010
0D75F A4 62                         .db #$A4, #%01100010
0D761 05 47                         .db #$05, #%01000111
0D763 35 67                         .db #$35, #%01100111
0D765 75 0A                         .db #$75, #%00001010
0D767 85 47                         .db #$85, #%01000111
0D769 B5 47                         .db #$B5, #%01000111
0D76B 06 E7                         .db #$06, #%11100111
0D76D 16 5A                         .db #$16, #%01011010
0D76F 26 11                         .db #$26, #%00010001
0D771 46 13                         .db #$46, #%00010011
0D773 56 1A                         .db #$56, #%00011010
0D775 66 14                         .db #$66, #%00010100
0D777 86 10                         .db #$86, #%00010000
0D779 96 5A                         .db #$96, #%01011010
0D77B A6 12                         .db #$A6, #%00010010
0D77D C6 15                         .db #$C6, #%00010101
0D77F D6 E7                         .db #$D6, #%11100111
0D781 FF                            .db #LEVEL_END
0D782                           
0D782                           lvl_layout_12:
0D782 00 00                         .db #$00, #%00000000
0D784 50 C0                         .db #$50, #%11000000
0D786 80 00                         .db #$80, #%00000000
0D788 61 00                         .db #$61, #%00000000
0D78A 22 C0                         .db #$22, #%11000000
0D78C 82 E0                         .db #$82, #%11100000
0D78E C2 E0                         .db #$C2, #%11100000
0D790 A3 20                         .db #$A3, #%00100000
0D792 C3 10                         .db #$C3, #%00010000
0D794 04 00                         .db #$04, #%00000000
0D796 54 20                         .db #$54, #%00100000
0D798 15 0A                         .db #$15, #%00001010
0D79A 25 C0                         .db #$25, #%11000000
0D79C 55 E0                         .db #$55, #%11100000
0D79E 86 20                         .db #$86, #%00100000
0D7A0 C6 E0                         .db #$C6, #%11100000
0D7A2 C7 A0                         .db #$C7, #%10100000
0D7A4 88 00                         .db #$88, #%00000000
0D7A6 59 00                         .db #$59, #%00000000
0D7A8 89 20                         .db #$89, #%00100000
0D7AA D9 1A                         .db #$D9, #%00011010
0D7AC FF                            .db #LEVEL_END
0D7AD                           
0D7AD                           lvl_layout_13:
0D7AD 10 E0                         .db #$10, #%11100000
0D7AF 20 E0                         .db #$20, #%11100000
0D7B1 30 E0                         .db #$30, #%11100000
0D7B3 40 40                         .db #$40, #%01000000
0D7B5 80 60                         .db #$80, #%01100000
0D7B7 C0 E0                         .db #$C0, #%11100000
0D7B9 D0 E0                         .db #$D0, #%11100000
0D7BB 41 40                         .db #$41, #%01000000
0D7BD 71 60                         .db #$71, #%01100000
0D7BF 52 60                         .db #$52, #%01100000
0D7C1 A2 20                         .db #$A2, #%00100000
0D7C3 43 60                         .db #$43, #%01100000
0D7C5 83 60                         .db #$83, #%01100000
0D7C7 14 74                         .db #$14, #%01110100
0D7C9 54 74                         .db #$54, #%01110100
0D7CB 94 74                         .db #$94, #%01110100
0D7CD D4 14                         .db #$D4, #%00010100
0D7CF 15 0D                         .db #$15, #%00001101
0D7D1 55 0D                         .db #$55, #%00001101
0D7D3 95 0D                         .db #$95, #%00001101
0D7D5 D5 0D                         .db #$D5, #%00001101
0D7D7 26 0D                         .db #$26, #%00001101
0D7D9 46 0D                         .db #$46, #%00001101
0D7DB 66 0D                         .db #$66, #%00001101
0D7DD 86 0D                         .db #$86, #%00001101
0D7DF A6 0D                         .db #$A6, #%00001101
0D7E1 C6 0D                         .db #$C6, #%00001101
0D7E3 07 10                         .db #$07, #%00010000
0D7E5 37 0D                         .db #$37, #%00001101
0D7E7 77 0D                         .db #$77, #%00001101
0D7E9 B7 0D                         .db #$B7, #%00001101
0D7EB 28 0D                         .db #$28, #%00001101
0D7ED 48 0D                         .db #$48, #%00001101
0D7EF 68 0D                         .db #$68, #%00001101
0D7F1 88 0D                         .db #$88, #%00001101
0D7F3 A8 0D                         .db #$A8, #%00001101
0D7F5 C8 0D                         .db #$C8, #%00001101
0D7F7 19 0D                         .db #$19, #%00001101
0D7F9 59 0D                         .db #$59, #%00001101
0D7FB 99 0D                         .db #$99, #%00001101
0D7FD D9 0D                         .db #$D9, #%00001101
0D7FF FF                            .db #LEVEL_END
0D800                           
0D800                           lvl_layout_14:
0D800 00 67                         .db #$00, #%01100111
0D802 40 67                         .db #$40, #%01100111
0D804 80 67                         .db #$80, #%01100111
0D806 C0 27                         .db #$C0, #%00100111
0D808 01 27                         .db #$01, #%00100111
0D80A 31 C7                         .db #$31, #%11000111
0D80C 51 C7                         .db #$51, #%11000111
0D80E 71 C7                         .db #$71, #%11000111
0D810 91 C7                         .db #$91, #%11000111
0D812 B1 C7                         .db #$B1, #%11000111
0D814 D1 07                         .db #$D1, #%00000111
0D816 02 E7                         .db #$02, #%11100111
0D818 06 E7                         .db #$06, #%11100111
0D81A 13 07                         .db #$13, #%00000111
0D81C D3 07                         .db #$D3, #%00000111
0D81E 15 07                         .db #$15, #%00000111
0D820 35 07                         .db #$35, #%00000111
0D822 55 07                         .db #$55, #%00000111
0D824 75 07                         .db #$75, #%00000111
0D826 95 07                         .db #$95, #%00000111
0D828 B5 07                         .db #$B5, #%00000111
0D82A D5 07                         .db #$D5, #%00000111
0D82C 17 07                         .db #$17, #%00000111
0D82E 37 C7                         .db #$37, #%11000111
0D830 57 C7                         .db #$57, #%11000111
0D832 77 C7                         .db #$77, #%11000111
0D834 97 C7                         .db #$97, #%11000111
0D836 B7 C7                         .db #$B7, #%11000111
0D838 D7 07                         .db #$D7, #%00000111
0D83A 19 07                         .db #$19, #%00000111
0D83C D9 07                         .db #$D9, #%00000111
0D83E 22 4C                         .db #$22, #%01001100
0D840 62 4C                         .db #$62, #%01001100
0D842 A2 4C                         .db #$A2, #%01001100
0D844 24 0C                         .db #$24, #%00001100
0D846 44 0C                         .db #$44, #%00001100
0D848 64 0C                         .db #$64, #%00001100
0D84A 84 0C                         .db #$84, #%00001100
0D84C A4 0C                         .db #$A4, #%00001100
0D84E C4 0C                         .db #$C4, #%00001100
0D850 26 0C                         .db #$26, #%00001100
0D852 46 0C                         .db #$46, #%00001100
0D854 66 0C                         .db #$66, #%00001100
0D856 86 0C                         .db #$86, #%00001100
0D858 A6 0C                         .db #$A6, #%00001100
0D85A C6 0C                         .db #$C6, #%00001100
0D85C 28 4C                         .db #$28, #%01001100
0D85E 68 4C                         .db #$68, #%01001100
0D860 A8 4C                         .db #$A8, #%01001100
0D862 32 04                         .db #$32, #%00000100
0D864 52 04                         .db #$52, #%00000100
0D866 72 04                         .db #$72, #%00000100
0D868 92 04                         .db #$92, #%00000100
0D86A B2 04                         .db #$B2, #%00000100
0D86C 38 04                         .db #$38, #%00000100
0D86E 58 04                         .db #$58, #%00000100
0D870 78 04                         .db #$78, #%00000100
0D872 98 04                         .db #$98, #%00000100
0D874 B8 04                         .db #$B8, #%00000100
0D876 FF                            .db #LEVEL_END
0D877                           
0D877                           lvl_layout_15:
0D877 00 7A                         .db #$00, #%01111010
0D879 40 7A                         .db #$40, #%01111010
0D87B 80 7A                         .db #$80, #%01111010
0D87D C0 3A                         .db #$C0, #%00111010
0D87F 61 64                         .db #$61, #%01100100
0D881 05 E4                         .db #$05, #%11100100
0D883 15 64                         .db #$15, #%01100100
0D885 55 64                         .db #$55, #%01100100
0D887 95 64                         .db #$95, #%01100100
0D889 D5 E4                         .db #$D5, #%11100100
0D88B 26 04                         .db #$26, #%00000100
0D88D 46 44                         .db #$46, #%01000100
0D88F 76 64                         .db #$76, #%01100100
0D891 C6 04                         .db #$C6, #%00000100
0D893 17 04                         .db #$17, #%00000100
0D895 37 64                         .db #$37, #%01100100
0D897 77 44                         .db #$77, #%01000100
0D899 B7 04                         .db #$B7, #%00000100
0D89B 18 64                         .db #$18, #%01100100
0D89D 58 64                         .db #$58, #%01100100
0D89F 98 64                         .db #$98, #%01100100
0D8A1 FF                            .db #LEVEL_END
0D8A2                           
0D8A2                           lvl_layout_16:
0D8A2 10 E1                         .db #$10, #%11100001
0D8A4 20 9A                         .db #$20, #%10011010
0D8A6 30 E1                         .db #$30, #%11100001
0D8A8 40 E1                         .db #$40, #%11100001
0D8AA 50 E1                         .db #$50, #%11100001
0D8AC 60 C1                         .db #$60, #%11000001
0D8AE 70 E1                         .db #$70, #%11100001
0D8B0 80 E1                         .db #$80, #%11100001
0D8B2 90 E1                         .db #$90, #%11100001
0D8B4 A0 61                         .db #$A0, #%01100001
0D8B6 21 C1                         .db #$21, #%11000001
0D8B8 A1 1A                         .db #$A1, #%00011010
0D8BA B1 41                         .db #$B1, #%01000001
0D8BC A2 E1                         .db #$A2, #%11100001
0D8BE B2 E1                         .db #$B2, #%11100001
0D8C0 C2 1A                         .db #$C2, #%00011010
0D8C2 D2 E1                         .db #$D2, #%11100001
0D8C4 63 1A                         .db #$63, #%00011010
0D8C6 C3 C1                         .db #$C3, #%11000001
0D8C8 14 61                         .db #$14, #%01100001
0D8CA 54 61                         .db #$54, #%01100001
0D8CC 94 C1                         .db #$94, #%11000001
0D8CE 15 61                         .db #$15, #%01100001
0D8D0 55 41                         .db #$55, #%01000001
0D8D2 85 1A                         .db #$85, #%00011010
0D8D4 16 41                         .db #$16, #%01000001
0D8D6 46 1A                         .db #$46, #%00011010
0D8D8 56 61                         .db #$56, #%01100001
0D8DA A6 61                         .db #$A6, #%01100001
0D8DC 17 67                         .db #$17, #%01100111
0D8DE 57 67                         .db #$57, #%01100111
0D8E0 97 67                         .db #$97, #%01100111
0D8E2 D7 07                         .db #$D7, #%00000111
0D8E4 28 41                         .db #$28, #%01000001
0D8E6 58 61                         .db #$58, #%01100001
0D8E8 A8 41                         .db #$A8, #%01000001
0D8EA 18 11                         .db #$18, #%00010001
0D8EC 38 11                         .db #$38, #%00010001
0D8EE 98 11                         .db #$98, #%00010001
0D8F0 B8 11                         .db #$B8, #%00010001
0D8F2 D8 11                         .db #$D8, #%00010001
0D8F4 59 09                         .db #$59, #%00001001
0D8F6 FF                            .db #LEVEL_END
0D8F7                           
0D8F7                           lvl_layout_17:
0D8F7 10 EA                         .db #$10, #%11101010
0D8F9 20 E2                         .db #$20, #%11100010
0D8FB 30 62                         .db #$30, #%01100010
0D8FD 70 02                         .db #$70, #%00000010
0D8FF 80 6A                         .db #$80, #%01101010
0D901 90 22                         .db #$90, #%00100010
0D903 01 AA                         .db #$01, #%10101010
0D905 31 6A                         .db #$31, #%01101010
0D907 81 2A                         .db #$81, #%00101010
0D909 A1 02                         .db #$A1, #%00000010
0D90B C1 02                         .db #$C1, #%00000010
0D90D D1 0A                         .db #$D1, #%00001010
0D90F 32 EA                         .db #$32, #%11101010
0D911 42 6A                         .db #$42, #%01101010
0D913 62 02                         .db #$62, #%00000010
0D915 92 6A                         .db #$92, #%01101010
0D917 D2 E2                         .db #$D2, #%11100010
0D919 43 1A                         .db #$43, #%00011010
0D91B 53 CA                         .db #$53, #%11001010
0D91D 73 02                         .db #$73, #%00000010
0D91F 83 4A                         .db #$83, #%01001010
0D921 B3 CA                         .db #$B3, #%11001010
0D923 C3 EA                         .db #$C3, #%11101010
0D925 04 0A                         .db #$04, #%00001010
0D927 14 A2                         .db #$14, #%10100010
0D929 24 AA                         .db #$24, #%10101010
0D92B 44 AA                         .db #$44, #%10101010
0D92D 64 6A                         .db #$64, #%01101010
0D92F 65 6A                         .db #$65, #%01101010
0D931 A5 AA                         .db #$A5, #%10101010
0D933 06 EA                         .db #$06, #%11101010
0D935 16 62                         .db #$16, #%01100010
0D937 56 42                         .db #$56, #%01000010
0D939 86 2A                         .db #$86, #%00101010
0D93B 17 42                         .db #$17, #%01000010
0D93D 47 12                         .db #$47, #%00010010
0D93F 57 6A                         .db #$57, #%01101010
0D941 97 4A                         .db #$97, #%01001010
0D943 A7 02                         .db #$A7, #%00000010
0D945 18 02                         .db #$18, #%00000010
0D947 28 0A                         .db #$28, #%00001010
0D949 38 22                         .db #$38, #%00100010
0D94B 68 2A                         .db #$68, #%00101010
0D94D 88 62                         .db #$88, #%01100010
0D94F C8 0A                         .db #$C8, #%00001010
0D951 D8 02                         .db #$D8, #%00000010
0D953 19 2A                         .db #$19, #%00101010
0D955 39 2A                         .db #$39, #%00101010
0D957 69 42                         .db #$69, #%01000010
0D959 99 2A                         .db #$99, #%00101010
0D95B B9 42                         .db #$B9, #%01000010
0D95D FF                            .db #LEVEL_END
0D95E                           
0D95E                           lvl_layout_18:
0D95E 00 12                         .db #$00, #%00010010
0D960 40 1A                         .db #$40, #%00011010
0D962 50 11                         .db #$50, #%00010001
0D964 70 1A                         .db #$70, #%00011010
0D966 80 10                         .db #$80, #%00010000
0D968 D0 13                         .db #$D0, #%00010011
0D96A 01 1A                         .db #$01, #%00011010
0D96C 22 15                         .db #$22, #%00010101
0D96E A2 1A                         .db #$A2, #%00011010
0D970 B2 14                         .db #$B2, #%00010100
0D972 03 67                         .db #$03, #%01100111
0D974 43 67                         .db #$43, #%01100111
0D976 83 67                         .db #$83, #%01100111
0D978 24 09                         .db #$24, #%00001001
0D97A 74 0D                         .db #$74, #%00001101
0D97C C4 0A                         .db #$C4, #%00001010
0D97E 05 A7                         .db #$05, #%10100111
0D980 45 27                         .db #$45, #%00100111
0D982 95 27                         .db #$95, #%00100111
0D984 16 C7                         .db #$16, #%11000111
0D986 36 67                         .db #$36, #%01100111
0D988 86 67                         .db #$86, #%01100111
0D98A D6 07                         .db #$D6, #%00000111
0D98C 07 A3                         .db #$07, #%10100011
0D98E 27 23                         .db #$27, #%00100011
0D990 47 C7                         .db #$47, #%11000111
0D992 57 A0                         .db #$57, #%10100000
0D994 67 A7                         .db #$67, #%10100111
0D996 77 20                         .db #$77, #%00100000
0D998 97 C7                         .db #$97, #%11000111
0D99A A7 A4                         .db #$A7, #%10100100
0D99C B7 A7                         .db #$B7, #%10100111
0D99E C7 24                         .db #$C7, #%00100100
0D9A0 28 0B                         .db #$28, #%00001011
0D9A2 38 A3                         .db #$38, #%10100011
0D9A4 78 08                         .db #$78, #%00001000
0D9A6 88 A0                         .db #$88, #%10100000
0D9A8 C8 0C                         .db #$C8, #%00001100
0D9AA D8 A4                         .db #$D8, #%10100100
0D9AC 09 43                         .db #$09, #%01000011
0D9AE 59 40                         .db #$59, #%01000000
0D9B0 A9 44                         .db #$A9, #%01000100
0D9B2 FF                            .db #LEVEL_END
0D9B3                           
0D9B3                           lvl_layout_19:
0D9B3 11 A8                         .db #$11, #%10101000
0D9B5 21 68                         .db #$21, #%01101000
0D9B7 81 28                         .db #$81, #%00101000
0D9B9 B1 48                         .db #$B1, #%01001000
0D9BB 22 48                         .db #$22, #%01001000
0D9BD 62 68                         .db #$62, #%01101000
0D9BF B2 28                         .db #$B2, #%00101000
0D9C1 23 28                         .db #$23, #%00101000
0D9C3 83 28                         .db #$83, #%00101000
0D9C5 B3 28                         .db #$B3, #%00101000
0D9C7 04 E8                         .db #$04, #%11101000
0D9C9 24 08                         .db #$24, #%00001000
0D9CB 44 08                         .db #$44, #%00001000
0D9CD 64 E8                         .db #$64, #%11101000
0D9CF 84 E8                         .db #$84, #%11101000
0D9D1 C4 A8                         .db #$C4, #%10101000
0D9D3 D4 E8                         .db #$D4, #%11101000
0D9D5 15 48                         .db #$15, #%01001000
0D9D7 55 C8                         .db #$55, #%11001000
0D9D9 75 C8                         .db #$75, #%11001000
0D9DB A5 08                         .db #$A5, #%00001000
0D9DD 36 08                         .db #$36, #%00001000
0D9DF B6 08                         .db #$B6, #%00001000
0D9E1 27 48                         .db #$27, #%01001000
0D9E3 97 28                         .db #$97, #%00101000
0D9E5 C7 08                         .db #$C7, #%00001000
0D9E7 09 61                         .db #$09, #%01100001
0D9E9 19 11                         .db #$19, #%00010001
0D9EB 49 61                         .db #$49, #%01100001
0D9ED 89 31                         .db #$89, #%00110001
0D9EF A9 61                         .db #$A9, #%01100001
0D9F1 FF                            .db #LEVEL_END
0D9F2                           
0D9F2                           lvl_layout_20:
0D9F2 00 60                         .db #$00, #%01100000
0D9F4 10 1A                         .db #$10, #%00011010
0D9F6 40 A7                         .db #$40, #%10100111
0D9F8 50 20                         .db #$50, #%00100000
0D9FA 70 1A                         .db #$70, #%00011010
0D9FC 80 40                         .db #$80, #%01000000
0D9FE B0 1A                         .db #$B0, #%00011010
0DA00 C0 20                         .db #$C0, #%00100000
0DA02 01 40                         .db #$01, #%01000000
0DA04 31 1A                         .db #$31, #%00011010
0DA06 A1 40                         .db #$A1, #%01000000
0DA08 D1 1A                         .db #$D1, #%00011010
0DA0A 43 67                         .db #$43, #%01100111
0DA0C 83 47                         .db #$83, #%01000111
0DA0E 44 A7                         .db #$44, #%10100111
0DA10 54 25                         .db #$54, #%00100101
0DA12 94 08                         .db #$94, #%00001000
0DA14 A4 A7                         .db #$A4, #%10100111
0DA16 55 05                         .db #$55, #%00000101
0DA18 65 08                         .db #$65, #%00001000
0DA1A 06 27                         .db #$06, #%00100111
0DA1C 36 67                         .db #$36, #%01100111
0DA1E 76 28                         .db #$76, #%00101000
0DA20 A6 27                         .db #$A6, #%00100111
0DA22 D6 07                         .db #$D6, #%00000111
0DA24 A7 A7                         .db #$A7, #%10100111
0DA26 08 60                         .db #$08, #%01100000
0DA28 09 60                         .db #$09, #%01100000
0DA2A 18 A7                         .db #$18, #%10100111
0DA2C 48 A7                         .db #$48, #%10100111
0DA2E 58 47                         .db #$58, #%01000111
0DA30 88 27                         .db #$88, #%00100111
0DA32 B8 20                         .db #$B8, #%00100000
0DA34 D8 1A                         .db #$D8, #%00011010
0DA36 59 15                         .db #$59, #%00010101
0DA38 69 60                         .db #$69, #%01100000
0DA3A A9 60                         .db #$A9, #%01100000
0DA3C FF                            .db #LEVEL_END
0DA3D                           
0DA3D                           lvl_layout_21:
0DA3D 00 13                         .db #$00, #%00010011
0DA3F 10 11                         .db #$10, #%00010001
0DA41 20 67                         .db #$20, #%01100111
0DA43 60 67                         .db #$60, #%01100111
0DA45 A0 47                         .db #$A0, #%01000111
0DA47 D0 15                         .db #$D0, #%00010101
0DA49 32 63                         .db #$32, #%01100011
0DA4B 72 05                         .db #$72, #%00000101
0DA4D 82 43                         .db #$82, #%01000011
0DA4F B2 43                         .db #$B2, #%01000011
0DA51 33 03                         .db #$33, #%00000011
0DA53 43 2A                         .db #$43, #%00101010
0DA55 63 7A                         .db #$63, #%01111010
0DA57 73 2A                         .db #$73, #%00101010
0DA59 A3 7A                         .db #$A3, #%01111010
0DA5B 34 63                         .db #$34, #%01100011
0DA5D 74 63                         .db #$74, #%01100011
0DA5F B4 43                         .db #$B4, #%01000011
0DA61 06 63                         .db #$06, #%01100011
0DA63 46 63                         .db #$46, #%01100011
0DA65 86 63                         .db #$86, #%01100011
0DA67 C6 C3                         .db #$C6, #%11000011
0DA69 07 7A                         .db #$07, #%01111010
0DA6B 47 7A                         .db #$47, #%01111010
0DA6D 67 0A                         .db #$67, #%00001010
0DA6F 87 7A                         .db #$87, #%01111010
0DA71 08 13                         .db #$08, #%00010011
0DA73 18 43                         .db #$18, #%01000011
0DA75 48 63                         .db #$48, #%01100011
0DA77 88 63                         .db #$88, #%01100011
0DA79 FF                            .db #LEVEL_END
0DA7A                           
0DA7A                           lvl_layout_22:
0DA7A 00 7A                         .db #$00, #%01111010
0DA7C 40 7A                         .db #$40, #%01111010
0DA7E 80 7A                         .db #$80, #%01111010
0DA80 C0 3A                         .db #$C0, #%00111010
0DA82 13 67                         .db #$13, #%01100111
0DA84 83 A7                         .db #$83, #%10100111
0DA86 B3 07                         .db #$B3, #%00000111
0DA88 14 07                         .db #$14, #%00000111
0DA8A 44 07                         .db #$44, #%00000111
0DA8C A4 07                         .db #$A4, #%00000111
0DA8E 15 A5                         .db #$15, #%10100101
0DA90 45 A5                         .db #$45, #%10100101
0DA92 85 25                         .db #$85, #%00100101
0DA94 86 05                         .db #$86, #%00000101
0DA96 A6 05                         .db #$A6, #%00000101
0DA98 17 11                         .db #$17, #%00010001
0DA9A 47 A1                         .db #$47, #%10100001
0DA9C 87 A1                         .db #$87, #%10100001
0DA9E B7 A1                         .db #$B7, #%10100001
0DAA0 18 41                         .db #$18, #%01000001
0DAA2 68 01                         .db #$68, #%00000001
0DAA4 D8 01                         .db #$D8, #%00000001
0DAA6 FF                            .db #LEVEL_END
0DAA7                           
0DAA7                           lvl_layout_23:
0DAA7 00 71                         .db #$00, #%01110001
0DAA9 40 11                         .db #$40, #%00010001
0DAAB 50 43                         .db #$50, #%01000011
0DAAD 80 D1                         .db #$80, #%11010001
0DAAF 90 E3                         .db #$90, #%11100011
0DAB1 A0 63                         .db #$A0, #%01100011
0DAB3 01 63                         .db #$01, #%01100011
0DAB5 41 63                         .db #$41, #%01100011
0DAB7 A1 63                         .db #$A1, #%01100011
0DAB9 02 63                         .db #$02, #%01100011
0DABB 42 63                         .db #$42, #%01100011
0DABD 62 11                         .db #$62, #%00010001
0DABF A2 67                         .db #$A2, #%01100111
0DAC1 04 63                         .db #$04, #%01100011
0DAC3 44 23                         .db #$44, #%00100011
0DAC5 64 D1                         .db #$64, #%11010001
0DAC7 74 E3                         .db #$74, #%11100011
0DAC9 84 F1                         .db #$84, #%11110001
0DACB 94 E3                         .db #$94, #%11100011
0DACD A4 C7                         .db #$A4, #%11000111
0DACF B4 23                         .db #$B4, #%00100011
0DAD1 05 63                         .db #$05, #%01100011
0DAD3 45 23                         .db #$45, #%00100011
0DAD5 06 71                         .db #$06, #%01110001
0DAD7 46 11                         .db #$46, #%00010001
0DAD9 56 E3                         .db #$56, #%11100011
0DADB D6 07                         .db #$D6, #%00000111
0DADD 17 D1                         .db #$17, #%11010001
0DADF 27 43                         .db #$27, #%01000011
0DAE1 67 D1                         .db #$67, #%11010001
0DAE3 A7 C7                         .db #$A7, #%11000111
0DAE5 C7 A7                         .db #$C7, #%10100111
0DAE7 D7 B3                         .db #$D7, #%10110011
0DAE9 28 43                         .db #$28, #%01000011
0DAEB 78 43                         .db #$78, #%01000011
0DAED 29 43                         .db #$29, #%01000011
0DAEF 79 43                         .db #$79, #%01000011
0DAF1 FF                           .db #LEVEL_END
0DAF2                           
0DAF2                           lvl_layout_24:
0DAF2 02 67                         .db #$02, #%01100111
0DAF4 42 67                         .db #$42, #%01100111
0DAF6 82 67                         .db #$82, #%01100111
0DAF8 05 67                         .db #$05, #%01100111
0DAFA 45 67                         .db #$45, #%01100111
0DAFC 85 67                         .db #$85, #%01100111
0DAFE 08 67                         .db #$08, #%01100111
0DB00 48 67                         .db #$48, #%01100111
0DB02 88 67                         .db #$88, #%01100111
0DB04 30 E7                         .db #$30, #%11100111
0DB06 70 E7                         .db #$70, #%11100111
0DB08 B0 E7                         .db #$B0, #%11100111
0DB0A 34 E7                         .db #$34, #%11100111
0DB0C 74 E7                         .db #$74, #%11100111
0DB0E B4 E7                         .db #$B4, #%11100111
0DB10 20 13                         .db #$20, #%00010011
0DB12 40 10                         .db #$40, #%00010000
0DB14 80 02                         .db #$80, #%00000010
0DB16 41 05                         .db #$41, #%00000101
0DB18 B1 09                         .db #$B1, #%00001001
0DB1A 02 09                         .db #$02, #%00001001
0DB1C 52 0C                         .db #$52, #%00001100
0DB1E 13 11                         .db #$13, #%00010001
0DB20 33 04                         .db #$33, #%00000100
0DB22 74 0C                         .db #$74, #%00001100
0DB24 B4 08                         .db #$B4, #%00001000
0DB26 15 09                         .db #$15, #%00001001
0DB28 55 0C                         .db #$55, #%00001100
0DB2A 95 0C                         .db #$95, #%00001100
0DB2C 47 03                         .db #$47, #%00000011
0DB2E A7 12                         .db #$A7, #%00010010
0DB30 18 15                         .db #$18, #%00010101
0DB32 09 05                         .db #$09, #%00000101
0DB34 19 03                         .db #$19, #%00000011
0DB36 FF                            .db #LEVEL_END
0DB37                           
0DB37                           lvl_layout_25:
0DB37 00 12                         .db #$00, #%00010010
0DB39 10 63                         .db #$10, #%01100011
0DB3B 60 63                         .db #$60, #%01100011
0DB3D A0 07                         .db #$A0, #%00000111
0DB3F 01 11                         .db #$01, #%00010001
0DB41 A1 02                         .db #$A1, #%00000010
0DB43 02 67                         .db #$02, #%01100111
0DB45 42 07                         .db #$42, #%00000111
0DB47 62 67                         .db #$62, #%01100111
0DB49 A2 C7                         .db #$A2, #%11000111
0DB4B 03 61                         .db #$03, #%01100001
0DB4D 43 01                         .db #$43, #%00000001
0DB4F 63 61                         .db #$63, #%01100001
0DB51 A6 E7                         .db #$A6, #%11100111
0DB53 B6 47                         .db #$B6, #%01000111
0DB55 C6 01                         .db #$C6, #%00000001
0DB57 B7 42                         .db #$B7, #%01000010
0DB59 B8 42                         .db #$B8, #%01000010
0DB5B C8 0A                         .db #$C8, #%00001010
0DB5D 09 7A                         .db #$09, #%01111010
0DB5F 49 7A                         .db #$49, #%01111010
0DB61 89 3A                         .db #$89, #%00111010
0DB63 B9 42                         .db #$B9, #%01000010
0DB65 FF                            .db #LEVEL_END
0DB66                           
0DB66                           ;; Level layout address pointers
0DB66                           tbl_lvl_layout_hi:
0DB66                           ifdef TESTING
0DB66 D4                            .db >#lvl_test
0DB67                           endif
0DB67 D4 D4 D4 D5 D5                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0DB6C D5 D6 D6 D6 D7                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0DB71 D7 D7 D7 D8 D8                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0DB76 D8 D8 D9 D9 D9                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0DB7B DA DA DA DA DB                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0DB80                           
0DB80                           tbl_lvl_layout_lo:
0DB80                           ifdef TESTING
0DB80 7C                            .db <#lvl_test
0DB81                           endif
0DB81 8D A8 DD 10 81                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0DB86 BC 45 86 BD 00                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0DB8B 2F 82 AD 00 77                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0DB90 A2 F7 5E B3 F2                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0DB95 3D 7A A7 F2 37                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0DB9A                           
0DB9A                           ;; Ball start position (#$YX)
0DB9A                           tbl_lvl_ball_startpos:
0DB9A                           ifdef TESTING
0DB9A 29                            .db #$29
0DB9B                           endif
0DB9B 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0DBA0 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0DBA5 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0DBAA 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0DBAF 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0DBB4                           
0DBB4                               
0DBB4                           ;; Ball start direction, color and tile score
0DBB4                           ;; #% ccc v tttt
0DBB4                           ;;    ||| | ++++-- tile score
0DBB4                           ;;    ||| +------- vertical direction, up (0) or down
0DBB4                           ;;    +++--------- color (CBRYGM)
0DBB4                           tbl_lvl_ball_init:
0DBB4                           ifdef TESTING
0DBB4 20                            .db #%00100000
0DBB5                           endif
0DBB5 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0DBBA 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0DBBF 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0DBC4 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0DBC9 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0DBCE                           
0DBCE                           
0DBCE                           
0DBCE                           ;; Helper table to multiply values by 16
0DBCE                           tbl_Times16:
0DBCE 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0DBD6 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0DBDE                               
0DBDE                           
0DBDE                           ;; Helper table to multiply values by 64
0DBDE                           tbl_Times64:
0DBDE 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0DBE2                           
0DBE2                           
0DBE2                           ;; Metatile ID to CHR data mapper
0DBE2                           tbl_GametileTopLeft:
0DBE2 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0DBEC                           
0DBEC                           tbl_GametileTopRight:
0DBEC 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0DBF6                           
0DBF6                           tbl_GametileBottomLeft:
0DBF6 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0DC00                           
0DC00                           tbl_GametileBottomRight:
0DC00 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0DC0A                           
0DC0A                           ;; Metatile ID to RAM byte data mapper
0DC0A                           tbl_GameTileRamByte:
0DC0A 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0DC0F                           
0DC0F                           ;; HUD text data (with opaque background tile for sprite zero)
0DC0F                           tbl_HudText:
0DC0F 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0DC17 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0DC1E 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0DC26 0C 19 18 1F 1D 00 3F          .db #_B, #_O, #_N, #_U, #_S, #_SPACE, #$3F
0DC2D                           
0DC2D                           ;; Move block top left tile based on color
0DC2D                           tbl_MoveBlockTopLeftTile:
0DC2D 42 4A 42 4A 42 4A 42          .db #$42, #$4A, #$42, #$4A, #$42, #$4A, #$42
0DC34                           
0DC34                           ;; Game over data
0DC34                           tbl_GameOver:
0DC34 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0DC38 00 00                         .db #_SPACE, #_SPACE
0DC3A 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0DC3E                           
0DC3E                           ;; Background fade pallette table
0DC3E                           tbl_BackgroundFade:
0DC3E 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F
0DC48                           
0DC48                           ;; Sound effects
0DC48                           .include "game/include/table/sfx.asm"
0DC48                           ;;
0DC48                           ;; Explosion sound effects
0DC48                           ;;
0DC48                           ;;   #% ffff vvvv
0DC48                           ;;      |||| ++++---- volume (0=low, 15=high)
0DC48                           ;;      ++++-------- frequency (0=low, 15=high)
0DC48                           ;;
0DC48                           ;; #$FF = end of sfx
0DC48                           ;;
0DC48                           
0DC48                           tbl_ExplosionSfx:
0DC48 00                            .db #$00 ; buffer byte
0DC49 04 18 3C 2F 3F 2F 1F 1F       .db #$04, #$18, #$3C, #$2F, #$3F, #$2F, #$1F, #$1F
0DC51 0F 1F 1F 0F 0F 0F 1F 1F       .db #$0F, #$1F, #$1F, #$0F, #$0F, #$0F, #$1F, #$1F
0DC59 2F 1F 1F 2F 2F 1F 1F 0F       .db #$2F, #$1F, #$1F, #$2F, #$2F, #$1F, #$1F, #$0F
0DC61 0F 1F 0F 1F 1F 2F 0F 1E       .db #$0F, #$1F, #$0F, #$1F, #$1F, #$2F, #$0F, #$1E
0DC69 1D 0C 0B 0A 19 18 27 06       .db #$1D, #$0C, #$0B, #$0A, #$19, #$18, #$27, #$06
0DC71 15 14 03 02 01                .db #$15, #$14, #$03, #$02, #$01
0DC76                           
0DC76                           tbl_ThudSfx:
0DC76 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DC77 6D 2F 9F CF DF EF ED DB       .db #$6D, #$2F, #$9F, #$CF, #$DF, #$EF, #$ED, #$DB
0DC7F E8 C6 D4 E2 12                .db #$E8, #$C6, #$D4, #$E2, #$12
0DC84                           
0DC84                           tbl_BounceSfx:
0DC84 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DC85 5F 46 42 12                   .db #$5F, #$46, #$42, #$12
0DC89                           
0DC89 00                            .db #$00
0DC8A                           
0DC8A                           tbl_Sfx_hi:
0DC8A DC DC DC                      .db >#tbl_ExplosionSfx, >#tbl_ThudSfx, >#tbl_BounceSfx
0DC8D                           
0DC8D                           tbl_Sfx_lo:
0DC8D 48 76 84                      .db <#tbl_ExplosionSfx, <#tbl_ThudSfx, <#tbl_BounceSfx
0DC90                           
0DC90                           
0DC90                           ;; Volume envelope for move sound effect (reversed)
0DC90                           tbl_MoveSfxVolume:
0DC90 70 70 72 73 7B 7C 7B 7B       .db #$70, #$70, #$72, #$73, #$7B, #$7C, #$7B, #$7B
0DC98 79 79 78 77 76 76 75 75       .db #$79, #$79, #$78, #$77, #$76, #$76, #$75, #$75
0DCA0 74 74 73 73 73 73 72 71       .db #$74, #$74, #$73, #$73, #$73, #$73, #$72, #$71
0DCA8                           
0DCA8                           ;; Volume and frequency table for paint sound effect (reversed)
0DCA8 00                        tbl_PaintSfxVolume: .db #$00
0DCA9 B0 B1 B2 B3 B2 B4 B6 B3       .db #$B0, #$B1, #$B2, #$B3, #$B2, #$B4, #$B6, #$B3
0DCB1 B6 B9 B5 B9 B5 B9 B5 B9       .db #$B6, #$B9, #$B5, #$B9, #$B5, #$B9, #$B5, #$B9
0DCB9 00                        tbl_PaintSfxFreqHi: .db #$00
0DCBA 08 08 08 08 08 08 08 08       .db #$08, #$08, #$08, #$08, #$08, #$08, #$08, #$08
0DCC2 08 09 08 09 09 09 09 09       .db #$08, #$09, #$08, #$09, #$09, #$09, #$09, #$09
0DCCA 00                        tbl_PaintSfxFreqLo: .db #$00
0DCCB 68 90 B8 E0 A4 CC F4 BC       .db #$68, #$90, #$B8, #$E0, #$A4, #$CC, #$F4, #$BC
0DCD3 E4 0C F6 32 1A 56 44 80       .db #$E4, #$0C, #$F6, #$32, #$1A, #$56, #$44, #$80
0DCDB                               
0DCDB                           ;; End level sweep
0DCDB                           tbl_SweepVolume:
0DCDB 00 00 00 01 02 03 03 04       .db #$00, #$00, #$00, #$01, #$02, #$03, #$03, #$04
0DCE3 05 07 08 09 09 0A 0B 0D       .db #$05, #$07, #$08, #$09, #$09, #$0A, #$0B, #$0D
0DCEB                           tbl_SweepFrequency:
0DCEB 20 48 70 98 C0                .db #$20, #$48, #$70, #$98, #$C0
0DCF0                           
0DCF0                           ;; End game sweep
0DCF0                           tbl_EndSweepLength:
0DCF0 02 02 03 03 04 04 05 05       .db #$02, #$02, #$03, #$03, #$04, #$04, #$05, #$05
0DCF8 06 07 08 0A 0D 12 19 20       .db #$06, #$07, #$08, #$0A, #$0D, #$12, #$19, #$20
0DD00 24 26                         .db #$24, #$26
0DD02                           
0DD02                           tbl_EndSweepFreqDeltaLo:
0DD02 60 60 40 40 30 30 26 26       .db #$60, #$60, #$40, #$40, #$30, #$30, #$26, #$26
0DD0A 20 1B 18 13 0E 0A 07 06       .db #$20, #$1B, #$18, #$13, #$0E, #$0A, #$07, #$06
0DD12 05 05                         .db #$05, #$05
0DD14                           
0DD14                           tbl_EndSweepFreqDeltaRest:
0DD14 00 00 00 00 00 00 66 66       .db #$00, #$00, #$00, #$00, #$00, #$00, #$66, #$66
0DD1C 00 6E 00 33 C5 AB AE 00       .db #$00, #$6E, #$00, #$33, #$C5, #$AB, #$AE, #$00
0DD24 55 55                         .db #$55, #$55
0DD26                           
0DD26                           ;; Lookup table to convert bonus ticks to score
0DD26                           tbl_BonusToScore:
0DD26 00 0A 14 1E 28 32 3C 46..     .db #00, #10, #20, #30, #40, #50, #60, #70, #80, #90
0DD30                           
0DD30                           ;; Check string for sentience (warm boot)
0DD30 C0 FF EE 54 07            tbl_Sentient: .db #$C0, #$FF, #$EE, #$54, #$07
0DD35                           
0DD35                           tbl_EndGamePalette:
0DD35 0F 2D 00 3D                   .db #$0F, #$2D, #$00, #$3D
0DD39 3C 3B 38 37                   .db #$3C, #$3B, #$38, #$37
0DD3D 37 38 3B 3C                   .db #$37, #$38, #$3B, #$3C
0DD41 3D 00 2D 0F                   .db #$3D, #$00, #$2D, #$0F0DD45                           
0DD45                           ;; NMI handler
0DD45                           NMI:
0DD45                               .include "interrupt/nmi.asm"
0DD45                           
0DD45                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0DD45                           ;;
0DD45                           ;; include/nmi.asm
0DD45                           ;;
0DD45                           ;; Non-maskable interrupt script. This script is being executed
0DD45                           ;; when vBlank hits.
0DD45                           ;;
0DD45                           ;;
0DD45                           
0DD45                               ;; Preserve accumulator through stack
0DD45 48                            PHA
0DD46                           
0DD46                               ;; Should NMI be skipped?
0DD46 A5 1E                         LDA skip_nmi
0DD48 F0 03                         BEQ +
0DD4A 4C 7E DF                          JMP +skip_nmi
0DD4D                               +
0DD4D                           
0DD4D                               ;; When in NMI, skip additional NMI requests
0DD4D A9 01                         LDA #$01
0DD4F 85 1E                         STA skip_nmi
0DD51                           
0DD51                               ;; Preserve X, Y, and PC through stack
0DD51 8A                            TXA
0DD52 48                            PHA
0DD53 98                            TYA
0DD54 48                            PHA
0DD55 08                            PHP
0DD56                               
0DD56                               ;; Check forced NMI skip
0DD56 A5 1F                         LDA force_skip_nmi
0DD58 F0 03                         BEQ +
0DD5A 4C 6D DF                          JMP +force_skip_nmi
0DD5D                               +
0DD5D                           
0DD5D                               ;; Update PPU mask
0DD5D                               ;LDA #$00
0DD5D                               ;STA PPU_CTRL
0DD5D A5 1D                         LDA soft_ppu_mask
0DD5F 8D 01 20                      STA PPU_MASK
0DD62                               
0DD62                               
0DD62                               ;; Additional PPU updates go here
0DD62                               .include "game/interrupt/nmi.asm"
0DD62                           
0DD62                               ;; Check if ppu_buffer needs updating
0DD62 A5 44                         LDA ppu_buffer_update
0DD64 D0 03                         BNE +
0DD66 4C A8 DD                          JMP +no_ppu_buffer_update
0DD69                               +
0DD69                           
0DD69                               ;; Reset ppu control register and mask
0DD69 A2 00                         LDX #$00
0DD6B 8E 00 20                      STX PPU_CTRL
0DD6E 8E 01 20                      STX PPU_MASK
0DD71                           
0DD71                               ;; Set up loop
0DD71                               -
0DD71                                   ;; Reset hi/lo latch
0DD71 2C 02 20                          BIT PPU_STATUS
0DD74                           
0DD74                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0DD74 BD 00 03                          LDA ppu_buffer,x
0DD77 8D 06 20                          STA PPU_ADDR
0DD7A E8                                INX
0DD7B BD 00 03                          LDA ppu_buffer,x
0DD7E 8D 06 20                          STA PPU_ADDR
0DD81                           
0DD81                                   ;; Write ppu_buffer data to PPU_ADDR
0DD81 E8                                INX
0DD82 BD 00 03                          LDA ppu_buffer,x
0DD85 8D 07 20                          STA PPU_DATA
0DD88                           
0DD88                                   ;; Check if updating is done (eg. X is at pointer)
0DD88 E8                                INX
0DD89 E4 45                             CPX ppu_buffer_pointer
0DD8B F0 03                             BEQ +
0DD8D 4C 71 DD                      JMP -
0DD90                           +
0DD90                           
0DD90                               ;; Reset ppu buffer update and pointer
0DD90 A9 00                         LDA #$00
0DD92 85 44                         STA ppu_buffer_update
0DD94 85 45                         STA ppu_buffer_pointer
0DD96                               
0DD96                               ;; Reset scrolling position
0DD96 8D 05 20                      STA PPU_SCROLL
0DD99 8D 05 20                      STA PPU_SCROLL
0DD9C                           
0DD9C                               ;; Restore ppu control register and mask
0DD9C A9 90                         LDA #%10010000
0DD9E 8D 00 20                      STA PPU_CTRL
0DDA1 A5 1D                         LDA soft_ppu_mask
0DDA3 8D 01 20                      STA PPU_MASK
0DDA6 A9 00                         LDA #$00
0DDA8                           
0DDA8                           ;; Continue other NMI stuff
0DDA8                           +no_ppu_buffer_update:
0DDA8                           
0DDA8                               ;; Reset sprite RAM, draw sprites
0DDA8 8D 03 20                      STA OAM_ADDR
0DDAB A9 02                         LDA #$02
0DDAD 8D 14 40                      STA OAM_DMA
0DDB0                           
0DDB0                               ;; Decrease explosion and move block timers
0DDB0 A0 04                         LDY #MAX_ANIMATIONS
0DDB2 A2 00                         LDX #$00
0DDB4                               -
0DDB4 BD 60 03                          LDA explosion_timer,x
0DDB7 F0 03                             BEQ +
0DDB9 DE 60 03                              DEC explosion_timer,x
0DDBC                                   +
0DDBC                           
0DDBC BD 80 03                          LDA move_block_timer,x
0DDBF F0 03                             BEQ +
0DDC1 DE 80 03                              DEC move_block_timer,x
0DDC4                                   +
0DDC4                                   
0DDC4 E8                                INX
0DDC5 88                                DEY
0DDC6 F0 03                             BEQ +done
0DDC8 4C B4 DD                      JMP -
0DDCB                           +done:
0DDCB                           
0DDCB                               ;; Decrease nudge timer
0DDCB A5 49                         LDA nudge_timer
0DDCD F0 02                         BEQ +
0DDCF C6 49                             DEC nudge_timer
0DDD1                               +
0DDD1                           
0DDD1                               ;; Decrease bonus timer
0DDD1 A5 4A                         LDA bonus_timer
0DDD3 F0 02                         BEQ +
0DDD5 C6 4A                             DEC bonus_timer
0DDD7                               +
0DDD7                           
0DDD7                               ;; Decrease kill timer
0DDD7 A5 4B                         LDA kill_timer
0DDD9 F0 02                         BEQ +
0DDDB C6 4B                             DEC kill_timer
0DDDD                               +
0DDDD                               
0DDDD                               ;; Decrease and handle unfreeze timer
0DDDD A5 4C                         LDA unfreeze_timer
0DDDF F0 0A                         BEQ +
0DDE1 C6 4C                             DEC unfreeze_timer
0DDE3 D0 06                             BNE +
0DDE5                                   
0DDE5 A5 42                             LDA ball_flags
0DDE7 29 FB                             AND #UNFREEZE_BALL
0DDE9 85 42                             STA ball_flags
0DDEB                               +
0DDEB                           
0DDEB                               ;; Play background noise
0DDEB A5 43                         LDA screen_mode
0DDED 29 01                         AND #IS_GAME_SCREEN
0DDEF F0 0C                         BEQ +
0DDF1                                   .include "game/include/main/background_sound.asm"
0DDF1                           
0DDF1                               ;; If noise is muted, no noise should play
0DDF1 A5 57                         LDA noise_muted
0DDF3 F0 08                         BEQ +
0DDF5 A9 30                             LDA #$30
0DDF7 8D 0C 40                          STA NOISE_VOLUME
0DDFA 4C 62 DE                          JMP +endNoise
0DDFD                               +
0DDFD                               
0DDFD                               ;; At random times, set max_noise period to $03-$0A
0DDFD A5 51                         LDA max_noise
0DDFF D0 1D                         BNE +
0DE01 20 B3 C6                          JSR sub_GetRandomNumber
0DE04 29 EF                             AND #%11101111
0DE06 D0 16                             BNE +
0DE08                                   
0DE08 A5 20                             LDA frame_counter
0DE0A 85 21                             STA random_seed
0DE0C 20 B3 C6                          JSR sub_GetRandomNumber
0DE0F 29 07                             AND #$07
0DE11 69 03                             ADC #$03
0DE13 85 51                             STA max_noise
0DE15 A9 01                             LDA #$01
0DE17 85 52                             STA sweep_noise
0DE19 A9 34                             LDA #$34
0DE1B 8D 0C 40                          STA NOISE_VOLUME
0DE1E                               +
0DE1E                           
0DE1E                               ;; if sweep noise = $00: constant noise
0DE1E                               ;; else if sweep noise > $80: decrease pitch
0DE1E                               ;; else: increase pitch
0DE1E A5 52                         LDA sweep_noise
0DE20 F0 18                         BEQ +constantNoise
0DE22 30 2A                         BMI +decreaseNoise
0DE24                           
0DE24                           ;; Sweep noise up to max noise pitch
0DE24                           +increaseNoise:
0DE24 C6 53                         DEC current_noise
0DE26 A5 53                         LDA current_noise
0DE28 8D 0E 40                      STA NOISE_PERIOD
0DE2B C5 51                         CMP max_noise
0DE2D D0 08                         BNE +
0DE2F A9 00                             LDA #$00
0DE31 85 52                             STA sweep_noise
0DE33 A9 0A                             LDA #$0A
0DE35 85 54                             STA noise_timer
0DE37                               +
0DE37 4C 62 DE                      JMP +endNoise
0DE3A                           
0DE3A                           ;; Keep noise at constant pitch
0DE3A                           +constantNoise:
0DE3A A5 51                         LDA max_noise
0DE3C F0 24                         BEQ +endNoise
0DE3E                           
0DE3E A5 54                         LDA noise_timer
0DE40 D0 07                         BNE +
0DE42 A9 80                             LDA #$80
0DE44 85 52                             STA sweep_noise
0DE46 4C 62 DE                          JMP +endNoise
0DE49                               +
0DE49 C6 54                         DEC noise_timer
0DE4B 4C 62 DE                      JMP +endNoise
0DE4E                           
0DE4E                           ;; Sweep noise down to initial pitch
0DE4E                           +decreaseNoise:
0DE4E E6 53                         INC current_noise
0DE50 A5 53                         LDA current_noise
0DE52 8D 0E 40                      STA NOISE_PERIOD
0DE55 C9 0E                         CMP #$0E
0DE57 D0 09                         BNE +endNoise
0DE59                           
0DE59 20 43 C7                      JSR sub_BackgroundNoise
0DE5C A9 00                         LDA #$00
0DE5E 85 51                         STA max_noise
0DE60 85 52                         STA sweep_noise
0DE62                           
0DE62                           +endNoise:
0DE62                           
0DE62                               +
0DE62                           
0DE62                               ;; Play bonus to score bleeps
0DE62                               .include "game/include/main/bonus_to_score_bleeps.asm"
0DE62                           
0DE62                           ;; Random bleepy noises
0DE62                           
0DE62 A5 55                         LDA do_beeps
0DE64 F0 2E                         BEQ +continue
0DE66                               
0DE66 C9 02                         CMP #$02
0DE68 D0 12                         BNE +beep
0DE6A                              
0DE6A                           +stopBeep:
0DE6A A9 00                         LDA #$00
0DE6C 85 55                         STA do_beeps
0DE6E A9 08                         LDA #$08
0DE70 8D 15 40                      STA APU_STATUS
0DE73 8D 0F 40                      STA NOISE_LENGTH
0DE76 20 43 C7                      JSR sub_BackgroundNoise
0DE79 4C 94 DE                      JMP +continue
0DE7C                               
0DE7C                           +beep:
0DE7C A9 01                         LDA #$01
0DE7E 8D 15 40                      STA APU_STATUS
0DE81 A5 56                         LDA soft_pulse1
0DE83 8D 00 40                      STA PULSE1_VOLUME
0DE86 20 B3 C6                      JSR sub_GetRandomNumber
0DE89 8D 02 40                      STA PULSE1_TIMER_LO
0DE8C 20 B3 C6                      JSR sub_GetRandomNumber
0DE8F 29 01                         AND #$01
0DE91 8D 03 40                      STA PULSE1_TIMER_HI
0DE94                           
0DE94                           +continue:
0DE94                           
0DE94                               
0DE94                               ;; Play sound effect
0DE94                               .include "game/include/main/nmi_sfx.asm"
0DE94                           
0DE94                               ;; Get current explosion sfx frame; if not set, skip this
0DE94 A4 5A                         LDY sfx_timer
0DE96 F0 1F                         BEQ +done
0DE98                               
0DE98                                   ;; Check if explosion sfx is done; if so, disable and skip
0DE98 B1 58                             LDA (sfx_address),y
0DE9A D0 07                             BNE +
0DE9C A9 00                                 LDA #$00
0DE9E 85 5A                                 STA sfx_timer
0DEA0 4C B7 DE                              JMP +done
0DEA3                                   +
0DEA3                                   
0DEA3                                   ;; Set low nibble as volume
0DEA3 29 0F                             AND #$0F
0DEA5 09 30                             ORA #$30
0DEA7 8D 0C 40                          STA NOISE_VOLUME
0DEAA                                   
0DEAA                                   ;; Set high nibble as frequency
0DEAA B1 58                             LDA (sfx_address),y
0DEAC 4A                                LSR
0DEAD 4A                                LSR
0DEAE 4A                                LSR
0DEAF 4A                                LSR
0DEB0 49 0F                             EOR #$0F
0DEB2 8D 0E 40                          STA NOISE_PERIOD
0DEB5                                   
0DEB5                                   ;; Next frame
0DEB5 E6 5A                             INC sfx_timer
0DEB7                               +done:
0DEB7                           
0DEB7                           
0DEB7                               ;; Check move sfx
0DEB7 A4 5B                         LDY sfx_timer+1
0DEB9 F0 34                         BEQ +done
0DEBB                           
0DEBB C6 5B                             DEC sfx_timer+1
0DEBD C0 18                             CPY #$18
0DEBF D0 0D                             BNE +
0DEC1                                       ;; Update APU status
0DEC1 A9 09                                 LDA #$09
0DEC3 8D 15 40                              STA APU_STATUS
0DEC6 A9 8B                                 LDA #$8B
0DEC8 85 5D                                 STA sfx_frequency
0DECA A9 0A                                 LDA #$0A
0DECC 85 5E                                 STA sfx_frequency+1
0DECE                                   +
0DECE                                   
0DECE                                   ;; Set volume
0DECE B9 90 DC                          LDA tbl_MoveSfxVolume,y
0DED1 8D 00 40                          STA PULSE1_VOLUME
0DED4                                   
0DED4 84 0B                             STY temp
0DED6 A9 18                             LDA #$18
0DED8 38                                SEC
0DED9 E5 0B                             SBC temp
0DEDB 4A                                LSR
0DEDC 18                                CLC
0DEDD 69 03                             ADC #$03
0DEDF 65 5D                             ADC sfx_frequency
0DEE1 85 5D                             STA sfx_frequency
0DEE3 8D 02 40                          STA PULSE1_TIMER_LO
0DEE6 A5 5E                             LDA sfx_frequency+1
0DEE8 69 00                             ADC #$00
0DEEA 85 5E                             STA sfx_frequency+1
0DEEC 8D 03 40                          STA PULSE1_TIMER_HI
0DEEF                               +done:
0DEEF                           
0DEEF                           
0DEEF                               ;; Check paint sfx
0DEEF A4 5C                         LDY sfx_timer+2
0DEF1 F0 1D                         BEQ +done
0DEF3                           
0DEF3 C6 5C                             DEC sfx_timer+2
0DEF5 C0 10                             CPY #$10
0DEF7 D0 05                             BNE +
0DEF9                                       ;; Update APU status
0DEF9 A9 09                                 LDA #$09
0DEFB 8D 15 40                              STA APU_STATUS
0DEFE                                   +
0DEFE                                   
0DEFE                                   ;; Set volume
0DEFE B9 A8 DC                          LDA tbl_PaintSfxVolume,y
0DF01 8D 00 40                          STA PULSE1_VOLUME
0DF04 B9 CA DC                          LDA tbl_PaintSfxFreqLo,y
0DF07 8D 02 40                          STA PULSE1_TIMER_LO
0DF0A B9 B9 DC                          LDA tbl_PaintSfxFreqHi,y
0DF0D 8D 03 40                          STA PULSE1_TIMER_HI
0DF10                               +done:
0DF10                           
0DF10                           
0DF10                               ;; Check sweep sfx
0DF10 A5 5F                         LDA sfx_sweep_count
0DF12 F0 1A                         BEQ +done
0DF14 C9 0F                             CMP #$0F
0DF16 D0 05                             BNE +
0DF18 A9 01                                 LDA #$01
0DF1A 8D 15 40                              STA APU_STATUS
0DF1D                                   +
0DF1D A5 60                             LDA sfx_sweep_volume
0DF1F 09 70                             ORA #$70
0DF21 8D 00 40                          STA PULSE1_VOLUME
0DF24 A5 62                             LDA sfx_sweep_frequency
0DF26 8D 02 40                          STA PULSE1_TIMER_LO
0DF29 A9 08                             LDA #$08
0DF2B 8D 03 40                          STA PULSE1_TIMER_HI
0DF2E                               +done:
0DF2E                               
0DF2E                               
0DF2E                               ;; Check end game sweep
0DF2E A5 63                         LDA sfx_endgame_enabled
0DF30 F0 3B                         BEQ +done
0DF32 C9 01                             CMP #$01
0DF34 D0 07                             BNE +
0DF36 A9 03                                 LDA #$03
0DF38 8D 15 40                              STA APU_STATUS
0DF3B E6 63                                 INC sfx_endgame_enabled
0DF3D                                   +
0DF3D                                   
0DF3D C9 FF                             CMP #$FF
0DF3F D0 10                             BNE +
0DF41 A9 00                                 LDA #$00
0DF43 85 63                                 STA sfx_endgame_enabled
0DF45 8D 15 40                              STA APU_STATUS
0DF48 8D 00 40                              STA PULSE1_VOLUME
0DF4B 8D 04 40                              STA PULSE2_VOLUME
0DF4E 4C 6D DF                              JMP +done
0DF51                                   +
0DF51 A9 77                             LDA #$77
0DF53 8D 00 40                          STA PULSE1_VOLUME
0DF56 8D 04 40                          STA PULSE2_VOLUME
0DF59 A5 65                             LDA sfx_endgame_p1_freq_hi
0DF5B 8D 03 40                          STA PULSE1_TIMER_HI
0DF5E A5 66                             LDA sfx_endgame_p1_freq_lo
0DF60 8D 02 40                          STA PULSE1_TIMER_LO 
0DF63 A5 68                             LDA sfx_endgame_p2_freq_hi
0DF65 8D 07 40                          STA PULSE2_TIMER_HI
0DF68 A5 69                             LDA sfx_endgame_p2_freq_lo
0DF6A 8D 06 40                          STA PULSE2_TIMER_LO
0DF6D                               +done:
0DF6D                           
0DF6D                               
0DF6D                           
0DF6D                           ;; This is what happens when we forced nmi skip
0DF6D                           +force_skip_nmi:
0DF6D                           
0DF6D                               ;; Increase frame timers
0DF6D E6 20                         INC frame_counter
0DF6F                           
0DF6F                               ;; reset sprites_update_position
0DF6F A9 00                         LDA #$00
0DF71 85 40                         STA sprites_update_position
0DF73                           
0DF73                               ;; Don't skip next NMI request
0DF73 A9 00                         LDA #$00
0DF75 85 1E                         STA skip_nmi
0DF77 85 6A                         STA check_nmi
0DF79                           
0DF79                               ;; Restore X, Y and PC from stack
0DF79 28                            PLP
0DF7A 68                            PLA
0DF7B A8                            TAY
0DF7C 68                            PLA
0DF7D AA                            TAX
0DF7E                           
0DF7E                           +skip_nmi:
0DF7E                               ;; Restore accumulator from stack
0DF7E 68                            PLA
0DF7F                           
0DF7F                               ;; Return
0DF7F 40                            RTI
0DF80                           
0DF80                           
0DF80                           ;; IRQ handler (empty)
0DF80                           IRQ:
0DF80                               .include "interrupt/irq.asm"
0DF80                           
0DF80 40                            RTI
0DF81                           
0DF81                           
0DF81                           ;; Interrupt vectors
0DF81 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 45 DD                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 80 DF                         .dw IRQ
10000                           
10000                           ;; CHR data
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
12000                           
