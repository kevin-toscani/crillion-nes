	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; PPU flag helpers
	                            SPRITE_0_HIT = #%01000000
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"
	                            
	                            ;; TEST MODE (comment to disable, or set to level number)
	                            TESTING = #12
	                            
	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$01        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$88        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            ;; Move block offset within game area
	                            MOVE_BLOCK_LEFT_WGA  = #$F8   ; Left position within game area (-#$08)
	                            MOVE_BLOCK_TOP_WGA   = #$D8   ; Top position within game area (-#$28)
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            BALL_COLOR       = #%11100000
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_MOVE_BLOCK    = #%01000000
	                            IS_PAINT_BLOCK   = #%00100000
	                            IS_DEATH_BLOCK   = #%00010000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge and bonus frames
	                            NUDGE_FRAMES    = #$06
	                            BONUS_FRAMES    = #$08
	                            
	                            ;; How many bonus points get subtracted per frame after a level
	                            BONUS_COUNTDOWN_PER_FRAME = #$09
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; APU registers
	                            PULSE1_VOLUME   = $4000
	                            PULSE1_SWEEP    = $4001
	                            PULSE1_TIMER_LO = $4002
	                            PULSE1_TIMER_HI = $4003
	                            PULSE1_LENGTH   = $4004
	                            
	                            NOISE_VOLUME    = $400C
	                            NOISE_PERIOD    = $400E
	                            NOISE_LENGTH    = $400F
	                            
	                            
	                            ;; Sound effects
	                            SFX_EXPLOSION   = #0
	                            SFX_THUD        = #1
	                            SFX_BOUNCE      = #2
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            
	                            
	                            .include "include/macros.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            
	                            ;; additional game-specific macros go here
	                            ;; (currently none)
	                            
	                            
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_ypos_hi_prev      .dsb 1
0001C                           ball_ypos_lo_prev      .dsb 1
0001D                           ball_xpos_hi_prev      .dsb 1
0001E                           ball_xpos_lo_prev      .dsb 1
0001F                           ball_lives             .dsb 1   ; number of lives left
00020                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00026                           add_to_score           .dsb 6
0002C                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
0002F                           
0002F                           ;; Ball bounding box, relative to the screen
0002F                           ball_left              .dsb 1
00030                           ball_center            .dsb 1
00031                           ball_right             .dsb 1
00032                           ball_top               .dsb 1
00033                           ball_middle            .dsb 1
00034                           ball_bottom            .dsb 1
00035                           
00035                           ;; Update-position check
00035                           sprites_update_position  .dsb 1
00036                           
00036                           ;; Lock block space helper variable
00036                           ;; When the ball hits a lock block, it should only move if the space
00036                           ;; where it moves to, is not solid. This variable holds the metatile
00036                           ;; offset of the position where the lock block should move to, so
00036                           ;; we can check if it is solid or not.
00036                           ;;
00036                           ;; UP:    #%11110000 #$F0
00036                           ;; DOWN:  #%00010000 #$10
00036                           ;; LEFT:  #%11111111 #$FF
00036                           ;; RIGHT: #%00000001 #$01
00036                           ;;        #%d......h
00036                           move_block_space_to_check  .dsb 1
00037                           
00037                           
00037                           ;; Ball flags
00037                           ;; #% c c c v . f n a
00037                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
00037                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
00037                           ;;    | | | | | +------ ball is frozen (not moving)
00037                           ;;    | | | | +-------- (unused for now)
00037                           ;;    | | | +---------- ball moves up (0) or down (1)
00037                           ;;    +-+-+------------ ball color (1-6)
00037                           ball_flags             .dsb 1
00038                           
00038                           
00038                           ;; Screen mode
00038                           ;; #% u . . . . . t t
00038                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
00038                           ;;    | +-+-+-+-+------------- unused
00038                           ;;    +----------------------- should the screen update
00038                           screen_mode            .dsb 1
00039                           
00039                           
00039                           
00039                           ;; PPU buffer variables
00039                           ppu_buffer_update      .dsb 1
0003A                           ppu_buffer_pointer     .dsb 1
0003B                           
0003B                           ;; Pointer to keep track of the number of explosions
0003B                           explosion_pointer      .dsb 1
0003C                           
0003C                           ;; Pointer to keep track of the number of move blocks
0003C                           move_block_pointer     .dsb 1
0003D                           
0003D                           ;; Sprite RAM pointer to keep track of sprites to update
0003D                           sprite_ram_pointer     .dsb 1
0003E                           
0003E                           ;; Timers 
0003E                           nudge_timer            .dsb 1
0003F                           bonus_timer            .dsb 1
00040                           kill_timer             .dsb 1
00041                           unfreeze_timer         .dsb 1
00042                           
00042                           ;; Current level (doubles as level select variable)
00042                           current_level          .dsb 1
00043                           
00043                           ;; Tile type the ball is currently colliding with
00043                           colliding_tile         .dsb 1
00044                           
00044                           ;; Number of blocks left on screen
00044                           blocks_left            .dsb 1
00045                           
00045                           ;; Sound control variables
00045                           max_noise              .dsb 1
00046                           sweep_noise            .dsb 1
00047                           current_noise          .dsb 1
00048                           noise_timer            .dsb 1
00049                           do_beeps               .dsb 1
0004A                           soft_pulse1            .dsb 1
0004B                           noise_muted            .dsb 1
0004C                           
0004C                           ;; Sound effect variables
0004C                           sfx_address            .dsb 2
0004E                           sfx_timer              .dsb 1
0004F                           
0004F                           ;; Additional NMI check for timed PPU fade
0004F                           check_nmi              .dsb 1
00050                           
00050                           
00050                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x32 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 96
00360                           
00360                               ;; Explosion timer, counts from ANIMATION_SPEED to 0 per slide
00360                               explosion_timer           .dsb 4
00364                           
00364                               ;; Explosion currentframe, keeps track which anim frame we're at
00364                               explosion_currentframe    .dsb 4
00368                           
00368                               ;; Explosion attributes, to distinguish between ball and wall explosion
00368                               explosion_attributes      .dsb 4
0036C                           
0036C                               ;; x- and y-coordinate of the explosion
0036C                               explosion_x               .dsb 4
00370                               explosion_y               .dsb 4
00374                           
00374                               ;; active flag to see if animation is/should be shown
00374                               explosion_active          .dsb 4
00378                               
00378                               ;; move block variables (similar to explosions)
00378                               move_block_x              .dsb 4
0037C                               move_block_y              .dsb 4
00380                               move_block_timer          .dsb 4 ; doubles as move_block_active
00384                               move_block_tile_type      .dsb 4
00388                           
00388                               ;; move block flags
00388                               ;; #% ccc ... h d
00388                               ;;    ||| ||| | +-- direction: up/left (1) or right/down (0) 
00388                               ;;    ||| ||| +---- direction: horizontal (1) or vertical (0)
00388                               ;;    ||| +++----- (unused)
00388                               ;;    +++--------- color (1-6, also unused)
00388                               move_block_flags          .dsb 4
0038C                               
0038C                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 0A C5                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 0A C5                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           
0C04B                           ;; Softer reset
0C04B                           ;; After game over, the game JMPs here to prevent
0C04B                           ;; resetting the high score
0C04B                           
0C04B                           lbl_SoftReset:
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 38                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1F                         STA ball_lives
0C053                           
0C053                               ;; Start at level 1
0C053 A9 00                         LDA #$00
0C055 85 20                         STA ball_score
0C057 85 21                         STA ball_score+1
0C059 85 22                         STA ball_score+2
0C05B 85 23                         STA ball_score+3
0C05D 85 24                         STA ball_score+4
0C05F 85 25                         STA ball_score+5
0C061                           
0C061                           ifdef TESTING
0C061 A9 FF                         LDA #$FF
0C063 85 1F                         STA ball_lives
0C065 A9 0C                         LDA #TESTING
0C067                           endif
0C067                           
0C067 85 42                         STA current_level
0C069                           
0C069                           
0C069                           
0C069                           ;; Main game loop
0C069                           lbl_MainGameLoop:
0C069                               .include "game/main.asm"
0C069                           
0C069                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C069                           ;;
0C069                           ;; game/main.asm
0C069                           ;;
0C069                           ;; The main game loop content.
0C069                           ;;
0C069                           ;;
0C069                           
0C069                               ;; Reset sprite pointer every game loop
0C069 A9 00                         LDA #$00
0C06B 85 3D                         STA sprite_ram_pointer
0C06D                           
0C06D                               ;; Store previous buttons
0C06D A5 0F                         LDA buttons_held
0C06F 85 0E                         STA buttons_prev
0C071                           
0C071                               ;; Read controller input
0C071 20 ED C4                      JSR sub_ReadController
0C074                           
0C074                               ;; Get buttons released
0C074 A5 0F                         LDA buttons_held
0C076 49 FF                         EOR #$FF
0C078 25 0E                         AND buttons_prev
0C07A 85 11                         STA buttons_released
0C07C                           
0C07C                               ;; Set buttons pressed
0C07C A5 0E                         LDA buttons_prev
0C07E 49 FF                         EOR #$FF
0C080 25 0F                         AND buttons_held
0C082 85 10                         STA buttons_pressed
0C084                           
0C084                               ;; Load screen?
0C084 A5 38                         LDA screen_mode
0C086 29 80                         AND #%10000000
0C088 F0 1E                         BEQ +screenLoaded
0C08A                           
0C08A                               ;; Get screen type to load
0C08A A5 38                         LDA screen_mode
0C08C 29 03                         AND #%00000011
0C08E A8                            TAY
0C08F                               
0C08F                               ;; Get address to load screen type from
0C08F B9 38 D2                      LDA tbl_LoadScreenLo,y
0C092 85 0C                         STA pointer
0C094 B9 35 D2                      LDA tbl_LoadScreenHi,y
0C097 85 0D                         STA pointer+1
0C099                           
0C099                               ;; Load screen
0C099 20 8D C6                      JSR sub_DisableRendering
0C09C 20 CD C9                      JSR sub_JumpToPointer
0C09F 20 A1 C6                      JSR sub_EnableRendering
0C0A2                               
0C0A2                               ;; Don't load screen anymore next loop
0C0A2 A5 38                         LDA screen_mode
0C0A4 29 7F                         AND #%01111111
0C0A6 85 38                         STA screen_mode
0C0A8                               
0C0A8                           
0C0A8                           +screenLoaded:
0C0A8                               ;; Check if we're on the game screen
0C0A8 A5 38                         LDA screen_mode
0C0AA C9 01                         CMP #IS_GAME_SCREEN
0C0AC F0 03                         BEQ +
0C0AE 4C 51 C3                          JMP +checkNextScreen
0C0B1                               +
0C0B1                           
0C0B1                               ;; Load sprite 0 in place
0C0B1 A9 28                         LDA #$28
0C0B3 8D 00 02                      STA ADDR_SPRITERAM
0C0B6 A9 0F                         LDA #$0F
0C0B8 8D 01 02                      STA ADDR_SPRITERAM+1
0C0BB A9 22                         LDA #$22
0C0BD 8D 02 02                      STA ADDR_SPRITERAM+2
0C0C0 A9 F8                         LDA #$F8
0C0C2 8D 03 02                      STA ADDR_SPRITERAM+3
0C0C5 A9 04                         LDA #$04
0C0C7 85 3D                         STA sprite_ram_pointer
0C0C9                           
0C0C9                               ;; We're on the game screen
0C0C9                               ;; Check if position should be updated (ie. has nmi happened yet)
0C0C9 A5 35                         LDA sprites_update_position
0C0CB F0 03                         BEQ +
0C0CD 4C B7 C2                          JMP +skipSpriteMovement
0C0D0                               +
0C0D0                           
0C0D0                               ;; Check if ball is frozen
0C0D0 A5 37                         LDA ball_flags
0C0D2 29 04                         AND #BALL_IS_FROZEN
0C0D4 F0 03                         BEQ +
0C0D6 4C 76 C2                          JMP +skipBallMovement
0C0D9                               +
0C0D9                           
0C0D9                               ;; Move the ball
0C0D9                               .include "game/include/main/move_ball.asm"
0C0D9                           
0C0D9                               ;; Check if ball goes up or down
0C0D9 A5 37                         LDA ball_flags
0C0DB 29 10                         AND #BALL_MOVES_DOWN
0C0DD F0 2B                         BEQ +moveBallUp
0C0DF                           
0C0DF                           
0C0DF                           +moveBallDown:
0C0DF                               ;; update the low byte
0C0DF A5 1A                         LDA ball_ypos_lo
0C0E1 85 1C                         STA ball_ypos_lo_prev
0C0E3 18                            CLC
0C0E4 69 88                         ADC #BALL_SPEED_LO
0C0E6 85 1A                         STA ball_ypos_lo
0C0E8                           
0C0E8                               ;; update the high byte with carry
0C0E8 A5 19                         LDA ball_ypos_hi
0C0EA 85 1B                         STA ball_ypos_hi_prev
0C0EC 69 01                         ADC #BALL_SPEED_HI
0C0EE 85 19                         STA ball_ypos_hi
0C0F0                               
0C0F0                               ;; Check bottom bound
0C0F0 C9 C8                         CMP #BOUND_BOTTOM
0C0F2 90 3C                         BCC +checkHorizontalMovement
0C0F4 F0 3A                         BEQ +checkHorizontalMovement
0C0F6                           
0C0F6                           
0C0F6                               ;; Change ball direction to "up"
0C0F6 A9 C8                         LDA #BOUND_BOTTOM
0C0F8 38                            SEC
0C0F9 E9 01                         SBC #$01
0C0FB 85 19                         STA ball_ypos_hi
0C0FD A9 00                         LDA #$00
0C0FF 85 1A                         STA ball_ypos_lo
0C101 A5 37                         LDA ball_flags
0C103 29 EF                         AND #MOVE_BALL_UP
0C105 85 37                         STA ball_flags
0C107 4C 30 C1                      JMP +checkHorizontalMovement
0C10A                           
0C10A                           
0C10A                           +moveBallUp:
0C10A                               ;; update the low byte
0C10A A5 1A                         LDA ball_ypos_lo
0C10C 85 1C                         STA ball_ypos_lo_prev
0C10E 38                            SEC
0C10F E9 88                         SBC #BALL_SPEED_LO
0C111 85 1A                         STA ball_ypos_lo
0C113                           
0C113                               ;; update the high byte with carry
0C113 A5 19                         LDA ball_ypos_hi
0C115 85 1B                         STA ball_ypos_hi_prev
0C117 E9 01                         SBC #BALL_SPEED_HI
0C119 85 19                         STA ball_ypos_hi
0C11B                               
0C11B                               ;; Check top bound
0C11B C9 30                         CMP #BOUND_TOP
0C11D B0 11                         BCS +checkHorizontalMovement
0C11F                           
0C11F                               ;; Change ball direction to "down"
0C11F A9 30                         LDA #BOUND_TOP
0C121 18                            CLC
0C122 69 01                         ADC #$01
0C124 85 19                         STA ball_ypos_hi
0C126 A9 00                         LDA #$00
0C128 85 1A                         STA ball_ypos_lo
0C12A A5 37                         LDA ball_flags
0C12C 09 10                         ORA #MOVE_BALL_DOWN
0C12E 85 37                         STA ball_flags
0C130                           
0C130                           
0C130                           +checkHorizontalMovement:
0C130                           
0C130                               ;; Check if ball is being nudged
0C130 A5 3E                         LDA nudge_timer
0C132 D0 41                         BNE +doneBallMovement
0C134                           
0C134                               ;; Check if left button is held
0C134 A5 0F                         LDA buttons_held
0C136 29 02                         AND #BUTTON_LEFT
0C138 F0 1B                         BEQ +
0C13A                                   ;; update the low byte
0C13A A5 18                             LDA ball_xpos_lo
0C13C 38                                SEC
0C13D E9 88                             SBC #BALL_SPEED_LO
0C13F 85 18                             STA ball_xpos_lo
0C141                           
0C141                                   ;; update the high byte
0C141 A5 17                             LDA ball_xpos_hi
0C143 E9 01                             SBC #BALL_SPEED_HI
0C145 85 17                             STA ball_xpos_hi
0C147                                   
0C147                                   ;; Check left bound
0C147 C9 10                             CMP #BOUND_LEFT
0C149 B0 2A                             BCS +doneBallMovement
0C14B                                   
0C14B                                   ;; Set flag to nudge right and set nudge timer
0C14B A5 37                             LDA ball_flags
0C14D 09 02                             ORA #NUDGE_BALL_RIGHT
0C14F 20 C6 C9                          JSR sub_InitiateNudge
0C152                           
0C152 4C 75 C1                          JMP +doneBallMovement        
0C155                               +
0C155                           
0C155                               ;; Check if right button is held
0C155 A5 0F                         LDA buttons_held
0C157 29 01                         AND #BUTTON_RIGHT
0C159 F0 1A                         BEQ +
0C15B                                   ;; update the low byte
0C15B A5 18                             LDA ball_xpos_lo
0C15D 18                                CLC
0C15E 69 88                             ADC #BALL_SPEED_LO
0C160 85 18                             STA ball_xpos_lo
0C162                           
0C162                                   ;; update the high byte
0C162 A5 17                             LDA ball_xpos_hi
0C164 69 01                             ADC #BALL_SPEED_HI
0C166 85 17                             STA ball_xpos_hi     
0C168                           
0C168                                  ;; Check right bound
0C168 C9 E8                             CMP #BOUND_RIGHT
0C16A 90 09                             BCC +doneBallMovement
0C16C F0 07                             BEQ +doneBallMovement
0C16E                                   
0C16E                                   ;; Set flag to nudge left and set nudge timer
0C16E A5 37                             LDA ball_flags
0C170 29 FD                             AND #NUDGE_BALL_LEFT
0C172 20 C6 C9                          JSR sub_InitiateNudge
0C175                               +
0C175                           
0C175                           
0C175                           +doneBallMovement:
0C175                           
0C175                               ;; Check nudge
0C175 A5 3E                         LDA nudge_timer
0C177 F0 23                         BEQ +doneBallNudging
0C179 A5 37                             LDA ball_flags
0C17B 29 02                             AND #NUDGE_BALL_RIGHT
0C17D F0 10                             BEQ +nudgeBallLeft
0C17F                                   
0C17F                                       ;; update the low byte
0C17F A5 18                                 LDA ball_xpos_lo
0C181 18                                    CLC
0C182 69 88                                 ADC #BALL_SPEED_LO
0C184 85 18                                 STA ball_xpos_lo
0C186                           
0C186                                       ;; update the high byte
0C186 A5 17                                 LDA ball_xpos_hi
0C188 69 01                                 ADC #BALL_SPEED_HI
0C18A 85 17                                 STA ball_xpos_hi  
0C18C 4C 9C C1                              JMP +doneBallNudging
0C18F                                   +nudgeBallLeft:
0C18F                                   
0C18F                                   ;; update the low byte
0C18F A5 18                             LDA ball_xpos_lo
0C191 38                                SEC
0C192 E9 88                             SBC #BALL_SPEED_LO
0C194 85 18                             STA ball_xpos_lo
0C196                           
0C196                                   ;; update the high byte
0C196 A5 17                             LDA ball_xpos_hi
0C198 E9 01                             SBC #BALL_SPEED_HI
0C19A 85 17                             STA ball_xpos_hi
0C19C                               +doneBallNudging:
0C19C                           
0C19C                               ;; Don't update position again until next frame
0C19C                               ;; (moved to after move block routine)
0C19C                           
0C19C                           +doneBallHandling:
0C19C                           
0C19C                               
0C19C                               ;; Do collision detection
0C19C                               .include "game/include/main/collision_detection.asm"
0C19C                           
0C19C                               ;; Get ball's x-left, x-center, x-right position
0C19C A5 17                         LDA ball_xpos_hi
0C19E 18                            CLC
0C19F 69 F0                         ADC #BALL_LEFT_WGA
0C1A1 85 2F                         STA ball_left
0C1A3 18                            CLC
0C1A4 69 04                         ADC #BALL_HALF_SIZE
0C1A6 85 30                         STA ball_center
0C1A8 18                            CLC
0C1A9 69 04                         ADC #BALL_HALF_SIZE
0C1AB 85 31                         STA ball_right
0C1AD                           
0C1AD                               ;; Get ball's y-top, y-middle, y-bottom position
0C1AD A5 19                         LDA ball_ypos_hi
0C1AF 18                            CLC
0C1B0 69 D0                         ADC #BALL_TOP_WGA
0C1B2 85 32                         STA ball_top
0C1B4 18                            CLC
0C1B5 69 04                         ADC #BALL_HALF_SIZE
0C1B7 85 33                         STA ball_middle
0C1B9 18                            CLC
0C1BA 69 04                         ADC #BALL_HALF_SIZE
0C1BC 85 34                         STA ball_bottom
0C1BE                           
0C1BE                           +checkRightCollision:
0C1BE                               ;; Check if ball moves right
0C1BE                               ;; No need to check nudging here as that will never collide with a tile
0C1BE A5 0F                         LDA buttons_held
0C1C0 29 01                         AND #BUTTON_RIGHT
0C1C2 F0 20                         BEQ +checkLeftCollision
0C1C4                           
0C1C4                               ;; Check tile at right position
0C1C4 A5 33                         LDA ball_middle
0C1C6 85 00                         STA temp
0C1C8 A5 31                         LDA ball_right
0C1CA 85 01                         STA temp+1
0C1CC 20 75 C6                      JSR sub_ConvertXYToTileType
0C1CF 29 01                         AND #TILE_IS_SOLID
0C1D1 F0 34                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C1D3                           
0C1D3                               ;; Nudge ball and evaluate tile type
0C1D3 A9 01                         LDA #$01
0C1D5 85 36                         STA move_block_space_to_check
0C1D7 A5 37                         LDA ball_flags
0C1D9 29 FD                         AND #NUDGE_BALL_LEFT
0C1DB 20 C6 C9                      JSR sub_InitiateNudge
0C1DE 20 03 C8                      JSR sub_EvaluateTileType
0C1E1 4C 07 C2                      JMP +checkTopCollision
0C1E4                           
0C1E4                           +checkLeftCollision:
0C1E4                               ;; Check if ball moves right
0C1E4                               ;; No need to check nudging here as that will never collide with a tile
0C1E4 A5 0F                         LDA buttons_held
0C1E6 29 02                         AND #BUTTON_LEFT
0C1E8 F0 1D                         BEQ +checkTopCollision
0C1EA                           
0C1EA                               ;; Check tile at right position
0C1EA A5 33                         LDA ball_middle
0C1EC 85 00                         STA temp
0C1EE A5 2F                         LDA ball_left
0C1F0 85 01                         STA temp+1
0C1F2 20 75 C6                      JSR sub_ConvertXYToTileType
0C1F5 29 01                         AND #TILE_IS_SOLID
0C1F7 F0 0E                         BEQ +checkTopCollision
0C1F9                           
0C1F9                               ;; Tile is solid; nudge ball and evaluate tile type
0C1F9 A9 FF                         LDA #$FF
0C1FB 85 36                         STA move_block_space_to_check
0C1FD A5 37                         LDA ball_flags
0C1FF 09 02                         ORA #NUDGE_BALL_RIGHT
0C201 20 C6 C9                      JSR sub_InitiateNudge
0C204 20 03 C8                      JSR sub_EvaluateTileType
0C207                               
0C207                               
0C207                           +checkTopCollision:
0C207                               ;; Check if ball moves up
0C207 A5 37                         LDA ball_flags
0C209 29 10                         AND #BALL_MOVES_DOWN
0C20B D0 27                         BNE +checkBottomCollision
0C20D                           
0C20D                               ;; Check tile at top position
0C20D A5 32                         LDA ball_top
0C20F 85 00                         STA temp
0C211 A5 30                         LDA ball_center
0C213 85 01                         STA temp+1
0C215 20 75 C6                      JSR sub_ConvertXYToTileType
0C218 29 01                         AND #TILE_IS_SOLID
0C21A F0 3C                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C21C                           
0C21C                               ;; Tile is solid; move ball down and evaluate tile type
0C21C A5 1C                         LDA ball_ypos_lo_prev
0C21E 85 1A                         STA ball_ypos_lo
0C220 A5 1B                         LDA ball_ypos_hi_prev
0C222 85 19                         STA ball_ypos_hi
0C224 A5 37                         LDA ball_flags
0C226 09 10                         ORA #MOVE_BALL_DOWN
0C228 85 37                         STA ball_flags
0C22A                           
0C22A A9 F0                         LDA #$F0 ; which is -16
0C22C 85 36                         STA move_block_space_to_check
0C22E 20 03 C8                      JSR sub_EvaluateTileType
0C231 4C 58 C2                      JMP +doneCheckingCollision
0C234                           
0C234                           +checkBottomCollision:
0C234                               ;; No movement check needed: since ball is not moving up, it must move down
0C234                           
0C234                               ;; Check tile at bottom position
0C234 A5 34                         LDA ball_bottom
0C236 85 00                         STA temp
0C238 A5 30                         LDA ball_center
0C23A 85 01                         STA temp+1
0C23C 20 75 C6                      JSR sub_ConvertXYToTileType
0C23F 29 01                         AND #TILE_IS_SOLID
0C241 F0 15                         BEQ +doneCheckingCollision
0C243                           
0C243                               ;; Tile is solid; move ball up and evaluate tile type
0C243 A5 1C                         LDA ball_ypos_lo_prev
0C245 85 1A                         STA ball_ypos_lo
0C247 A5 1B                         LDA ball_ypos_hi_prev
0C249 85 19                         STA ball_ypos_hi
0C24B A5 37                         LDA ball_flags
0C24D 29 EF                         AND #MOVE_BALL_UP
0C24F 85 37                         STA ball_flags
0C251                           
0C251 A9 10                         LDA #$10
0C253 85 36                         STA move_block_space_to_check
0C255 20 03 C8                      JSR sub_EvaluateTileType
0C258                           
0C258                           +doneCheckingCollision:
0C258                           
0C258                               
0C258                               ;; Update bonus
0C258                               .include "game/include/main/update_bonus.asm"
0C258                           
0C258                           ;; Update the bonus counter on screen
0C258                           
0C258                               ;; If bonus = 000, skip decreasing
0C258 A5 2C                         LDA ball_bonus
0C25A 05 2D                         ORA ball_bonus+1
0C25C 05 2E                         ORA ball_bonus+2
0C25E F0 0D                         BEQ +done
0C260                           
0C260                               ;; Check if bonus timer is done yet
0C260 A5 3F                         LDA bonus_timer
0C262 D0 09                         BNE +done
0C264                           
0C264                               ;; Bonus timer is done
0C264                               ;; Reset bonus timer
0C264 A9 08                         LDA #BONUS_FRAMES
0C266 85 3F                         STA bonus_timer
0C268                               
0C268                               ;; Subtract one from ball bonus ones
0C268 A2 01                         LDX #$01
0C26A 20 7C D0                      JSR sub_SubtractXFromBonus
0C26D                           
0C26D                           +done:
0C26D                           
0C26D                           
0C26D                               ;; Check if self-destruct
0C26D A5 10                         LDA buttons_pressed
0C26F 29 20                         AND #BUTTON_SELECT
0C271 F0 03                         BEQ +
0C273 20 9D C8                          JSR sub_Selfdestruct
0C276                               +
0C276                           
0C276                           
0C276                           +skipBallMovement:
0C276                               ;; Move blocks a pixel up/down/left/right
0C276                               .include "game/include/main/move_blocks.asm"
0C276                           
0C276                               ;; Set up block loop
0C276 A2 04                         LDX #MAX_ANIMATIONS
0C278                           -moveBlocksLoop:
0C278 CA                            DEX
0C279                           
0C279                               ;; Check if block is still moving
0C279 BD 80 03                      LDA move_block_timer,x
0C27C F0 33                         BEQ +checkNext
0C27E                               
0C27E                               ;; Check if block is done moving
0C27E C9 01                         CMP #$01
0C280 D0 0B                         BNE +
0C282                                   ;; If so, draw a tile and remove the sprite
0C282 20 CE C6                          JSR sub_DrawMoveTile
0C285 A9 00                             LDA #$00
0C287 9D 80 03                          STA move_block_timer,x
0C28A 4C B1 C2                          JMP +checkNext
0C28D                               +
0C28D                               
0C28D                               ;; Check in which direction the block is moving
0C28D                               ;; 0 = down, 1 = up, 2 = right, 3 = left
0C28D BD 88 03                      LDA move_block_flags,x
0C290 29 03                         AND #%00000011
0C292 F0 14                         BEQ +movingDown
0C294 C9 01                         CMP #$01
0C296 F0 0A                         BEQ +movingUp
0C298 C9 02                         CMP #$02
0C29A F0 12                         BEQ +movingRight
0C29C                               
0C29C                               ;; Move block in correct direction
0C29C                               +movingLeft:
0C29C DE 78 03                      DEC move_block_x,x
0C29F 4C B1 C2                      JMP +checkNext
0C2A2                           
0C2A2                               +movingUp:
0C2A2 DE 7C 03                      DEC move_block_y,x
0C2A5 4C B1 C2                      JMP +checkNext
0C2A8                           
0C2A8                               +movingDown:
0C2A8 FE 7C 03                      INC move_block_y,x
0C2AB 4C B1 C2                      JMP +checkNext
0C2AE                           
0C2AE                               +movingRight:
0C2AE FE 78 03                      INC move_block_x,x
0C2B1                           
0C2B1                               ;; Check next block (if any left)
0C2B1                               +checkNext:
0C2B1 E0 00                         CPX #$00
0C2B3 D0 C3                         BNE -moveBlocksLoop
0C2B5                               
0C2B5                               ;; Don't update sprites
0C2B5 E6 35                         INC sprites_update_position
0C2B7                           
0C2B7                           
0C2B7                           +skipSpriteMovement:
0C2B7                               ;; Testing timed PPU scroll concept (disabled)
0C2B7                               ;; .include "game/test/timed_ppuscroll_test.asm"
0C2B7                           
0C2B7                               ;; Check if ball is dead
0C2B7 A5 37                         LDA ball_flags
0C2B9 29 01                         AND #BALL_IS_DEAD
0C2BB F0 03                         BEQ +
0C2BD 4C DF C2                          JMP +ballIsDead
0C2C0                               +
0C2C0                               
0C2C0                               ;; Add ball to sprite buffer
0C2C0 A6 3D                         LDX sprite_ram_pointer
0C2C2 A5 19                         LDA ball_ypos_hi
0C2C4 9D 00 02                      STA ADDR_SPRITERAM,x
0C2C7 E8                            INX
0C2C8 A9 01                         LDA #BALL_TILE_CHR
0C2CA 9D 00 02                      STA ADDR_SPRITERAM,x
0C2CD E8                            INX
0C2CE A9 00                         LDA #BALL_ATTR
0C2D0 9D 00 02                      STA ADDR_SPRITERAM,x
0C2D3 E8                            INX
0C2D4 A5 17                         LDA ball_xpos_hi
0C2D6 9D 00 02                      STA ADDR_SPRITERAM,x
0C2D9 E8                            INX
0C2DA 86 3D                         STX sprite_ram_pointer
0C2DC 4C F0 C2                      JMP +drawBlocks
0C2DF                           
0C2DF                           +ballIsDead:
0C2DF                               ;; Check if kill timer has reset
0C2DF A5 40                         LDA kill_timer
0C2E1 F0 03                         BEQ +
0C2E3 4C F0 C2                          JMP +drawBlocks
0C2E6                               +
0C2E6                               
0C2E6                               ;; Take a live
0C2E6 C6 1F                         DEC ball_lives
0C2E8 D0 03                         BNE +
0C2EA                                   ;; If no lives left, initiate game over sequence
0C2EA 4C A3 C3                          JMP lbl_GameOver
0C2ED                               +
0C2ED                               
0C2ED                               ;; Reload current level
0C2ED 4C BA C4                      JMP lbl_InitiateLevelLoad
0C2F0                           
0C2F0                           
0C2F0                           +drawBlocks:
0C2F0                               ;; Draw moving block(s, if any)
0C2F0                               .include "game/include/main/draw_blocks.asm"
0C2F0                           
0C2F0                           ;; Handle movement of move blocks
0C2F0                           
0C2F0                               ;; Set up a loop
0C2F0 A0 04                         LDY #MAX_ANIMATIONS
0C2F2                           -drawBlocksLoop:
0C2F2 88                            DEY
0C2F3                           
0C2F3                               ;; If timer is zero, check the next move block
0C2F3 B9 80 03                      LDA move_block_timer,y
0C2F6 F0 52                         BEQ +nextMoveBlock
0C2F8                               
0C2F8                               ;; Get current sprite pointer
0C2F8 A6 3D                         LDX sprite_ram_pointer
0C2FA                           
0C2FA                               ;; Draw the sprites on screen
0C2FA B9 7C 03                      LDA move_block_y,y
0C2FD 9D 00 02                      STA ADDR_SPRITERAM,x
0C300 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C303 18                            CLC
0C304 69 08                         ADC #$08
0C306 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C309 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C30C E8                            INX
0C30D                           
0C30D A9 52                         LDA #$52 ; Top left chr id
0C30F 9D 00 02                      STA ADDR_SPRITERAM,x
0C312 A9 53                         LDA #$53 ; Top right chr id
0C314 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C317 A9 62                         LDA #$62 ; Bottom left chr id
0C319 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C31C A9 63                         LDA #$63 ; Bottom right chr id
0C31E 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C321 E8                            INX
0C322                           
0C322 A9 00                         LDA #BALL_ATTR
0C324 9D 00 02                      STA ADDR_SPRITERAM,x
0C327 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C32A 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C32D 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C330 E8                            INX
0C331                           
0C331 B9 78 03                      LDA move_block_x,y
0C334 9D 00 02                      STA ADDR_SPRITERAM,x
0C337 9D 08 02                      STA ADDR_SPRITERAM+8,x
0C33A 18                            CLC
0C33B 69 08                         ADC #$08
0C33D 9D 04 02                      STA ADDR_SPRITERAM+4,x
0C340 9D 0C 02                      STA ADDR_SPRITERAM+12,x
0C343                           
0C343                               ;; Update sprite RAM pointer
0C343 A5 3D                         LDA sprite_ram_pointer
0C345 18                            CLC
0C346 69 10                         ADC #$10
0C348 85 3D                         STA sprite_ram_pointer
0C34A                           
0C34A                           
0C34A                           
0C34A                           +nextMoveBlock:
0C34A                               ;; Check the next move block
0C34A C0 00                         CPY #$00
0C34C D0 A4                         BNE -drawBlocksLoop
0C34E                           
0C34E 4C 9D C3                      JMP +doneScreenLoad
0C351                           
0C351                           
0C351                           
0C351                           +checkNextScreen:
0C351                           
0C351                               ;; Upon pressing LEFT or RIGHT, increment the level number with 4
0C351                               ;; Upon pressing START, the selected level will start
0C351                               .include "game/include/main/select_level.asm"
0C351                           
0C351                               ;; Change level number on start screen
0C351 A5 10                         LDA buttons_pressed
0C353 29 03                         AND #BUTTON_LEFT | #BUTTON_RIGHT
0C355 F0 3C                         BEQ +checkStartPress
0C357                           
0C357                                   ;; Select next level (1, 5, 9, 13, 17)
0C357 A5 42                             LDA current_level
0C359 18                                CLC
0C35A 69 04                             ADC #$04
0C35C C9 14                             CMP #$14
0C35E D0 02                             BNE +
0C360 A9 00                                 LDA #$00
0C362                                   +
0C362 85 42                             STA current_level
0C364                                   
0C364                                   ;; Convert level number to two-byte value
0C364 A9 00                             LDA #$00
0C366 85 03                             STA temp+3
0C368 A5 42                             LDA current_level
0C36A 18                                CLC
0C36B 69 01                             ADC #$01
0C36D                           
0C36D                               -
0C36D C9 0A                             CMP #$0A
0C36F 90 08                             BCC +
0C371 E6 03                                 INC temp+3
0C373 38                                    SEC
0C374 E9 0A                                 SBC #$0A
0C376 4C 6D C3                              JMP -
0C379                                   +
0C379                           
0C379                                   ;; Add level number to PPU buffer
0C379 18                                CLC
0C37A 69 01                             ADC #$01
0C37C 85 02                             STA temp+2
0C37E A9 20                             LDA #$20
0C380 85 00                             STA temp
0C382 A9 D0                             LDA #$D0
0C384 85 01                             STA temp+1
0C386 20 CB D0                          JSR sub_WriteByteToPPUBuffer
0C389                                   
0C389 C6 01                             DEC temp+1
0C38B A4 03                             LDY temp+3
0C38D C8                                INY
0C38E 84 02                             STY temp+2
0C390 20 CB D0                          JSR sub_WriteByteToPPUBuffer
0C393                                   
0C393                               +checkStartPress:
0C393                           
0C393                           
0C393                           
0C393                               ;; If START button is pressed
0C393 A5 10                         LDA buttons_pressed
0C395 29 10                         AND #BUTTON_START
0C397 F0 04                         BEQ +
0C399                                   ;; Start the level
0C399 A9 81                             LDA #LOAD_GAME_SCREEN
0C39B 85 38                             STA screen_mode
0C39D                               +
0C39D                           
0C39D                           
0C39D                           
0C39D                           +doneScreenLoad:
0C39D                           
0C39D                               ;; Load animations (if any)
0C39D                               ;; and sprite clean-up
0C39D 20 D0 C9                      JSR sub_LoadAnimations
0C3A0                           
0C3A0 4C 69 C0                      JMP lbl_MainGameLoop
0C3A3                           
0C3A3                           ;; Following sequences are outside main game loop
0C3A3                           .include "game/include/main/game_over.asm"
0C3A3                           
0C3A3                           ;; Game over sequence
0C3A3                           lbl_GameOver:
0C3A3                           
0C3A3                               ;; Disable noise channel
0C3A3 A9 00                         LDA #$00
0C3A5 8D 15 40                      STA APU_STATUS
0C3A8 8D 0C 40                      STA NOISE_VOLUME
0C3AB                               
0C3AB                               ;; Do blinds effect
0C3AB 20 7C C5                      JSR sub_BlindsEffect
0C3AE                           
0C3AE                               ;; Disable draw after HUD to disable screen
0C3AE 20 01 C5                      JSR sub_WaitForNMI
0C3B1                               -
0C3B1 AD 02 20                          LDA PPU_STATUS
0C3B4 29 40                             AND #SPRITE_0_HIT
0C3B6 D0 F9                         BNE -
0C3B8                               -
0C3B8 AD 02 20                          LDA PPU_STATUS
0C3BB 29 40                             AND #SPRITE_0_HIT
0C3BD F0 F9                         BEQ -
0C3BF A9 00                         LDA #$00
0C3C1 8D 01 20                      STA PPU_MASK
0C3C4                           
0C3C4                               ;; Remove game area from view
0C3C4 2C 02 20                      BIT PPU_STATUS
0C3C7 A9 20                         LDA #$20
0C3C9 8D 06 20                      STA PPU_ADDR
0C3CC A9 A0                         LDA #$A0
0C3CE 8D 06 20                      STA PPU_ADDR
0C3D1 A9 00                         LDA #$00
0C3D3 A2 16                         LDX #$16
0C3D5                               -xLoop:
0C3D5 A0 20                             LDY #$20
0C3D7                                   -yLoop:
0C3D7 8D 07 20                              STA PPU_DATA
0C3DA 88                                    DEY
0C3DB D0 FA                             BNE -yLoop
0C3DD CA                                DEX
0C3DE D0 F5                         BNE -xLoop
0C3E0                               
0C3E0                               ;; Pause for a little while
0C3E0 A2 18                         LDX #$18
0C3E2                               -
0C3E2 20 01 C5                          JSR sub_WaitForNMI
0C3E5 CA                                DEX
0C3E6 D0 FA                         BNE -
0C3E8                                       
0C3E8                               ;; Do flash effect
0C3E8 20 79 C9                      JSR sub_FlashEffect
0C3EB                           
0C3EB                               ;; Draw GAME OVER tiles over game screen
0C3EB A9 21                         LDA #$21
0C3ED 85 00                         STA temp
0C3EF A9 EB                         LDA #$EB
0C3F1 85 01                         STA temp+1
0C3F3                           
0C3F3 A2 00                         LDX #$00
0C3F5                               -gameOverTileLoop:
0C3F5 BD F1 D9                          LDA tbl_GameOver,x
0C3F8 85 02                             STA temp+2
0C3FA 20 CB D0                          JSR sub_WriteByteToPPUBuffer
0C3FD E6 01                             INC temp+1
0C3FF E8                                INX
0C400 E0 0A                             CPX #$0A
0C402 D0 F1                         BNE -gameOverTileLoop
0C404                               
0C404                               ;; Update GAME OVER attributes on game screen
0C404 A9 23                         LDA #$23
0C406 85 00                         STA temp
0C408 A9 DA                         LDA #$DA
0C40A 85 01                         STA temp+1
0C40C A9 AA                         LDA #$AA
0C40E 85 02                         STA temp+2
0C410 A2 04                         LDX #$04
0C412                               -
0C412 20 CB D0                          JSR sub_WriteByteToPPUBuffer
0C415 E6 01                             INC temp+1
0C417 CA                                DEX
0C418 D0 F8                         BNE -
0C41A 20 01 C5                      JSR sub_WaitForNMI
0C41D                               
0C41D                              
0C41D                               ;; If player score is larger than high score
0C41D                               ;; Overwrite high score with player score
0C41D                               ;; [@TODO]
0C41D                               
0C41D                               
0C41D                               ;; If player presses either A or START, (soft) reset the game
0C41D                               -checkController:
0C41D 20 ED C4                          JSR sub_ReadController
0C420 A5 0F                             LDA buttons_held
0C422 29 90                             AND #%10010000
0C424 F0 F7                         BEQ -checkController
0C426 4C 4B C0                      JMP lbl_SoftReset
0C429                           
0C429                           .include "game/include/main/level_win.asm"
0C429                           
0C429                           ;; Handling of level win state
0C429                           lbl_LevelWin:
0C429                           
0C429                               ;; Freeze the ball
0C429 A5 37                         LDA ball_flags
0C42B 09 04                         ORA #FREEZE_BALL
0C42D 85 37                         STA ball_flags
0C42F                           
0C42F                               ;; Disable noise channel
0C42F A9 01                         LDA #$01
0C431 85 4B                         STA noise_muted
0C433                               
0C433                               ;; Wait a few frames
0C433 A2 18                         LDX #$18
0C435 20 B9 D0                      JSR sub_WaitXFrames
0C438                           
0C438                               ;; Set null tile color to yellow
0C438 A9 3F                         LDA #$3F
0C43A 85 00                         STA temp
0C43C A9 02                         LDA #$02
0C43E 85 01                         STA temp+1
0C440 A9 38                         LDA #$38
0C442 85 02                         STA temp+2
0C444 20 CB D0                      JSR sub_WriteByteToPPUBuffer
0C447                               
0C447                               ;; Quick and dirty way to remove ball from screen
0C447 A9 EF                         LDA #$EF
0C449 8D 04 02                      STA ADDR_SPRITERAM+4
0C44C 8D 05 02                      STA ADDR_SPRITERAM+5
0C44F 8D 06 02                      STA ADDR_SPRITERAM+6
0C452 8D 07 02                      STA ADDR_SPRITERAM+7
0C455                               
0C455                               ;; Initiate frequency beeps (@TODO)
0C455                               
0C455                               ;; Wait a few frames
0C455 A2 10                         LDX #$10
0C457 20 B9 D0                      JSR sub_WaitXFrames
0C45A                               
0C45A                               ;; Restore null tile color to dark blue
0C45A A9 3F                         LDA #$3F
0C45C 85 00                         STA temp
0C45E A9 02                         LDA #$02
0C460 85 01                         STA temp+1
0C462 A9 12                         LDA #$12
0C464 85 02                         STA temp+2
0C466 20 CB D0                      JSR sub_WriteByteToPPUBuffer
0C469                           
0C469                               ;; Wait a few frames
0C469 A2 2D                         LDX #$2D
0C46B 20 B9 D0                      JSR sub_WaitXFrames
0C46E                               
0C46E                           
0C46E                               ;; Play the end level sweep sound effect, and
0C46E                               ;; initiate bonus score routine
0C46E A9 B8                         LDA #$B8
0C470 85 4A                         STA soft_pulse1
0C472                           
0C472 A9 01                         LDA #$01
0C474 8D 15 40                      STA APU_STATUS
0C477 85 49                         STA do_beeps
0C479                           
0C479                               -bonusPointsLoop:
0C479                                   ;; Check how many bonus points to subtract
0C479                                   ;; (either the max, or what's left)
0C479 A5 2C                             LDA ball_bonus
0C47B 05 2D                             ORA ball_bonus+1
0C47D D0 06                             BNE +fullBonus
0C47F A5 2E                             LDA ball_bonus+2
0C481 C9 09                             CMP #BONUS_COUNTDOWN_PER_FRAME
0C483 90 02                             BCC +partBonus
0C485                           
0C485                                   +fullBonus:
0C485 A9 09                             LDA #BONUS_COUNTDOWN_PER_FRAME
0C487                                   +partBonus:
0C487                           
0C487                                   ;; Put value that's added to score on the stack
0C487 AA                                TAX
0C488 BD 4D DA                          LDA tbl_BonusToScore,x
0C48B 48                                PHA
0C48C                           
0C48C                                   ;; Subtract X-register from bonus
0C48C 20 7C D0                          JSR sub_SubtractXFromBonus
0C48F                           
0C48F                                   ;; Get value from stack and add it to the score
0C48F 68                                PLA
0C490 20 10 C5                          JSR sub_AddAccumulatorToScore
0C493                           
0C493                                   ;; Wait for NMI twice
0C493 20 01 C5                          JSR sub_WaitForNMI
0C496 20 01 C5                          JSR sub_WaitForNMI
0C499                           
0C499                                   ;; Check if bonus countdown is done
0C499 A5 2C                             LDA ball_bonus
0C49B 05 2D                             ORA ball_bonus+1
0C49D 05 2E                             ORA ball_bonus+2
0C49F D0 D8                         BNE -bonusPointsLoop
0C4A1                           
0C4A1                               ;; fade out the beeping
0C4A1 A2 08                         LDX #$08
0C4A3                               -fadeOutLoop:
0C4A3 20 01 C5                          JSR sub_WaitForNMI
0C4A6 20 01 C5                          JSR sub_WaitForNMI
0C4A9 C6 4A                             DEC soft_pulse1
0C4AB CA                                DEX
0C4AC D0 F5                         BNE -fadeOutLoop
0C4AE                           
0C4AE                               ;; Stop random beeping
0C4AE A9 02                         LDA #$02
0C4B0 85 49                         STA do_beeps
0C4B2                               
0C4B2                               ;; Wait a few frames
0C4B2 A2 30                         LDX #$30
0C4B4 20 B9 D0                      JSR sub_WaitXFrames
0C4B7                           
0C4B7                               ;; Load next level
0C4B7 4C BA C4                      JMP lbl_InitiateLevelLoad
0C4BA                               
0C4BA                           .include "game/include/main/initiate_level_load.asm"
0C4BA                           
0C4BA                           ;; Load level
0C4BA                           lbl_InitiateLevelLoad:
0C4BA                               
0C4BA                               ;; Blind out the screen
0C4BA 20 7C C5                      JSR sub_BlindsEffect
0C4BD                               
0C4BD                               ;; If ball is dead, (re)load current level
0C4BD                               ;; If ball is alive, load next level
0C4BD A5 37                         LDA ball_flags
0C4BF 29 01                         AND #BALL_IS_DEAD
0C4C1 D0 05                         BNE +
0C4C3 E6 42                             INC current_level
0C4C5 4C CE C4                          JMP +loadLevel
0C4C8                               +
0C4C8                               
0C4C8                               ;; Revive ball
0C4C8 A5 37                         LDA ball_flags
0C4CA 29 FE                         AND #REVIVE_BALL
0C4CC 85 37                         STA ball_flags
0C4CE                           
0C4CE                           +loadLevel:
0C4CE                               ;; This loops back to level 1 after level 25 for now,
0C4CE                               ;; as a proper game ending is yet to be introduced.
0C4CE A5 42                         LDA current_level
0C4D0 C9 19                         CMP #25
0C4D2 D0 04                         BNE +
0C4D4 A9 00                             LDA #$00
0C4D6 85 42                             STA current_level
0C4D8                               +
0C4D8                               
0C4D8                               ;; Tell the game to load the level screen on the next loop.
0C4D8 A9 81                         LDA #LOAD_GAME_SCREEN
0C4DA 85 38                         STA screen_mode
0C4DC                           
0C4DC                               ;; Jump to the beginning of the loop, instantly starting screen drawing
0C4DC 4C 69 C0                      JMP lbl_MainGameLoop0C4DF                           
0C4DF                           
0C4DF                           ;; Subroutines
0C4DF                           .include "include/subroutines.asm"
0C4DF                           
0C4DF                           ;; RNG
0C4DF                           .include "subroutine/GetRandomNumber.asm"
0C4DF                           
0C4DF                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4DF                           ;;
0C4DF                           ;; subroutine/GetRandomNumber.asm
0C4DF                           ;;
0C4DF                           ;; Simple and fast random number generator by White Flame.
0C4DF                           ;;
0C4DF                           ;; Set random_seed to an arbitrary number to randomize between
0C4DF                           ;; gaming sessions, for instance using the frame timer upon
0C4DF                           ;; pressing START on the intro screen.
0C4DF                           ;;
0C4DF                           ;;     ;; IF START PRESSED:
0C4DF                           ;;     LDA frame_counter
0C4DF                           ;;     STA random_seed
0C4DF                           ;;
0C4DF                           ;; Source:
0C4DF                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C4DF                           ;;
0C4DF                           ;;
0C4DF                           
0C4DF                           sub_GetRandomNumber:
0C4DF                               ;; Force EOR if random_seed is zero
0C4DF A5 16                         LDA random_seed
0C4E1 F0 05                         BEQ +doEor
0C4E3                           
0C4E3                               ;; Shift left, and EOR if the high bit is set
0C4E3 0A                            ASL
0C4E4 F0 04                         BEQ +noEor
0C4E6 90 02                         BCC +noEor
0C4E8                           
0C4E8                           +doEor:
0C4E8 49 1D                         EOR #$1D
0C4EA                           
0C4EA                           +noEor:
0C4EA 85 16                         STA random_seed
0C4EC                           
0C4EC 60                            RTS
0C4ED                           
0C4ED                           
0C4ED                           ;; Read controller input
0C4ED                           .include "subroutine/ReadController.asm"
0C4ED                           
0C4ED                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C4ED                           ;;
0C4ED                           ;; subroutine/ReadController.asm
0C4ED                           ;;
0C4ED                           ;; Subroutine that polls the controller and stores the input
0C4ED                           ;; buttons in a variable. This version only handles controller
0C4ED                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C4ED                           ;;
0C4ED                           ;;
0C4ED                           
0C4ED                           sub_ReadController:
0C4ED                           
0C4ED                               ;; Set strobe bit
0C4ED A9 01                         LDA #$01
0C4EF 8D 16 40                      STA JOYPAD_1
0C4F2                           
0C4F2                               ;; Set up ring timer
0C4F2 85 0F                         STA buttons_held
0C4F4                           
0C4F4                               ;; Clear strobe bit
0C4F4 4A                            LSR
0C4F5 8D 16 40                      STA JOYPAD_1
0C4F8                           
0C4F8                               ;; Loop through button presses
0C4F8                               -
0C4F8 AD 16 40                          LDA JOYPAD_1
0C4FB 4A                                LSR
0C4FC 26 0F                             ROL buttons_held
0C4FE                           
0C4FE                               ;; Check if ring timer is done
0C4FE 90 F8                         BCC -
0C500                           
0C500                               ;; Return from subroutine
0C500 60                            RTS
0C501                           
0C501                           
0C501                           ;; vBlank/NMI wait
0C501                           .include "subroutine/WaitForNMI.asm"
0C501                           
0C501                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C501                           ;;
0C501                           ;; subroutine/WaitForVBlank.asm
0C501                           ;;
0C501                           ;; Subroutine that essentially pauses script execution until
0C501                           ;; vBlank happens.
0C501                           ;;
0C501                           ;;
0C501                           
0C501                           sub_WaitForNMI:
0C501 A9 01                         LDA #$01
0C503 85 4F                         STA check_nmi
0C505                               -
0C505 A5 4F                             LDA check_nmi
0C507 D0 FC                         BNE -
0C509 60                            RTS
0C50A                           
0C50A                           .include "subroutine/WaitForVBlank.asm"
0C50A                           
0C50A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C50A                           ;;
0C50A                           ;; subroutine/WaitForVBlank.asm
0C50A                           ;;
0C50A                           ;; Subroutine that essentially pauses script execution until
0C50A                           ;; vBlank happens.
0C50A                           ;;
0C50A                           ;;
0C50A                           
0C50A                           sub_WaitForVBlank:
0C50A 2C 02 20                      BIT $2002
0C50D 10 FB                         BPL sub_WaitForVBlank
0C50F 60                            RTS
0C510                           
0C510                           
0C510                           ;; Game specific subroutines
0C510                           .include "game/include/subroutines.asm"
0C510                           
0C510                           ;; additional game-specific subroutines go here
0C510                           
0C510                           .include "game/subroutine/AddAccumulatorToScore.asm"
0C510                           
0C510                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C510                           ;;
0C510                           ;;  sub_AddAccumulatorToScore.asm
0C510                           ;;
0C510                           ;;  Take the accumulator, convert it to decimals, store those in a six-digit
0C510                           ;;  value called add_to_score. Then, byte for byte, add this value to the
0C510                           ;;  actual score.
0C510                           ;;
0C510                           ;;
0C510                           
0C510                           
0C510                           sub_AddAccumulatorToScore:
0C510                           
0C510                               ;; Clear old add_to_score
0C510 A2 05                         LDX #$05
0C512 A0 00                         LDY #$00
0C514                               -
0C514 94 26                             STY add_to_score,x
0C516 CA                                DEX
0C517 10 FB                         BPL -
0C519                           
0C519                               ;; Set accumulator to add_to_score variables
0C519                               ;; Check and update 100s
0C519                               -checkHundreds:
0C519 C9 64                             CMP #100
0C51B 90 08                             BCC +checkTens
0C51D 38                                    SEC
0C51E E9 64                                 SBC #100
0C520 E6 29                                 INC add_to_score+3
0C522 4C 19 C5                              JMP -checkHundreds
0C525                                   +checkTens:
0C525                           
0C525                               ;; Check and update 10s
0C525                               -checkTens:
0C525 C9 0A                             CMP #10
0C527 90 08                             BCC +setOnes
0C529 38                                    SEC
0C52A E9 0A                                 SBC #10
0C52C E6 2A                                 INC add_to_score+4
0C52E 4C 25 C5                              JMP -checkTens
0C531                                   +setOnes:
0C531                           
0C531                               ;; We're left with 1s
0C531 85 2B                         STA add_to_score+5
0C533                           
0C533                               ;; Byte for byte, add add_to_score to ball_score
0C533 A9 00                         LDA #$00
0C535 85 39                         STA ppu_buffer_update
0C537 A4 3A                         LDY ppu_buffer_pointer
0C539 A2 05                         LDX #$05
0C53B                               -
0C53B B5 26                             LDA add_to_score,x
0C53D 18                                CLC
0C53E 75 20                             ADC ball_score,x
0C540 C9 0A                             CMP #10
0C542 90 05                             BCC +
0C544 38                                    SEC
0C545 E9 0A                                 SBC #10
0C547 F6 1F                                 INC ball_score-1,x
0C549                                   +
0C549                                   
0C549                                   ;; Update new score digit
0C549 95 20                             STA ball_score,x
0C54B                           
0C54B                                   ;; Update score tile in PPU
0C54B A9 20                             LDA #$20
0C54D 99 00 03                          STA ppu_buffer,y
0C550 C8                                INY
0C551 8A                                TXA
0C552 18                                CLC
0C553 69 83                             ADC #$83
0C555 99 00 03                          STA ppu_buffer,y
0C558 C8                                INY
0C559 B5 20                             LDA ball_score,x
0C55B 18                                CLC
0C55C 69 01                             ADC #$01
0C55E 99 00 03                          STA ppu_buffer,y
0C561 C8                                INY
0C562                           
0C562                                   ;; Check next digit (if any left)
0C562 CA                                DEX
0C563 30 03                             BMI +done
0C565 4C 3B C5                      JMP -
0C568                           
0C568                           +done:
0C568                               ;; Update PPU buffer pointer and status
0C568 84 3A                         STY ppu_buffer_pointer
0C56A A9 01                         LDA #$01
0C56C 85 39                         STA ppu_buffer_update
0C56E                           
0C56E                               ;; Done: return 
0C56E 60                            RTS
0C56F                           
0C56F                           .include "game/subroutine/BackgroundNoise.asm"
0C56F                           
0C56F                           ;; Play background noise
0C56F                           sub_BackgroundNoise:
0C56F A9 32                         LDA #$32
0C571 8D 0C 40                      STA NOISE_VOLUME
0C574 A9 0E                         LDA #$0E
0C576 8D 0E 40                      STA NOISE_PERIOD
0C579 85 47                         STA current_noise
0C57B 60                            RTS
0C57C                           
0C57C                           .include "game/subroutine/BlindsEffect.asm"
0C57C                           
0C57C                           ;; Do the blinds effect (i.e. wipe the screen line by line)
0C57C                           sub_BlindsEffect:
0C57C                           
0C57C                               ;; Set up loop fading
0C57C A9 00                         LDA #$00
0C57E 85 07                         STA temp+7
0C580 A0 08                         LDY #$08
0C582                               -fadeLoop:
0C582 84 08                             STY temp+8
0C584                           
0C584                                   ;; Wait for NMI to pass
0C584 20 01 C5                          JSR sub_WaitForNMI
0C587                                   
0C587                                   ;; Now wait for No-sprite 0
0C587                                   -
0C587 AD 02 20                              LDA PPU_STATUS
0C58A 29 40                                 AND #SPRITE_0_HIT
0C58C D0 F9                             BNE -
0C58E                               
0C58E                                   ;; Now wait for Sprite 0
0C58E                                   -
0C58E AD 02 20                              LDA PPU_STATUS
0C591 29 40                                 AND #SPRITE_0_HIT
0C593 F0 F9                             BEQ -
0C595                                       
0C595                                   ;; Setup tile row loop
0C595 A0 16                             LDY #22
0C597                                   -tileLoop:
0C597                                   
0C597                                       ;; Disable drawing
0C597 A5 12                                 LDA soft_ppu_mask
0C599 29 F7                                 AND #%11110111
0C59B 8D 01 20                              STA PPU_MASK
0C59E                                       
0C59E                                       ;; Set up scanline loop
0C59E A2 08                                 LDX #$08
0C5A0                                       -scanlineLoop:
0C5A0 E4 08                                     CPX temp+8
0C5A2 D0 0A                                     BNE +wasteTime
0C5A4                                           
0C5A4                                           ;; Restore drawing
0C5A4 A5 12                                     LDA soft_ppu_mask
0C5A6 09 08                                     ORA #%00001000
0C5A8 8D 01 20                                  STA PPU_MASK
0C5AB 4C B4 C5                                  JMP +wasteMoreTime
0C5AE                           
0C5AE                                           ;; Waste 12 frames
0C5AE                                           +wasteTime:
0C5AE E6 09                                     INC temp+9   ;+5
0C5B0 C6 09                                     DEC temp+9   ;+5
0C5B2 49 00                                     EOR #$00     ;+2
0C5B4                                           
0C5B4                                           ;; Waste about 100 frames
0C5B4                                           +wasteMoreTime:
0C5B4                                           
0C5B4 86 01                                     STX temp+1     ;  3 down, 97 to go
0C5B6 A2 09                                     LDX #$09       ;  5 down, 95 to go
0C5B8                                           -wasteLoop:
0C5B8 EA                                            NOP
0C5B9 09 FF                                         ORA #$FF   ;  5+3L down,  95-3L to go
0C5BB CA                                            DEX        ;  5+5L down,  95-5L to go
0C5BC D0 FA                                     BNE -wasteLoop ;  4+8L down,  96-8L to go
0C5BE                           
0C5BE A6 01                                     LDX temp+1     ;  7+8L down, 93-8L to go
0C5C0 CA                                        DEX            ;  9+8L down, 91-8L to go
0C5C1 D0 DD                                 BNE -scanlineLoop  ; 12+8L down, 88-8L to go
0C5C3                           
0C5C3 88                                    DEY
0C5C4 D0 D1                             BNE -tileLoop
0C5C6                           
0C5C6 A4 08                             LDY temp+8
0C5C8                                   
0C5C8 E6 07                             INC temp+7
0C5CA A5 07                             LDA temp+7
0C5CC C9 02                             CMP #$02
0C5CE D0 B2                             BNE -fadeLoop
0C5D0                           
0C5D0 A9 00                             LDA #$00
0C5D2 85 07                             STA temp+7
0C5D4 88                                DEY
0C5D5 D0 AB                         BNE -fadeLoop
0C5D7                               
0C5D7 60                            RTS
0C5D8                           
0C5D8                           .include "game/subroutine/ClearScreen.asm"
0C5D8                           
0C5D8                           ;; Subroutine to clear the screen
0C5D8                           ;; If it's a game screen, add noise
0C5D8                           
0C5D8                           sub_ClearScreen:
0C5D8                               ;; Check of game screen or not
0C5D8 A5 38                         LDA screen_mode
0C5DA 29 03                         AND #CHECK_SCREEN_MODE
0C5DC C9 01                         CMP #IS_GAME_SCREEN
0C5DE F0 02                         BEQ +
0C5E0 A9 00                             LDA #$00
0C5E2                               +
0C5E2 85 01                         STA temp+1
0C5E4                               
0C5E4                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C5E4 2C 02 20                      BIT PPU_STATUS
0C5E7 A9 20                         LDA #$20
0C5E9 8D 06 20                      STA PPU_ADDR
0C5EC A9 00                         LDA #$00
0C5EE 8D 06 20                      STA PPU_ADDR
0C5F1                               
0C5F1                               ;; Set up tile to draw and loop
0C5F1 85 00                         STA temp
0C5F3 AA                            TAX
0C5F4 A8                            TAY
0C5F5                           
0C5F5                               -     
0C5F5                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C5F5 A5 00                             LDA temp
0C5F7 8D 07 20                          STA PPU_DATA
0C5FA                           
0C5FA                                   ;; Check if we should draw noise next. Noise is drawn if:
0C5FA                                   ;; - Screen mode is game screen
0C5FA                                   ;; - Y between #$06 and #$19 (inclusive)
0C5FA                                   ;; - X between #$02 and #$1D (inclusive)
0C5FA                                   
0C5FA                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C5FA A5 01                             LDA temp+1
0C5FC F0 1C                             BEQ +nextTileInRow
0C5FE                                   
0C5FE                                   ;; If Y < $6, skip the check
0C5FE C0 06                             CPY #$06
0C600 90 18                             BCC +nextTileInRow
0C602                                   
0C602                                   ;; If X < $1, skip the check
0C602 E0 01                             CPX #$01
0C604 90 14                             BCC +nextTileInRow
0C606                                   
0C606                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C606 E0 1D                             CPX #$1D
0C608 D0 04                             BNE +
0C60A A9 00                                 LDA #$00
0C60C 85 00                                 STA temp
0C60E                                   +
0C60E B0 0A                             BCS +nextTileInRow
0C610                                   
0C610                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C610 20 DF C4                          JSR sub_GetRandomNumber
0C613 29 07                             AND #%00000111
0C615 18                                CLC
0C616 69 68                             ADC #$68
0C618 85 00                             STA temp
0C61A                           
0C61A                           +nextTileInRow:
0C61A                                   
0C61A                                   ;; Check if a row has been done. If not, draw the next
0C61A E8                                INX
0C61B E0 20                             CPX #$20
0C61D D0 D6                             BNE -
0C61F                                   
0C61F                                   ;; Go to the next row (if any left)
0C61F A2 00                             LDX #00
0C621 C8                                INY
0C622                                   
0C622                                   ;; If Y is 1A, skip noise tile check until done drawing
0C622 C0 1A                             CPY #$1A
0C624 D0 04                             BNE +
0C626 A9 00                                 LDA #$00
0C628 85 01                                 STA temp+1
0C62A                                   +
0C62A                                   
0C62A C0 1E                             CPY #$1E
0C62C D0 C7                         BNE -
0C62E                           
0C62E                               ;; Clear attribute table
0C62E A9 23                         LDA #$23
0C630 8D 06 20                      STA PPU_ADDR
0C633 A9 C0                         LDA #$C0
0C635 8D 06 20                      STA PPU_ADDR
0C638 A9 00                         LDA #$00
0C63A A2 40                         LDX #$40
0C63C                               -
0C63C 8D 07 20                          STA PPU_DATA
0C63F CA                                DEX
0C640 D0 FA                         BNE -
0C642                               
0C642 60                            RTS
0C643                           
0C643                           .include "game/subroutine/ColorizeBall.asm"
0C643                           
0C643                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C643                           ;;
0C643                           ;;  Subroutine: ColorizeBall
0C643                           ;;
0C643                           ;;  Applies the color set through ball_flags to the ball sprite.
0C643                           ;;  Expects ball_flags to be in the accumulator
0C643                           ;;
0C643                           
0C643                           
0C643                           sub_ColorizeBall:
0C643                           
0C643                               ;; Get color from ball_flags
0C643 4A                            LSR
0C644 4A                            LSR
0C645 4A                            LSR
0C646 4A                            LSR
0C647 4A                            LSR
0C648 AA                            TAX
0C649                           
0C649                               ;; Add new light color of ball to PPU palette
0C649 A9 3F                         LDA #$3F
0C64B 85 00                         STA temp
0C64D A9 11                         LDA #$11
0C64F 85 01                         STA temp+1
0C651 BD 2F D2                      LDA tbl_BallColorLight,x
0C654 85 02                         STA temp+2
0C656 20 CB D0                      JSR sub_WriteByteToPPUBuffer
0C659                               
0C659                               ;; Add new dark color of ball to PPU palette
0C659 E6 01                         INC temp+1
0C65B BD 29 D2                      LDA tbl_BallColorDark,x
0C65E 85 02                         STA temp+2
0C660 20 CB D0                      JSR sub_WriteByteToPPUBuffer
0C663                               
0C663 60                            RTS
0C664                           
0C664                           .include "game/subroutine/ColorsMatch.asm"
0C664                           
0C664                           ;; Subroutine to check if ball color matches colliding tile color
0C664                           
0C664                           sub_ColorsMatch:
0C664                               ;; Save tile color in temp variable
0C664 A5 43                         LDA colliding_tile
0C666 29 0E                         AND #%00001110
0C668 85 00                         STA temp
0C66A                           
0C66A                               ;; Get ball color
0C66A A5 37                         LDA ball_flags
0C66C 29 E0                         AND #%11100000
0C66E 4A                            LSR
0C66F 4A                            LSR
0C670 4A                            LSR
0C671 4A                            LSR
0C672                           
0C672                               ;; Compare with tile color
0C672 C5 00                         CMP temp
0C674 60                            RTS
0C675                           
0C675                           .include "game/subroutine/ConvertXYToTileType.asm"
0C675                           
0C675                           ;; Subroutine to convert the ball's position to a tile type
0C675                           ;; - Expects temp to be y-position of ball within game area
0C675                           ;; - Expects temp+1 to be x-position of ball within game area
0C675                           ;; - Puts result in accumulator and zp variable
0C675                           ;; - Corrupts X-register
0C675                           
0C675                           sub_ConvertXYToTileType:
0C675 A5 01                         LDA temp+1
0C677 4A                            LSR
0C678 4A                            LSR
0C679 4A                            LSR
0C67A 4A                            LSR
0C67B 85 09                         STA temp+9
0C67D A5 00                         LDA temp
0C67F 29 F0                         AND #%11110000
0C681 18                            CLC
0C682 65 09                         ADC temp+9
0C684 85 09                         STA temp+9
0C686 AA                            TAX
0C687 BD 00 04                      LDA tile_type, x
0C68A 85 43                         STA colliding_tile
0C68C 60                            RTS
0C68D                           
0C68D                           .include "game/subroutine/DisableEnableRendering.asm"
0C68D                           
0C68D                           ;; Subroutines to disable or enable screen rendering
0C68D                           
0C68D                           sub_DisableRendering:
0C68D                               ;; Force NMI skip, disable rendering
0C68D A9 01                     	LDA #$01
0C68F 85 14                     	STA force_skip_nmi
0C691 20 0A C5                      JSR sub_WaitForVBlank
0C694 A5 12                         LDA soft_ppu_mask
0C696 29 E7                         AND #%11100111
0C698 8D 01 20                      STA PPU_MASK
0C69B 85 12                         STA soft_ppu_mask
0C69D 20 0A C5                      JSR sub_WaitForVBlank
0C6A0 60                            RTS
0C6A1                           
0C6A1                           sub_EnableRendering:
0C6A1                               ;; Enable rendering
0C6A1 A9 00                     	LDA #$00
0C6A3 8D 05 20                  	STA PPU_SCROLL
0C6A6 8D 05 20                  	STA PPU_SCROLL
0C6A9 20 0A C5                      JSR sub_WaitForVBlank
0C6AC 85 14                     	STA force_skip_nmi
0C6AE A5 12                         LDA soft_ppu_mask
0C6B0 09 18                         ORA #%00011000
0C6B2 85 12                         STA soft_ppu_mask
0C6B4 8D 01 20                      STA PPU_MASK
0C6B7 20 0A C5                      JSR sub_WaitForVBlank
0C6BA 60                            RTS
0C6BB                           
0C6BB                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C6BB                           
0C6BB                           ;; Draw a tile from the logo on the intro screen
0C6BB                           sub_drawIntroScreenLogoTile:
0C6BB B9 11 D1                      LDA tbl_IntroScreenLogoChr,y
0C6BE C9 60                         CMP #$60
0C6C0 D0 08                         BNE +
0C6C2 20 DF C4                          JSR sub_GetRandomNumber
0C6C5 29 07                             AND #$07
0C6C7 18                                CLC
0C6C8 69 60                             ADC #$60
0C6CA                               +
0C6CA 8D 07 20                      STA PPU_DATA
0C6CD 60                            RTS
0C6CE                           
0C6CE                           .include "game/subroutine/DrawMoveTile.asm"
0C6CE                           
0C6CE                           ;; Draw the move tile as follows:
0C6CE                           ;;
0C6CE                           ;;  1 2
0C6CE                           ;;  3 4 5
0C6CE                           ;;    6 7
0C6CE                           ;;
0C6CE                           ;; (1,2,3,4) is the move block itself
0C6CE                           ;; (5,6,7) are shades unless that tile is solid
0C6CE                           
0C6CE                           ;; X holds the move block sprite slot
0C6CE                           
0C6CE                           sub_DrawMoveTile:
0C6CE                           
0C6CE                               ;; Get tile type index from sprite x and y values
0C6CE                               ;; and store it in a temp variable
0C6CE BD 78 03                      LDA move_block_x,x
0C6D1 18                            CLC
0C6D2 69 F8                         ADC #MOVE_BLOCK_LEFT_WGA
0C6D4 4A                            LSR
0C6D5 4A                            LSR
0C6D6 4A                            LSR
0C6D7 4A                            LSR
0C6D8 85 09                         STA temp+9
0C6DA BD 7C 03                      LDA move_block_y,x
0C6DD 18                            CLC
0C6DE 69 D8                         ADC #MOVE_BLOCK_TOP_WGA
0C6E0 29 F0                         AND #%11110000
0C6E2 18                            CLC
0C6E3 65 09                         ADC temp+9
0C6E5 85 09                         STA temp+9
0C6E7 A8                            TAY
0C6E8                               
0C6E8                               ;; Add move tile data on the new tile location
0C6E8 BD 84 03                      LDA move_block_tile_type,x
0C6EB 99 00 04                      STA tile_type,y
0C6EE                           
0C6EE                               ;; Draw the original tile type in the ppu buffer
0C6EE                               ;; - get PPU address to write to (temp, temp+1)
0C6EE 8A                            TXA
0C6EF 48                            PHA
0C6F0 A6 09                         LDX temp+9
0C6F2 20 97 C9                      JSR sub_GetPPUAddrFromYXIndex
0C6F5 68                            PLA
0C6F6 AA                            TAX
0C6F7                               
0C6F7                               ;; - based on color, select tile 42 or 4A for top left
0C6F7 BD 88 03                      LDA move_block_flags,x
0C6FA 4A                            LSR
0C6FB 4A                            LSR
0C6FC 4A                            LSR
0C6FD 4A                            LSR
0C6FE 4A                            LSR
0C6FF A8                            TAY
0C700 B9 EA D9                      LDA tbl_MoveBlockTopLeftTile,y
0C703 85 08                         STA temp+8
0C705                               
0C705                               ;; - save palette ID in temp+6
0C705 98                            TYA
0C706 4A                            LSR
0C707 85 06                         STA temp+6
0C709                               
0C709                               ;; Prepare PPU buffer
0C709 A4 3A                         LDY ppu_buffer_pointer
0C70B A9 00                         LDA #$00
0C70D 85 39                         STA ppu_buffer_update
0C70F                               
0C70F                               ;; Draw tile 1 (top left tile of move block)
0C70F 20 F0 C7                      JSR sub_DrawTileTemp018
0C712                           
0C712                               
0C712                               ;; Draw tile 2 (top right tile of move block)
0C712 E6 01                         INC temp+1
0C714 E6 08                         INC temp+8
0C716 20 F0 C7                      JSR sub_DrawTileTemp018
0C719                           
0C719                               ;; Draw tile 3 (bottom left tile of move block)
0C719 A5 01                         LDA temp+1
0C71B 18                            CLC
0C71C 69 1F                         ADC #$1F
0C71E 85 01                         STA temp+1
0C720 A5 00                         LDA temp
0C722 69 00                         ADC #$00
0C724 85 00                         STA temp
0C726 A5 08                         LDA temp+8
0C728 18                            CLC
0C729 69 0F                         ADC #$0F
0C72B 85 08                         STA temp+8
0C72D 20 F0 C7                      JSR sub_DrawTileTemp018
0C730                           
0C730                               ;; Draw tile 4 (bottom right tile of move block)
0C730 E6 01                         INC temp+1
0C732 E6 08                         INC temp+8
0C734 20 F0 C7                      JSR sub_DrawTileTemp018
0C737                           
0C737                               ;; Load tile type offset in X register
0C737 8A                            TXA
0C738 48                            PHA
0C739 A6 09                         LDX temp+9
0C73B                               
0C73B                               ;; Load shade tile in temp+8
0C73B A9 00                         LDA #$00
0C73D 85 08                         STA temp+8
0C73F                           
0C73F                               ;; Draw tile 5 (right shade) unless tile is solid
0C73F E6 01                         INC temp+1
0C741                               
0C741 8A                            TXA
0C742 29 0F                         AND #%00001111
0C744 C9 0D                         CMP #$0D
0C746 F0 0A                         BEQ +nextTile
0C748                           
0C748 BD 01 04                      LDA tile_type+1,x
0C74B 29 01                         AND #%00000001
0C74D D0 03                         BNE +nextTile
0C74F                               
0C74F 20 F0 C7                      JSR sub_DrawTileTemp018
0C752                               
0C752                           
0C752                           +nextTile:
0C752                               ;; Draw tile 6 (bottom shade) unless tile is solid
0C752 A5 01                         LDA temp+1
0C754 18                            CLC
0C755 69 1F                         ADC #$1F
0C757 85 01                         STA temp+1
0C759 A5 00                         LDA temp
0C75B 69 00                         ADC #$00
0C75D 85 00                         STA temp
0C75F                           
0C75F 8A                            TXA
0C760 29 F0                         AND #%11110000
0C762 C9 90                         CMP #$90
0C764 F0 0A                         BEQ +nextTile
0C766                           
0C766 BD 10 04                      LDA tile_type+16,x
0C769 29 01                         AND #%00000001
0C76B D0 03                         BNE +nextTile
0C76D                               
0C76D 20 F0 C7                      JSR sub_DrawTileTemp018
0C770                           
0C770                               
0C770                           +nextTile:
0C770                               ;; Draw tile 7 (bottom-right shade) unless tile is solid
0C770 E6 01                         INC temp+1
0C772                           
0C772 8A                            TXA
0C773 29 F0                         AND #%11110000
0C775 C9 90                         CMP #$90
0C777 F0 11                         BEQ +setTileAttributes
0C779                               
0C779 8A                            TXA
0C77A 29 0F                         AND #%00001111
0C77C C9 0D                         CMP #$0D
0C77E F0 0A                         BEQ +setTileAttributes
0C780                               
0C780 BD 11 04                      LDA tile_type+17,x
0C783 29 01                         AND #%00000001
0C785 D0 03                         BNE +setTileAttributes
0C787                               
0C787 20 F0 C7                      JSR sub_DrawTileTemp018
0C78A                               
0C78A                           
0C78A                           +setTileAttributes:
0C78A                               ;; Update attribute table accordingly through ppu buffer
0C78A                               ;; - PPU buffer high byte
0C78A 20 52 D0                      JSR sub_SetTileAttributeAddress
0C78D                           
0C78D 8A                            TXA
0C78E 29 10                         AND #%00010000
0C790 F0 05                         BEQ +        
0C792 A9 F0                             LDA #%11110000
0C794 4C 99 C7                          JMP ++
0C797                               +
0C797 A9 0F                         LDA #%00001111
0C799                               ++
0C799 85 02                         STA temp+2
0C79B                               
0C79B 8A                            TXA
0C79C 29 01                         AND #%00000001
0C79E F0 07                         BEQ +
0C7A0 A5 02                             LDA temp+2
0C7A2 09 CC                             ORA #%11001100
0C7A4 4C AB C7                          JMP ++
0C7A7                               +
0C7A7 A5 02                         LDA temp+2
0C7A9 09 33                         ORA #%00110011
0C7AB                               ++
0C7AB 85 02                         STA temp+2
0C7AD                               
0C7AD C9 FC                         CMP #%11111100
0C7AF F0 22                         BEQ +continue
0C7B1                               
0C7B1 C9 F3                         CMP #%11110011
0C7B3 D0 09                         BNE +
0C7B5 A5 06                             LDA temp+6
0C7B7 0A                                ASL
0C7B8 0A                                ASL
0C7B9 85 06                             STA temp+6
0C7BB 4C D3 C7                          JMP +continue
0C7BE                               +
0C7BE                               
0C7BE C9 CF                         CMP #%11001111
0C7C0 D0 0A                         BNE +
0C7C2 A6 06                             LDX temp+6
0C7C4 BD 8D D9                          LDA tbl_Times16,x
0C7C7 85 06                             STA temp+6
0C7C9 4C D3 C7                          JMP +continue
0C7CC                               +
0C7CC                               
0C7CC A6 06                         LDX temp+6
0C7CE BD 9D D9                      LDA tbl_Times64,x
0C7D1 85 06                         STA temp+6
0C7D3                                   
0C7D3                           +continue:
0C7D3 A5 00                         LDA temp
0C7D5 38                            SEC
0C7D6 E9 C0                         SBC #$C0
0C7D8 AA                            TAX
0C7D9 BD A0 04                      LDA tile_attributes,x
0C7DC 25 02                         AND temp+2
0C7DE 05 06                         ORA temp+6
0C7E0 9D A0 04                      STA tile_attributes,x
0C7E3 99 00 03                      STA ppu_buffer,y
0C7E6 C8                            INY
0C7E7                           
0C7E7                               ;; Restore original X
0C7E7 68                            PLA
0C7E8 AA                            TAX
0C7E9                               
0C7E9                               ;; Update PPU buffer
0C7E9 84 3A                         STY ppu_buffer_pointer
0C7EB A9 01                         LDA #$01
0C7ED 85 39                         STA ppu_buffer_update
0C7EF                           
0C7EF                               ;; Return
0C7EF 60                            RTS
0C7F0                           
0C7F0                           .include "game/subroutine/DrawTileTemp018.asm"
0C7F0                           
0C7F0                           ;; Draws a tile using temp and temp+1 as the PPU address, and temp+8 as the CHR tile id
0C7F0                           
0C7F0                           sub_DrawTileTemp018:
0C7F0 A5 00                         LDA temp
0C7F2 99 00 03                      STA ppu_buffer,y
0C7F5 C8                            INY
0C7F6 A5 01                         LDA temp+1
0C7F8 99 00 03                      STA ppu_buffer,y
0C7FB C8                            INY
0C7FC A5 08                         LDA temp+8
0C7FE 99 00 03                      STA ppu_buffer,y
0C801 C8                            INY
0C802 60                            RTS
0C803                           
0C803                           .include "game/subroutine/EvaluateTileType.asm"
0C803                           
0C803                           ;; Subroutine to evaluate the colliding tile type and take its
0C803                           ;; corresponding action (move block, kill player, ...)
0C803                           ;; - Expects X-register to be the tile_type offset
0C803                           ;; - Uses zp variable colliding_tile
0C803                           
0C803                           sub_EvaluateTileType:
0C803                           
0C803                               ;; Check if collided tile is a color block
0C803 A5 43                         LDA colliding_tile
0C805 29 80                         AND #IS_COLOR_BLOCK
0C807 D0 03                         BNE +
0C809 4C 72 C8                          JMP +checkIfPaintBlock
0C80C                               +
0C80C                               
0C80C                               ;; It's a color block. Check if the colors match
0C80C 20 64 C6                      JSR sub_ColorsMatch
0C80F F0 06                         BEQ +
0C811                                   ;; Colors don't match
0C811                                   ;; Play bounce sound effect
0C811 A2 02                             LDX #SFX_BOUNCE
0C813 20 CD CE                          JSR sub_PreloadSfxFromX
0C816                                   
0C816                                   ;; Return
0C816 60                                RTS
0C817                               +
0C817                           
0C817                               ;; Colors match; destroy color block
0C817                               
0C817                               ;; Convert the metatile offset value (which is in the X register)
0C817                               ;; to its corresponding address in PPU
0C817 20 97 C9                      JSR sub_GetPPUAddrFromYXIndex
0C81A                           
0C81A                               ;; Remove color block from screen by drawing a total
0C81A                               ;; of 7 tiles over it (shade included)
0C81A 20 DC CE                      JSR sub_RemoveBlockFromScreen
0C81D                               
0C81D                               ;; - Load destruction animation on tile
0C81D                               ;; Get most recent slot for explosion    
0C81D 8A                            TXA
0C81E 85 02                         STA temp+2
0C820 A6 3B                         LDX explosion_pointer
0C822                           
0C822                               ;; If 0, use max pointer value
0C822 D0 02                         BNE +
0C824 A2 04                             LDX #MAX_ANIMATIONS
0C826                               +
0C826                           
0C826                               ;; Decrease pointer by one
0C826 CA                            DEX
0C827 86 3B                         STX explosion_pointer
0C829                           
0C829                               ;; Load explosion data into RAM
0C829 A9 00                         LDA #$00
0C82B 9D 64 03                      STA explosion_currentframe,x
0C82E                           
0C82E A9 04                         LDA #ANIMATION_SPEED
0C830 9D 60 03                      STA explosion_timer,x
0C833                           
0C833 A5 02                         LDA temp+2
0C835 29 0F                         AND #%00001111
0C837 A8                            TAY
0C838 B9 8D D9                      LDA tbl_Times16,y
0C83B 18                            CLC
0C83C 69 0E                         ADC #$0E
0C83E 9D 6C 03                      STA explosion_x,x
0C841                           
0C841 A5 02                         LDA temp+2
0C843 29 F0                         AND #%11110000
0C845 18                            CLC
0C846 69 29                         ADC #$29
0C848 9D 70 03                      STA explosion_y,x
0C84B                           
0C84B A9 03                         LDA #$03 ; subpalette 3 is for wall explosions
0C84D 9D 68 03                      STA explosion_attributes,x
0C850 A9 01                         LDA #$01
0C852 9D 74 03                      STA explosion_active,x
0C855                           
0C855 A5 02                         LDA temp+2
0C857 AA                            TAX
0C858                               
0C858                               
0C858                               ;; - Write #$00 in tile type ram (makes not-solid)
0C858 A9 00                         LDA #$00
0C85A 9D 00 04                      STA tile_type, x
0C85D                           
0C85D                           
0C85D                               ;; Add (80 + level number) to score
0C85D A5 42                         LDA current_level
0C85F 18                            CLC
0C860 69 51                         ADC #81
0C862 20 10 C5                      JSR sub_AddAccumulatorToScore
0C865                           
0C865                           
0C865                               ;; Play thud sound effect
0C865 A2 01                         LDX #SFX_THUD
0C867 20 CD CE                      JSR sub_PreloadSfxFromX
0C86A                           
0C86A                           
0C86A                               ;; - If there are no color blocks left:
0C86A                               ;;   - Initiate level-win state
0C86A C6 44                         DEC blocks_left
0C86C D0 03                         BNE +
0C86E 4C 29 C4                          JMP lbl_LevelWin
0C871                               +
0C871                               
0C871 60                            RTS
0C872                           
0C872                           
0C872                           
0C872                           +checkIfPaintBlock:
0C872                           
0C872                               ;; Check if collided tile is a paint block
0C872 A5 43                         LDA colliding_tile
0C874 29 20                         AND #IS_PAINT_BLOCK
0C876 F0 1F                         BEQ +checkIfDeathBlock
0C878                                   ;; It's a paint block. Update ball color
0C878                                   ;; Save x-register
0C878 8A                                TXA
0C879 48                                PHA
0C87A                           
0C87A                                   ;; Get tile color
0C87A A5 43                             LDA colliding_tile
0C87C 29 0E                             AND #%00001110
0C87E 0A                                ASL
0C87F 0A                                ASL
0C880 0A                                ASL
0C881 0A                                ASL
0C882 85 00                             STA temp
0C884                           
0C884                                   ;; Apply tile color to ball
0C884 A5 37                             LDA ball_flags
0C886 29 1F                             AND #%00011111
0C888 05 00                             ORA temp
0C88A 85 37                             STA ball_flags
0C88C 20 43 C6                          JSR sub_ColorizeBall
0C88F                           
0C88F                                   ;; Play bounce sound effect
0C88F A2 02                             LDX #SFX_BOUNCE
0C891 20 CD CE                          JSR sub_PreloadSfxFromX
0C894                           
0C894                                   ;; Restore x-register
0C894 68                                PLA
0C895 AA                                TAX
0C896                           
0C896                                   ;; Return
0C896 60                                RTS
0C897                                   
0C897                                   
0C897                                   
0C897                           +checkIfDeathBlock:
0C897                           
0C897                               ;; Check if collided tile is a death block
0C897 A5 43                         LDA colliding_tile
0C899 29 10                         AND #IS_DEATH_BLOCK
0C89B F0 3D                         BEQ +checkIfMoveBlock
0C89D                           
0C89D                           ;; Also, when the player presses select during gameplay,
0C89D                           ;; insta-selfdestruct the ball.
0C89D                           sub_Selfdestruct:
0C89D                           
0C89D                                   ;; It is a death block
0C89D                                   ;; Freeze and kill player
0C89D A5 37                             LDA ball_flags
0C89F 09 05                             ORA #%00000101
0C8A1 85 37                             STA ball_flags
0C8A3                                   
0C8A3                                   ;; Get free explosion slot
0C8A3 A6 3B                             LDX explosion_pointer
0C8A5 D0 02                             BNE +
0C8A7 A2 04                                 LDX #MAX_ANIMATIONS
0C8A9                                   +
0C8A9 CA                                DEX
0C8AA 86 3B                             STX explosion_pointer
0C8AC                           
0C8AC                                   ;; Load explosion data into RAM
0C8AC A9 00                             LDA #$00
0C8AE 9D 64 03                          STA explosion_currentframe,x
0C8B1                           
0C8B1 A9 04                             LDA #ANIMATION_SPEED
0C8B3 9D 60 03                          STA explosion_timer,x
0C8B6                           
0C8B6 A5 17                             LDA ball_xpos_hi
0C8B8 38                                SEC
0C8B9 E9 08                             SBC #$08
0C8BB 9D 6C 03                          STA explosion_x,x
0C8BE                           
0C8BE A5 19                             LDA ball_ypos_hi
0C8C0 38                                SEC
0C8C1 E9 06                             SBC #$06
0C8C3 9D 70 03                          STA explosion_y,x
0C8C6                           
0C8C6 A9 01                             LDA #$01
0C8C8 9D 68 03                          STA explosion_attributes,x  ; set subpalette 1 for ball explosion
0C8CB 9D 74 03                          STA explosion_active,x      ; set explosion animation to active
0C8CE 85 4B                             STA noise_muted             ; mute background noise
0C8D0                                   
0C8D0                                   ;; Play explosion sound effect
0C8D0 A2 00                             LDX #SFX_EXPLOSION
0C8D2 20 CD CE                          JSR sub_PreloadSfxFromX
0C8D5                           
0C8D5                                   ;; Set kill timer
0C8D5 A9 60                             LDA #$60
0C8D7 85 40                             STA kill_timer
0C8D9                           
0C8D9                                   ;; Return
0C8D9 60                                RTS
0C8DA                           
0C8DA                           
0C8DA                           
0C8DA                           +checkIfMoveBlock:
0C8DA                           
0C8DA                               ;; Check if collided tile is a move block
0C8DA A5 43                         LDA colliding_tile
0C8DC 29 40                         AND #IS_MOVE_BLOCK
0C8DE D0 06                         BNE +
0C8E0                                   ;; Tile is not a move block
0C8E0                                   ;; Therefore, it is a solid wall
0C8E0                                   
0C8E0                                   ;; Play bounce sound effect
0C8E0 A2 02                             LDX #SFX_BOUNCE
0C8E2 20 CD CE                          JSR sub_PreloadSfxFromX
0C8E5                           
0C8E5                                   ;; Return
0C8E5 60                                RTS
0C8E6                               +
0C8E6                           
0C8E6                               ;; It is a move block. Check if colors match
0C8E6 20 64 C6                      JSR sub_ColorsMatch
0C8E9 F0 06                         BEQ +
0C8EB                                   ;; Colors do not match
0C8EB                                   ;; Play bounce sound effect
0C8EB A2 02                             LDX #SFX_BOUNCE
0C8ED 20 CD CE                          JSR sub_PreloadSfxFromX
0C8F0                           
0C8F0                                   ;; Return
0C8F0 60                                RTS
0C8F1                               +
0C8F1                           
0C8F1                               ;; Colors match
0C8F1                               ;; - Check if next tile is within the playground
0C8F1                               ;; (push X onto stack as well)
0C8F1 8A                            TXA
0C8F2 48                            PHA
0C8F3 18                            CLC
0C8F4 65 36                         ADC move_block_space_to_check
0C8F6 AA                            TAX
0C8F7                               
0C8F7 29 0F                         AND #%00001111
0C8F9 C9 0E                         CMP #$0E
0C8FB 90 03                         BCC +
0C8FD 4C 71 C9                          JMP +dontMoveBlock
0C900                               +
0C900 8A                            TXA
0C901 29 F0                         AND #%11110000
0C903 C9 A0                         CMP #$A0
0C905 D0 03                         BNE +
0C907 4C 71 C9                          JMP +dontMoveBlock
0C90A                               +
0C90A C9 F0                         CMP #$F0
0C90C D0 03                         BNE +
0C90E 4C 71 C9                          JMP +dontMoveBlock
0C911                               +
0C911                               
0C911                               ;; Check if the next tile is solid
0C911 BD 00 04                      LDA tile_type,x
0C914 29 01                         AND #TILE_IS_SOLID
0C916 F0 03                         BEQ +
0C918 4C 71 C9                          JMP +dontMoveBlock
0C91B                               +
0C91B                               
0C91B                               ;; Move block has room to move
0C91B                               ;; Pull original X from stack
0C91B 68                            PLA
0C91C AA                            TAX        
0C91D                               
0C91D                               ;; Add the tiles that need updating to ppu buffer, and
0C91D                               ;; update attribute table accordingly through ppu buffer
0C91D 20 97 C9                      JSR sub_GetPPUAddrFromYXIndex
0C920 20 DC CE                      JSR sub_RemoveBlockFromScreen
0C923                           
0C923                               ;; Store original tile type in temp variable
0C923 BD 00 04                      LDA tile_type,x
0C926 85 08                         STA temp+8
0C928                           
0C928                               ;; Write #$00 in tile type ram (makes not-solid)
0C928 A9 00                         LDA #$00
0C92A 9D 00 04                      STA tile_type,x
0C92D                           
0C92D                               ;; Add move tile sprite over the original tile
0C92D                               ;; - Store x in temp variable
0C92D 86 03                         STX temp+3
0C92F                               
0C92F                               ;; - Update move block pointer
0C92F A6 3C                         LDX move_block_pointer
0C931 D0 02                         BNE +
0C933 A2 04                             LDX #MAX_ANIMATIONS
0C935                               +
0C935 CA                            DEX
0C936 86 3C                         STX move_block_pointer
0C938                           
0C938                               ;; = Set move block tile type
0C938 A5 08                         LDA temp+8
0C93A 9D 84 03                      STA move_block_tile_type,x
0C93D                           
0C93D                               ;; - Set move block X position
0C93D A5 03                         LDA temp+3
0C93F 29 0F                         AND #%00001111
0C941 A8                            TAY
0C942 C8                            INY
0C943 B9 8D D9                      LDA tbl_Times16,y
0C946 9D 78 03                      STA move_block_x,x
0C949                               
0C949                               ;; - Set move block Y position
0C949 A5 03                         LDA temp+3
0C94B 29 F0                         AND #%11110000
0C94D 18                            CLC
0C94E 69 30                         ADC #$30
0C950 9D 7C 03                      STA move_block_y,x
0C953 DE 7C 03                      DEC move_block_y,x
0C956                               
0C956                               ;; - Set timer to 16 (+1) frames
0C956 A9 11                         LDA #$11
0C958 9D 80 03                      STA move_block_timer,x
0C95B                               
0C95B                               ;; - Set move direction
0C95B A5 36                         LDA move_block_space_to_check
0C95D 29 81                         AND #%10000001
0C95F 18                            CLC
0C960 2A                            ROL
0C961 69 00                         ADC #$00
0C963 85 04                         STA temp+4
0C965                               
0C965                               ;; - Set block color as ball color and add direction
0C965 A5 37                         LDA ball_flags
0C967 29 E0                         AND #BALL_COLOR
0C969 05 04                         ORA temp+4
0C96B 9D 88 03                      STA move_block_flags,x
0C96E                               
0C96E                               ;; - Restore original X
0C96E A6 03                         LDX temp+3
0C970                           
0C970                               ;; Return
0C970 60                            RTS
0C971                           
0C971                           
0C971                           ;; Do not move the move block
0C971                           +dontMoveBlock:
0C971                           
0C971                               ;; Play bounce sound effect
0C971 A2 02                         LDX #SFX_BOUNCE
0C973 20 CD CE                      JSR sub_PreloadSfxFromX
0C976                           
0C976                               ;; Restore X from stack
0C976 68                            PLA
0C977 AA                            TAX
0C978                               
0C978                               ;; Return
0C978 60                            RTS
0C979                           
0C979                           .include "game/subroutine/FlashEffect.asm"
0C979                           
0C979                           ;; Apply flashing light effect to background color
0C979                           sub_FlashEffect:
0C979 A2 00                         LDX #$00
0C97B 86 01                         STX temp+1
0C97D A9 3F                         LDA #$3F
0C97F 85 00                         STA temp
0C981                           
0C981                               -flashLoop:
0C981 BD FB D9                          LDA tbl_BackgroundFade,x
0C984 85 02                             STA temp+2
0C986 20 CB D0                          JSR sub_WriteByteToPPUBuffer
0C989 A0 03                             LDY #$03
0C98B                                   -
0C98B 20 01 C5                              JSR sub_WaitForNMI
0C98E 88                                    DEY
0C98F D0 FA                             BNE -
0C991 E8                                INX
0C992 E0 0A                             CPX #$0A
0C994 D0 EB                         BNE -flashLoop
0C996                               
0C996 60                            RTS
0C997                           
0C997                           .include "game/subroutine/GetPPUAddrFromYXIndex.asm"
0C997                           
0C997                           ;; Get the PPU address from YX index
0C997                           ;; - Expects YX index (aka tile offset) to be in the X register
0C997                           ;; - Writes the 16-bit PPU address in temp (hi) and temp+1 (lo)
0C997                           
0C997                           ;; PPU_lo = #$C2 +  2*x + $40*(y%4)     = temp+1
0C997                           ;; PPU_hi = (Y/4) + $20 + carry(PPU_lo) = temp
0C997                           
0C997                           sub_GetPPUAddrFromYXIndex:
0C997 8A                            TXA
0C998 29 C0                         AND #%11000000
0C99A 18                            CLC
0C99B 2A                            ROL
0C99C 2A                            ROL
0C99D 2A                            ROL
0C99E 69 20                         ADC #$20
0C9A0 85 00                         STA temp
0C9A2                               
0C9A2 8A                            TXA
0C9A3 29 0F                         AND #%00001111
0C9A5 0A                            ASL
0C9A6 85 01                         STA temp+1
0C9A8                               
0C9A8 8A                            TXA
0C9A9 29 30                         AND #%00110000
0C9AB 0A                            ASL
0C9AC 0A                            ASL
0C9AD 18                            CLC
0C9AE 65 01                         ADC temp+1
0C9B0 85 01                         STA temp+1
0C9B2                               
0C9B2 A5 00                         LDA temp
0C9B4 69 00                         ADC #$00
0C9B6 85 00                         STA temp
0C9B8                               
0C9B8 A5 01                         LDA temp+1
0C9BA 18                            CLC
0C9BB 69 C2                         ADC #$C2
0C9BD 85 01                         STA temp+1
0C9BF                               
0C9BF A5 00                         LDA temp
0C9C1 69 00                         ADC #$00
0C9C3 85 00                         STA temp
0C9C5                           
0C9C5 60                            RTS
0C9C6                           
0C9C6                           .include "game/subroutine/InitiateNudge.asm"
0C9C6                           
0C9C6                           ;; Tell ball to nudge
0C9C6                           sub_InitiateNudge:
0C9C6 85 37                         STA ball_flags
0C9C8 A9 06                         LDA #NUDGE_FRAMES
0C9CA 85 3E                         STA nudge_timer
0C9CC 60                            RTS
0C9CD                           
0C9CD                           .include "game/subroutine/JumpToPointer.asm"
0C9CD                           
0C9CD                           ;; Helper subroutine to JSR to a variable pointer address
0C9CD                           sub_JumpToPointer:
0C9CD 6C 0C 00                      JMP (pointer)
0C9D0                               ;RTS must be handled by the routine (pointer) jumps to
0C9D0                           
0C9D0                           .include "game/subroutine/LoadAnimations.asm"
0C9D0                           
0C9D0                           sub_LoadAnimations:
0C9D0                           
0C9D0                               ;; Set up loop
0C9D0 A2 00                         LDX #$00
0C9D2                               -loop_load_animation:
0C9D2                                   ;; Check if current animation is active. If not, goto next
0C9D2 BD 74 03                          LDA explosion_active,x
0C9D5 D0 03                             BNE +
0C9D7 4C 62 CA                              JMP +next
0C9DA                                   +
0C9DA                           
0C9DA                                   ;; Check the explosion framecounter
0C9DA BD 60 03                          LDA explosion_timer,x
0C9DD D0 17                             BNE +
0C9DF                                       ;; Frametimer is 0
0C9DF                                       ;; Reset to animation speed
0C9DF A9 04                                 LDA #ANIMATION_SPEED
0C9E1 9D 60 03                              STA explosion_timer,x
0C9E4                           
0C9E4                                       ;; Set next animation frame, and check if we're done yet
0C9E4 FE 64 03                              INC explosion_currentframe,x
0C9E7 BD 64 03                              LDA explosion_currentframe,x
0C9EA C9 0A                                 CMP #ANIM_SLIDES
0C9EC D0 08                                 BNE +
0C9EE                           
0C9EE                                       ;; If we're done, inactivate current explosion, go to the next one
0C9EE A9 00                                 LDA #$00
0C9F0 9D 74 03                              STA explosion_active,x
0C9F3 4C 62 CA                              JMP +next
0C9F6                                   +
0C9F6                           
0C9F6                                   ;; Load (x,y) position in temp variables
0C9F6 BD 6C 03                          LDA explosion_x,x
0C9F9 85 01                             STA temp+1
0C9FB 85 03                             STA temp+3
0C9FD BD 70 03                          LDA explosion_y,x
0CA00 85 02                             STA temp+2
0CA02                           
0CA02                                   ;; Load attribute in temp variable
0CA02 BD 68 03                          LDA explosion_attributes,x
0CA05 85 04                             STA temp+4
0CA07                           
0CA07                                   ;; Load current frame into Y-register
0CA07 BC 64 03                          LDY explosion_currentframe,x
0CA0A                           
0CA0A                                   ;; Load current frame ROM address from table
0CA0A B9 1F D2                          LDA explosion_anim_lo,y
0CA0D 85 0C                             STA pointer
0CA0F B9 15 D2                          LDA explosion_anim_hi,y
0CA12 85 0D                             STA pointer+1
0CA14                           
0CA14                                   ;; Save x-register on stack
0CA14 8A                                TXA
0CA15 48                                PHA
0CA16                           
0CA16                                   ;; Load sprites into sprite RAM
0CA16 A6 3D                             LDX sprite_ram_pointer
0CA18 A0 00                             LDY #$00
0CA1A                           
0CA1A                                   ;; Prepare (x,y) offset for loop
0CA1A 84 00                             STY temp
0CA1C                           
0CA1C                                   -loop_load_sprite:
0CA1C                                   
0CA1C                                       ;; Do not draw empty sprites
0CA1C B1 0C                                 LDA (pointer),y
0CA1E F0 18                                 BEQ +nextSprite
0CA20                                   
0CA20                                           ;; Add y-position to sprite ram buffer
0CA20 A5 02                                     LDA temp+2
0CA22 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA25 E8                                        INX
0CA26                           
0CA26                                           ;; Get tile number from frame ROM address, and
0CA26                                           ;; add it to sprite ram buffer
0CA26 B1 0C                                     LDA (pointer),y
0CA28 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA2B E8                                        INX
0CA2C                           
0CA2C                                           ;; Add attribute data to sprite ram buffer
0CA2C A5 04                                     LDA temp+4
0CA2E 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA31 E8                                        INX
0CA32                           
0CA32                                           ;; Add x-position to sprite ram buffer
0CA32 A5 03                                     LDA temp+3
0CA34 9D 00 02                                  STA ADDR_SPRITERAM,x
0CA37 E8                                        INX
0CA38                           
0CA38                                       +nextSprite:
0CA38                           
0CA38                                       ;; Check if all sprites are done
0CA38 C8                                    INY
0CA39 C0 09                                 CPY #SLIDE_SIZE
0CA3B F0 21                                 BEQ +updateSpriteRamPointer
0CA3D                           
0CA3D                                       ;; Update x value
0CA3D A5 03                                 LDA temp+3
0CA3F 18                                    CLC
0CA40 69 08                                 ADC #$08
0CA42 85 03                                 STA temp+3
0CA44                           
0CA44                                       ;; Update temp for x,y position
0CA44 E6 00                                 INC temp
0CA46 A5 00                                 LDA temp
0CA48 C9 03                                 CMP #SLIDE_WIDTH
0CA4A D0 0F                                 BNE +
0CA4C                                           ;; Row is done; reset x-position
0CA4C A5 01                                     LDA temp+1
0CA4E 85 03                                     STA temp+3
0CA50                           
0CA50                                           ;; Update y-position
0CA50 A5 02                                     LDA temp+2
0CA52 18                                        CLC
0CA53 69 08                                     ADC #$08
0CA55 85 02                                     STA temp+2
0CA57                           
0CA57                                           ;; Reset row timer
0CA57 A9 00                                     LDA #$00
0CA59 85 00                                     STA temp
0CA5B                                       +
0CA5B                           
0CA5B 4C 1C CA                          JMP -loop_load_sprite
0CA5E                           
0CA5E                               +updateSpriteRamPointer:
0CA5E 86 3D                             STX sprite_ram_pointer
0CA60                           
0CA60                                   ;; Retrieve x-register from stack
0CA60 68                                PLA
0CA61 AA                                TAX
0CA62                           
0CA62                               +next:
0CA62                                   ;; Check if all animations have been updated
0CA62 E8                                INX
0CA63 E0 04                             CPX #MAX_ANIMATIONS
0CA65 F0 03                             BEQ +cleanUpSpriteRam
0CA67                           
0CA67 4C D2 C9                      JMP -loop_load_animation
0CA6A                           
0CA6A                           +cleanUpSpriteRam:
0CA6A A6 3D                         LDX sprite_ram_pointer
0CA6C A9 EF                         LDA #$EF
0CA6E                               -
0CA6E 9D 00 02                          STA ADDR_SPRITERAM,x
0CA71 E8                                INX
0CA72 D0 FA                         BNE -
0CA74                               
0CA74 60                            RTS
0CA75                               
0CA75                           .include "game/subroutine/LoadGameScreen.asm"
0CA75                           
0CA75                           ;; Load the game screen, based on level number
0CA75                           sub_LoadGameScreen:
0CA75                           
0CA75                               ;; Clear the screen
0CA75 20 D8 C5                      JSR sub_ClearScreen
0CA78                               
0CA78                               ;; Clear collision and attribute data; reset blocks left in the process
0CA78 A2 00                         LDX #$00
0CA7A 8A                            TXA
0CA7B 85 44                         STA blocks_left
0CA7D                               -
0CA7D 9D 00 04                          STA tile_type,x
0CA80 E8                                INX
0CA81 D0 FA                         BNE -
0CA83                               
0CA83                               ;; Get pointer from current level
0CA83 A6 42                         LDX current_level
0CA85 BD 3F D9                      LDA tbl_lvl_layout_lo,x
0CA88 85 0C                         STA pointer
0CA8A BD 25 D9                      LDA tbl_lvl_layout_hi,x
0CA8D 85 0D                         STA pointer+1
0CA8F                           
0CA8F                               ;; Set up the loop
0CA8F A0 00                         LDY #$00
0CA91                           -drawRowColumnLoop:
0CA91                           
0CA91                               ;; Load (x,y) of current set of tiles
0CA91 B1 0C                         LDA (pointer),y
0CA93                           
0CA93                               ;; Check if level is done; if so, skip the loop
0CA93 C9 FF                         CMP #LEVEL_END
0CA95 D0 03                         BNE +
0CA97 4C E0 CB                          JMP +doneLevelLoad
0CA9A                               +
0CA9A                           
0CA9A                               ;; Store (x,y) and number of tiles and tile data in temp variable
0CA9A 85 00                         STA temp
0CA9C C8                            INY
0CA9D B1 0C                         LDA (pointer),y
0CA9F 85 01                         STA temp+1
0CAA1                               
0CAA1                               ;; Convert (x,y) to PPU address
0CAA1                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0CAA1 A5 00                         LDA temp
0CAA3 29 0F                         AND #%00001111
0CAA5 4A                            LSR
0CAA6 4A                            LSR
0CAA7 09 20                         ORA #$20
0CAA9 85 02                         STA temp+2
0CAAB                               
0CAAB                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0CAAB A5 00                         LDA temp
0CAAD 29 F0                         AND #%11110000
0CAAF 4A                            LSR
0CAB0 4A                            LSR
0CAB1 4A                            LSR
0CAB2 85 03                         STA temp+3
0CAB4                               
0CAB4 A5 00                         LDA temp
0CAB6 29 03                         AND #%00000011
0CAB8 AA                            TAX
0CAB9 BD 9D D9                      LDA tbl_Times64,x
0CABC 18                            CLC
0CABD 65 03                         ADC temp+3
0CABF 18                            CLC
0CAC0 69 C2                         ADC #$C2
0CAC2 85 03                         STA temp+3
0CAC4                               
0CAC4                               ;; Add carry to temp+2
0CAC4 A5 02                         LDA temp+2
0CAC6 69 00                         ADC #$00
0CAC8 85 02                         STA temp+2
0CACA                           
0CACA                               ;; Convert tile data to loop count and tile type
0CACA                               ;; temp+4 = color
0CACA A5 01                         LDA temp+1
0CACC 29 07                         AND #%00000111
0CACE 85 04                         STA temp+4
0CAD0                               
0CAD0                               ;; If color = 7, this is a wall
0CAD0 C9 07                         CMP #%00000111
0CAD2 F0 12                         BEQ +wallHack
0CAD4                                   
0CAD4                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0CAD4 29 01                             AND #%00000001
0CAD6 F0 02                             BEQ +
0CAD8 A9 05                                 LDA #$05
0CADA                                   +
0CADA 85 07                             STA temp+7
0CADC                                
0CADC                                   ;; temp+5 = tile type
0CADC A5 01                             LDA temp+1
0CADE 4A                                LSR
0CADF 4A                                LSR
0CAE0 4A                                LSR
0CAE1 29 03                             AND #%00000011
0CAE3 4C EC CA                          JMP +setTileType
0CAE6                               +wallHack:
0CAE6                               
0CAE6                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0CAE6 A9 00                         LDA #$00
0CAE8 85 07                         STA temp+7
0CAEA A9 04                         LDA #$04
0CAEC                           
0CAEC                           +setTileType:    
0CAEC 85 05                         STA temp+5
0CAEE                               
0CAEE                               ;; X = tile offset
0CAEE 18                            CLC
0CAEF 65 07                         ADC temp+7
0CAF1 AA                            TAX
0CAF2                               
0CAF2                               ;; temp+6 = number of tiles
0CAF2 A5 01                         LDA temp+1
0CAF4 29 60                         AND #%01100000
0CAF6 4A                            LSR
0CAF7 4A                            LSR
0CAF8 4A                            LSR
0CAF9 4A                            LSR
0CAFA 4A                            LSR
0CAFB 85 06                         STA temp+6
0CAFD                               
0CAFD                               ;; Translate (x,y) to (y,x) for tile RAM
0CAFD A5 00                         LDA temp
0CAFF 0A                            ASL
0CB00 0A                            ASL
0CB01 0A                            ASL
0CB02 0A                            ASL
0CB03 85 08                         STA temp+8
0CB05 A5 00                         LDA temp
0CB07 4A                            LSR
0CB08 4A                            LSR
0CB09 4A                            LSR
0CB0A 4A                            LSR
0CB0B 05 08                         ORA temp+8
0CB0D 85 00                         STA temp
0CB0F                               
0CB0F                               ;; Set up loop
0CB0F 98                            TYA
0CB10 48                            PHA
0CB11 A4 06                         LDY temp+6
0CB13                           
0CB13                               -drawTileLoop:
0CB13                                   ;; Write PPU address
0CB13 2C 02 20                          BIT PPU_STATUS
0CB16 A5 02                             LDA temp+2
0CB18 8D 06 20                          STA PPU_ADDR
0CB1B A5 03                             LDA temp+3
0CB1D 8D 06 20                          STA PPU_ADDR
0CB20                                   
0CB20                                   ;; Write first and second tile
0CB20 BD A1 D9                          LDA tbl_GametileTopLeft,x
0CB23 8D 07 20                          STA PPU_DATA
0CB26 BD AB D9                          LDA tbl_GametileTopRight,x
0CB29 8D 07 20                          STA PPU_DATA
0CB2C                                   
0CB2C                                   ;; Update PPU address
0CB2C 2C 02 20                          BIT PPU_STATUS
0CB2F A5 02                             LDA temp+2
0CB31 8D 06 20                          STA PPU_ADDR
0CB34 A5 03                             LDA temp+3
0CB36 18                                CLC
0CB37 69 20                             ADC #$20
0CB39 8D 06 20                          STA PPU_ADDR
0CB3C                                   
0CB3C                                   ;; Write third and fourth tile
0CB3C BD B5 D9                          LDA tbl_GametileBottomLeft,x
0CB3F 8D 07 20                          STA PPU_DATA
0CB42 BD BF D9                          LDA tbl_GametileBottomRight,x
0CB45 8D 07 20                          STA PPU_DATA
0CB48                           
0CB48                                   ;; Push x-register to stack
0CB48 8A                                TXA
0CB49 48                                PHA
0CB4A                           
0CB4A                                   ;; Update tile RAM (aka collision table)
0CB4A A6 05                             LDX temp+5
0CB4C BD C9 D9                          LDA tbl_GameTileRamByte,x
0CB4F 05 04                             ORA temp+4
0CB51 0A                                ASL
0CB52 09 01                             ORA #%00000001
0CB54 A6 00                             LDX temp
0CB56 9D 00 04                          STA tile_type,x
0CB59                           
0CB59                                   ;; Check if shade 1 should be drawn
0CB59 E8                                INX
0CB5A BD 00 04                          LDA tile_type,x
0CB5D D0 05                             BNE +
0CB5F A9 00                                 LDA #$00
0CB61 8D 07 20                              STA PPU_DATA
0CB64                                   +
0CB64                                   
0CB64                                   ;; Check if shade 2 should be drawn
0CB64 A5 03                             LDA temp+3
0CB66 18                                CLC
0CB67 69 41                             ADC #$41
0CB69 85 03                             STA temp+3
0CB6B A5 02                             LDA temp+2
0CB6D 69 00                             ADC #$00
0CB6F 85 02                             STA temp+2
0CB71                                   
0CB71 8A                                TXA
0CB72 18                                CLC
0CB73 69 0F                             ADC #$0F
0CB75 AA                                TAX
0CB76                                   
0CB76 BD 00 04                          LDA tile_type,x
0CB79 D0 0F                             BNE +
0CB7B A5 02                                 LDA temp+2
0CB7D 8D 06 20                              STA PPU_ADDR
0CB80 A5 03                                 LDA temp+3
0CB82 8D 06 20                              STA PPU_ADDR
0CB85 A9 00                                 LDA #$00
0CB87 8D 07 20                              STA PPU_DATA
0CB8A                                   +
0CB8A                           
0CB8A                                   ;; Check if shade 3 should be drawn
0CB8A E8                                INX
0CB8B E6 03                             INC temp+3
0CB8D BD 00 04                          LDA tile_type,x
0CB90 D0 0F                             BNE +
0CB92 A5 02                                 LDA temp+2
0CB94 8D 06 20                              STA PPU_ADDR
0CB97 A5 03                                 LDA temp+3
0CB99 8D 06 20                              STA PPU_ADDR
0CB9C A9 00                                 LDA #$00
0CB9E 8D 07 20                              STA PPU_DATA
0CBA1                                   +
0CBA1                                   
0CBA1                                   ;; Restore x-register from stack
0CBA1 68                                PLA
0CBA2 AA                                TAX
0CBA3                                   
0CBA3                                   ;; Reset pointer for next tile
0CBA3 A5 03                             LDA temp+3
0CBA5 38                                SEC
0CBA6 E9 42                             SBC #$42
0CBA8 85 03                             STA temp+3
0CBAA A5 02                             LDA temp+2
0CBAC E9 00                             SBC #$00
0CBAE 85 02                             STA temp+2
0CBB0                                   
0CBB0                                   ;; Draw next metatile in this loop (if any left)
0CBB0 88                                DEY
0CBB1 30 27                             BMI +doneDrawingRowColumn
0CBB3                                   
0CBB3                                   ;; Is it a row or a column?
0CBB3 A5 01                             LDA temp+1
0CBB5 10 17                             BPL +
0CBB7                                       ;; It is a column: move pointer down (+$40)
0CBB7 A5 03                                 LDA temp+3
0CBB9 18                                    CLC
0CBBA 69 40                                 ADC #$40
0CBBC 85 03                                 STA temp+3
0CBBE A5 02                                 LDA temp+2
0CBC0 69 00                                 ADC #$00
0CBC2 85 02                                 STA temp+2
0CBC4                                       
0CBC4                                       ;; Add 16 to temp (as a tile RAM pointer)
0CBC4 A5 00                                 LDA temp
0CBC6 18                                    CLC
0CBC7 69 10                                 ADC #$10
0CBC9 85 00                                 STA temp
0CBCB 4C D7 CB                              JMP +drawNextTile
0CBCE                                   +
0CBCE                                   
0CBCE                                   ;; It is a row: move pointer right (+$02)
0CBCE A5 03                             LDA temp+3
0CBD0 18                                CLC
0CBD1 69 02                             ADC #$02
0CBD3 85 03                             STA temp+3
0CBD5                                   
0CBD5                                   ;; Add 1 to temp (as a tile RAM pointer)
0CBD5 E6 00                             INC temp
0CBD7                           
0CBD7                               
0CBD7                               ;; Next tile in the row/column
0CBD7                                   +drawNextTile:
0CBD7 4C 13 CB                      JMP -drawTileLoop
0CBDA                           
0CBDA                               ;; Go to the next set of tiles
0CBDA                           +doneDrawingRowColumn:
0CBDA 68                            PLA
0CBDB A8                            TAY
0CBDC C8                            INY
0CBDD 4C 91 CA                      JMP -drawRowColumnLoop
0CBE0                           
0CBE0                           ;; Level loading is done
0CBE0                           +doneLevelLoad:
0CBE0                           
0CBE0                               ;; Count number of color blocks
0CBE0 A2 A0                         LDX #160
0CBE2                               -
0CBE2 BD FF 03                          LDA tile_type-1,x
0CBE5 29 80                             AND #%10000000
0CBE7 F0 02                             BEQ +
0CBE9 E6 44                                 INC blocks_left
0CBEB                                   +
0CBEB CA                                DEX
0CBEC D0 F4                         BNE -
0CBEE                           
0CBEE                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0CBEE A9 20                         LDA #$20
0CBF0 8D 06 20                      STA PPU_ADDR
0CBF3 A9 A2                         LDA #$A2
0CBF5 8D 06 20                      STA PPU_ADDR
0CBF8 A9 35                         LDA #$35
0CBFA 20 34 CE                      JSR sub_Draw28HorizontalTiles
0CBFD                           
0CBFD                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0CBFD A9 23                         LDA #$23
0CBFF 8D 06 20                      STA PPU_ADDR
0CC02 A9 42                         LDA #$42
0CC04 8D 06 20                      STA PPU_ADDR
0CC07 A9 31                         LDA #$31
0CC09 20 34 CE                      JSR sub_Draw28HorizontalTiles
0CC0C                           
0CC0C                               ;; Left & right game bounds
0CC0C                               ;; Set PPU_ADDR and store in temp variables
0CC0C A9 20                         LDA #$20
0CC0E 85 00                         STA temp
0CC10 8D 06 20                      STA PPU_ADDR
0CC13 A9 C1                         LDA #$C1
0CC15 85 01                         STA temp+1
0CC17 8D 06 20                      STA PPU_ADDR
0CC1A                               
0CC1A                               ;; Set vertical bound tile and set up loop
0CC1A A0 33                         LDY #$33
0CC1C A2 14                         LDX #20
0CC1E                               -
0CC1E                                   ;; Show left tile
0CC1E 8C 07 20                          STY PPU_DATA
0CC21                                   
0CC21                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0CC21 A5 00                             LDA temp
0CC23 8D 06 20                          STA PPU_ADDR
0CC26 A5 01                             LDA temp+1
0CC28 18                                CLC
0CC29 69 1D                             ADC #29
0CC2B 85 01                             STA temp+1
0CC2D 8D 06 20                          STA PPU_ADDR
0CC30                           
0CC30                                   ;; Show right tile
0CC30 8C 07 20                          STY PPU_DATA
0CC33                           
0CC33                                   ;; Check if we're done yet
0CC33 CA                                DEX
0CC34 F0 18                             BEQ +drawCorners
0CC36                                   
0CC36                                   ;; Not done yet: add 3 to low byte for next left bound
0CC36 A5 01                             LDA temp+1
0CC38 18                                CLC
0CC39 69 03                             ADC #3
0CC3B 85 01                             STA temp+1
0CC3D                                   
0CC3D                                   ;; Apply carry to high byte
0CC3D A5 00                             LDA temp
0CC3F 69 00                             ADC #$00
0CC41 85 00                             STA temp
0CC43                                   
0CC43                                   ;; Store next PPU_ADDR to draw at
0CC43 8D 06 20                          STA PPU_ADDR
0CC46 A5 01                             LDA temp+1
0CC48 8D 06 20                          STA PPU_ADDR
0CC4B 4C 1E CC                      JMP -
0CC4E                               
0CC4E                               
0CC4E                           
0CC4E                           +drawCorners:
0CC4E                               ;; Draw the corners of the playing field
0CC4E A9 20                         LDA #$20
0CC50 8D 06 20                      STA PPU_ADDR
0CC53 A9 A1                         LDA #$A1
0CC55 8D 06 20                      STA PPU_ADDR
0CC58 A9 39                         LDA #$39
0CC5A 8D 07 20                      STA PPU_DATA
0CC5D                           
0CC5D A9 20                         LDA #$20
0CC5F 8D 06 20                      STA PPU_ADDR
0CC62 A9 BE                         LDA #$BE
0CC64 8D 06 20                      STA PPU_ADDR
0CC67 A9 3A                         LDA #$3A
0CC69 8D 07 20                      STA PPU_DATA
0CC6C                               ;; (added background tile for Sprite-0 hit)
0CC6C A9 3F                         LDA #$3F
0CC6E 8D 07 20                      STA PPU_DATA
0CC71                           
0CC71 A9 23                         LDA #$23
0CC73 8D 06 20                      STA PPU_ADDR
0CC76 A9 41                         LDA #$41
0CC78 8D 06 20                      STA PPU_ADDR
0CC7B A9 36                         LDA #$36
0CC7D 8D 07 20                      STA PPU_DATA
0CC80                           
0CC80 A9 23                         LDA #$23
0CC82 8D 06 20                      STA PPU_ADDR
0CC85 A9 5E                         LDA #$5E
0CC87 8D 06 20                      STA PPU_ADDR
0CC8A A9 34                         LDA #$34
0CC8C 8D 07 20                      STA PPU_DATA
0CC8F                           
0CC8F                           
0CC8F                               ;; Draw the hud labels
0CC8F A9 20                         LDA #$20
0CC91 8D 06 20                      STA PPU_ADDR
0CC94 A9 62                         LDA #$62
0CC96 8D 06 20                      STA PPU_ADDR
0CC99 A2 00                         LDX #$00
0CC9B                               -
0CC9B BD CE D9                          LDA tbl_HudText,x
0CC9E 8D 07 20                          STA PPU_DATA
0CCA1 E8                                INX
0CCA2 E0 1C                             CPX #28
0CCA4 D0 F5                         BNE -
0CCA6                           
0CCA6                           
0CCA6                               ;; Draw the current score
0CCA6 A9 20                         LDA #$20
0CCA8 8D 06 20                      STA PPU_ADDR
0CCAB A9 83                         LDA #$83
0CCAD 8D 06 20                      STA PPU_ADDR
0CCB0 A2 00                         LDX #$00
0CCB2                               -
0CCB2 B5 20                             LDA ball_score,x
0CCB4 18                                CLC
0CCB5 69 01                             ADC #$01
0CCB7 8D 07 20                          STA PPU_DATA
0CCBA E8                                INX
0CCBB E0 06                             CPX #$06
0CCBD D0 F3                         BNE -
0CCBF                           
0CCBF                           
0CCBF                               ;; Draw the level number
0CCBF                               ;; (with primitive HEX>DEC)
0CCBF A5 42                         LDA current_level
0CCC1 18                            CLC
0CCC2 69 01                         ADC #$01
0CCC4 85 01                         STA temp+1
0CCC6                               
0CCC6 C9 14                         CMP #20
0CCC8 B0 13                         BCS +tempIsTwo
0CCCA                               
0CCCA C9 0A                         CMP #10
0CCCC B0 05                         BCS +tempIsOne
0CCCE                               
0CCCE A9 00                         LDA #$00
0CCD0 4C E4 CC                      JMP +setTemp
0CCD3                               
0CCD3                           +tempIsOne:
0CCD3 38                            SEC
0CCD4 E9 0A                         SBC #10
0CCD6 85 01                         STA temp+1
0CCD8 A9 01                         LDA #$01
0CCDA 4C E4 CC                      JMP +setTemp
0CCDD                               
0CCDD                           +tempIsTwo:
0CCDD 38                            SEC
0CCDE E9 14                         SBC #20
0CCE0 85 01                         STA temp+1
0CCE2 A9 02                         LDA #$02
0CCE4                           
0CCE4                           +setTemp:
0CCE4 85 00                         STA temp
0CCE6                               
0CCE6 E6 00                         INC temp
0CCE8 E6 01                         INC temp+1
0CCEA                               
0CCEA A9 20                         LDA #$20
0CCEC 8D 06 20                      STA PPU_ADDR
0CCEF A9 8B                         LDA #$8B
0CCF1 8D 06 20                      STA PPU_ADDR
0CCF4 A5 00                         LDA temp
0CCF6 8D 07 20                      STA PPU_DATA
0CCF9 A5 01                         LDA temp+1
0CCFB 8D 07 20                      STA PPU_DATA
0CCFE                           
0CCFE                           
0CCFE                               ;; Draw lives (presumes lives to be capped at 9)
0CCFE A9 20                         LDA #$20
0CD00 8D 06 20                      STA PPU_ADDR
0CD03 A9 92                         LDA #$92
0CD05 8D 06 20                      STA PPU_ADDR
0CD08 A6 1F                         LDX ball_lives
0CD0A E8                            INX
0CD0B 8E 07 20                      STX PPU_DATA
0CD0E                           
0CD0E                           
0CD0E                               ;; Set and draw bonus
0CD0E A9 07                         LDA #$07
0CD10 85 2C                         STA ball_bonus
0CD12 A9 09                         LDA #$09
0CD14 85 2D                         STA ball_bonus+1
0CD16 85 2E                         STA ball_bonus+2
0CD18                               
0CD18 A9 20                         LDA #$20
0CD1A 8D 06 20                      STA PPU_ADDR
0CD1D A9 9A                         LDA #$9A
0CD1F 8D 06 20                      STA PPU_ADDR
0CD22 A2 00                         LDX #$00
0CD24                               -
0CD24 B5 2C                             LDA ball_bonus,x
0CD26 18                                CLC
0CD27 69 01                             ADC #$01
0CD29 8D 07 20                          STA PPU_DATA
0CD2C E8                                INX
0CD2D E0 03                             CPX #$03
0CD2F D0 F3                         BNE -
0CD31                           
0CD31                           
0CD31                               ;; Set attribute data to RAM
0CD31                               
0CD31                               ;; Byte 0-7 of attribute ram should be #%10100000
0CD31 A2 00                         LDX #$00
0CD33 A9 A0                         LDA #$A0
0CD35                               -
0CD35 9D A0 04                          STA tile_attributes,x
0CD38 E8                                INX
0CD39 E0 08                             CPX #$08
0CD3B D0 F8                         BNE -
0CD3D                           
0CD3D                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0CD3D                           
0CD3D                           -attributeLoop:
0CD3D                               ;; Reset current attribute value
0CD3D A9 00                         LDA #$00
0CD3F 85 02                         STA temp+2
0CD41                           
0CD41                               ;; Get first metatile in tile ram based on attribute index
0CD41                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0CD41 8A                            TXA
0CD42                           
0CD42 38                            SEC
0CD43 E9 08                         SBC #$08
0CD45 85 01                         STA temp+1      ; attr - 8 (temp1)
0CD47 0A                            ASL             ; * 2
0CD48 85 00                         STA temp        ; temp = temp1 * 2
0CD4A                           
0CD4A A5 01                         LDA temp+1      ; temp1
0CD4C 29 F8                         AND #%11111000  ; rounded down to 8's
0CD4E 0A                            ASL             ; * 2
0CD4F 18                            CLC
0CD50 65 00                         ADC temp        ; + temp1 * 2
0CD52 85 00                         STA temp        ; first metatile
0CD54                           
0CD54                               ;; Store first metatile in y-register
0CD54 A8                            TAY
0CD55                           
0CD55                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0CD55 8A                            TXA
0CD56 29 07                         AND #%00000111
0CD58 C9 07                         CMP #%00000111
0CD5A F0 0B                         BEQ +
0CD5C                           
0CD5C                               ;; If X >= $30, don't apply bottom right metatile
0CD5C E0 30                         CPX #$30
0CD5E B0 07                         BCS +
0CD60                               
0CD60                               ;; Add metatile1 subpalette to attribute value
0CD60 B9 00 04                      LDA tile_type,y
0CD63 29 0C                         AND #%00001100
0CD65 85 02                         STA temp+2
0CD67                               +
0CD67                           
0CD67                           
0CD67                               ;; Apply second metatile
0CD67 88                            DEY
0CD68                           
0CD68                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0CD68 8A                            TXA
0CD69 29 07                         AND #%00000111
0CD6B F0 10                         BEQ +
0CD6D                           
0CD6D                               ;; If X >= $30, don't apply bottom left metatile
0CD6D E0 30                         CPX #$30
0CD6F B0 0C                         BCS +
0CD71                           
0CD71                           
0CD71                           
0CD71                               ;; Add metatile2 subpalette to attribute value
0CD71 B9 00 04                      LDA tile_type,y
0CD74 29 0C                         AND #%00001100
0CD76 4A                            LSR
0CD77 4A                            LSR
0CD78 05 02                         ORA temp+2
0CD7A 4C 7F CD                      JMP ++
0CD7D                               +
0CD7D A5 02                         LDA temp+2
0CD7F                               ++
0CD7F 0A                            ASL
0CD80 0A                            ASL
0CD81 85 02                         STA temp+2
0CD83                           
0CD83                           
0CD83                               ;; Apply third metatile
0CD83 98                            TYA
0CD84 38                            SEC
0CD85 E9 0F                         SBC #$0F
0CD87 A8                            TAY
0CD88                           
0CD88                               ;; If X MOD 8 == 7, don't apply top right metatile
0CD88 8A                            TXA
0CD89 29 07                         AND #%00000111
0CD8B C9 07                         CMP #%00000111
0CD8D F0 11                         BEQ +
0CD8F                           
0CD8F                               ;; If X < $10, don't apply top right metatile
0CD8F 8A                            TXA
0CD90 29 F0                         AND #%11110000
0CD92 F0 0C                         BEQ +
0CD94                           
0CD94                               ;; Add metatile3 subpalette to attribute value
0CD94 B9 00 04                      LDA tile_type,y
0CD97 29 0C                         AND #%00001100
0CD99 4A                            LSR
0CD9A 4A                            LSR
0CD9B 05 02                         ORA temp+2
0CD9D 4C A2 CD                      JMP ++
0CDA0                               +
0CDA0 A5 02                         LDA temp+2
0CDA2                               ++
0CDA2 0A                            ASL
0CDA3 0A                            ASL
0CDA4 85 02                         STA temp+2
0CDA6                           
0CDA6                           
0CDA6                               ;; Apply fourth metatile
0CDA6 88                            DEY
0CDA7                           
0CDA7                               ;; If X MOD 8 == 0, don't apply top left metatile
0CDA7 8A                            TXA
0CDA8 29 07                         AND #%00000111
0CDAA F0 11                         BEQ +
0CDAC                           
0CDAC                               ;; If X < $10, don't apply top left metatile
0CDAC 8A                            TXA
0CDAD 29 F0                         AND #%11110000
0CDAF F0 0C                         BEQ +
0CDB1                           
0CDB1                               ;; Add metatile4 subpalette to attribute value
0CDB1 B9 00 04                      LDA tile_type,y
0CDB4 29 0C                         AND #%00001100
0CDB6 4A                            LSR
0CDB7 4A                            LSR
0CDB8 05 02                         ORA temp+2
0CDBA 4C BF CD                      JMP ++
0CDBD                               +
0CDBD A5 02                         LDA temp+2
0CDBF                               ++
0CDBF 9D A0 04                      STA tile_attributes,x
0CDC2                           
0CDC2                               ;; Check the next attribute, if any left
0CDC2 E8                            INX
0CDC3 E0 38                         CPX #$38
0CDC5 F0 03                         BEQ +
0CDC7 4C 3D CD                          JMP -attributeLoop
0CDCA                               +
0CDCA                           
0CDCA                               ;; Stream attribute RAM to PPU
0CDCA 2C 02 20                      BIT PPU_STATUS
0CDCD A9 23                         LDA #$23
0CDCF 8D 06 20                      STA PPU_ADDR
0CDD2 A9 C0                         LDA #$C0
0CDD4 8D 06 20                      STA PPU_ADDR
0CDD7 A2 00                         LDX #$00
0CDD9                               -
0CDD9 BD A0 04                          LDA tile_attributes,x
0CDDC 8D 07 20                          STA PPU_DATA
0CDDF E8                                INX
0CDE0 E0 40                             CPX #$40
0CDE2 D0 F5                         BNE -
0CDE4                           
0CDE4                               ;; Set initial ball position
0CDE4 A6 42                         LDX current_level
0CDE6 BD 59 D9                      LDA tbl_lvl_ball_startpos,x
0CDE9 29 F0                         AND #%11110000
0CDEB 18                            CLC
0CDEC 69 34                         ADC #$34
0CDEE 85 19                         STA ball_ypos_hi
0CDF0 BD 59 D9                      LDA tbl_lvl_ball_startpos,x
0CDF3 0A                            ASL
0CDF4 0A                            ASL
0CDF5 0A                            ASL
0CDF6 0A                            ASL
0CDF7 18                            CLC
0CDF8 69 14                         ADC #$14
0CDFA 85 17                         STA ball_xpos_hi
0CDFC A9 00                         LDA #$00
0CDFE 85 18                         STA ball_xpos_lo
0CE00 85 1A                         STA ball_ypos_lo
0CE02                               
0CE02                               ;; Set initial ball color and direction
0CE02 BD 73 D9                      LDA tbl_lvl_ball_init,x
0CE05 29 F0                         AND #%11110000
0CE07 85 37                         STA ball_flags
0CE09 20 43 C6                      JSR sub_ColorizeBall
0CE0C                               
0CE0C                               ;; Reset bonus timer
0CE0C A9 08                         LDA #BONUS_FRAMES
0CE0E 85 3F                         STA bonus_timer
0CE10                               
0CE10                               ;; Play background noise
0CE10 A9 08                         LDA #$08
0CE12 8D 15 40                      STA APU_STATUS
0CE15 8D 0F 40                      STA NOISE_LENGTH
0CE18 A9 0E                         LDA #$0E
0CE1A 85 47                         STA current_noise
0CE1C A9 00                         LDA #$00
0CE1E 85 45                         STA max_noise
0CE20 85 48                         STA noise_timer
0CE22 85 46                         STA sweep_noise
0CE24 85 4B                         STA noise_muted
0CE26 20 6F C5                      JSR sub_BackgroundNoise
0CE29                           
0CE29                               ;; Freeze the ball
0CE29 A5 37                         LDA ball_flags
0CE2B 09 04                         ORA #FREEZE_BALL
0CE2D 85 37                         STA ball_flags
0CE2F                               
0CE2F                               ;; Start unfreeze timer
0CE2F A9 30                         LDA #$30
0CE31 85 41                         STA unfreeze_timer
0CE33                           
0CE33                               ;; Return
0CE33 60                            RTS
0CE34                           
0CE34                           
0CE34                           ;; Subroutine: draw 28 tiles in a row
0CE34                           sub_Draw28HorizontalTiles:
0CE34 A2 1C                         LDX #28
0CE36                               -
0CE36 8D 07 20                          STA PPU_DATA
0CE39 CA                                DEX
0CE3A D0 FA                         BNE -
0CE3C 60                            RTS
0CE3D                           
0CE3D                           .include "game/subroutine/LoadIntroScreen.asm"
0CE3D                           
0CE3D                           ;; Load the intro screen
0CE3D                           sub_LoadIntroScreen:
0CE3D                           
0CE3D                               ;; Load intro palette
0CE3D 2C 02 20                      BIT PPU_STATUS
0CE40 A9 3F                         LDA #$3F
0CE42 8D 06 20                      STA PPU_ADDR
0CE45 A9 00                         LDA #$00
0CE47 8D 06 20                      STA PPU_ADDR
0CE4A A2 00                         LDX #$00
0CE4C                               -
0CE4C BD F1 D0                          LDA tbl_IntroScreenPalette,x
0CE4F 8D 07 20                          STA PPU_DATA
0CE52 E8                                INX
0CE53 E0 20                             CPX #$20
0CE55 D0 F5                         BNE -
0CE57                               
0CE57                               ;; Put ball in the middle
0CE57 A9 7C                         LDA #$7C
0CE59 85 17                         STA ball_xpos_hi
0CE5B 85 19                         STA ball_ypos_hi
0CE5D                           
0CE5D                               ;; Clear the screen
0CE5D 20 D8 C5                      JSR sub_ClearScreen
0CE60                           
0CE60                               ;; Set up intro screen draw loop
0CE60 A2 00                         LDX #$00
0CE62                           
0CE62                           -loop_IntroScreenData:
0CE62                           
0CE62                               ;; Get current byte from intro screen data
0CE62 BD 19 D1                      LDA tbl_IntroScreenData,x
0CE65                           
0CE65                               ;; If current byte is #$3F, we're done drawing.
0CE65 C9 3F                         CMP #$3F
0CE67 D0 03                         BNE +
0CE69 4C B6 CE                          JMP +goToEndIntroScreen
0CE6C                               +
0CE6C                           
0CE6C                               ;; If highest bits are %11, draw a plain tile
0CE6C 29 C0                         AND #%11000000
0CE6E D0 03                         BNE +
0CE70 4C 96 CE                          JMP +drawTile
0CE73                               +
0CE73                               
0CE73                               ;; If highest bits are %01, set the PPU address
0CE73                               ;; If not, draw two logo tiles
0CE73 C9 40                         CMP #%01000000
0CE75 D0 03                         BNE +drawLogo
0CE77 4C A0 CE                          JMP +setPpuAddr
0CE7A                           
0CE7A                           +drawLogo:
0CE7A                               ;; Get bits 0-2 and store in a temp variable
0CE7A BD 19 D1                      LDA tbl_IntroScreenData,x
0CE7D 29 07                         AND #%00000111
0CE7F 85 00                         STA temp
0CE81                               
0CE81                               ;; Get bits 3-5, shift over to get a value from 0-7
0CE81 BD 19 D1                      LDA tbl_IntroScreenData,x
0CE84 4A                            LSR
0CE85 4A                            LSR
0CE86 4A                            LSR
0CE87 29 07                         AND #%00000111
0CE89                               
0CE89                               ;; Draw the tile that corresponds with that value
0CE89 A8                            TAY
0CE8A 20 BB C6                      JSR sub_drawIntroScreenLogoTile
0CE8D                               
0CE8D                               ;; Do the same for the value stored in temp
0CE8D A4 00                         LDY temp
0CE8F 20 BB C6                      JSR sub_drawIntroScreenLogoTile
0CE92                           
0CE92                               ;; Next byte please
0CE92 E8                            INX
0CE93 4C 62 CE                      JMP -loop_IntroScreenData
0CE96                           
0CE96                           +drawTile:
0CE96                               ;; Just draw the tile value on screen
0CE96 BD 19 D1                      LDA tbl_IntroScreenData,x
0CE99 8D 07 20                      STA PPU_DATA
0CE9C                               
0CE9C                               ;; Next byte please
0CE9C E8                            INX
0CE9D 4C 62 CE                      JMP -loop_IntroScreenData
0CEA0                           
0CEA0                           
0CEA0                           +setPpuAddr:
0CEA0                               ;; Reset the PPU latch
0CEA0 2C 02 20                      BIT PPU_STATUS
0CEA3                               
0CEA3                               ;; Sanitize and write the high byte of the PPU address
0CEA3 BD 19 D1                      LDA tbl_IntroScreenData,x
0CEA6 29 3F                         AND #%00111111
0CEA8 8D 06 20                      STA PPU_ADDR
0CEAB                           
0CEAB                               ;; Write the low byte of the PPU address
0CEAB E8                            INX
0CEAC BD 19 D1                      LDA tbl_IntroScreenData,x
0CEAF 8D 06 20                      STA PPU_ADDR
0CEB2                               
0CEB2                               ;; PPU has been set up to draw tiles at the correct spot now.
0CEB2                               
0CEB2                               ;; Next byte please.
0CEB2 E8                            INX
0CEB3 4C 62 CE                      JMP -loop_IntroScreenData
0CEB6                           
0CEB6                           +goToEndIntroScreen:
0CEB6                           
0CEB6                               ;; To color the 1.LEVEL: line green, we need to update two
0CEB6                               ;; values in the PPU attribute data.
0CEB6 2C 02 20                      BIT PPU_STATUS
0CEB9 A9 23                         LDA #$23
0CEBB 8D 06 20                      STA PPU_ADDR
0CEBE A9 CB                         LDA #$CB
0CEC0 8D 06 20                      STA PPU_ADDR
0CEC3 A9 0A                         LDA #%00001010
0CEC5 8D 07 20                      STA PPU_DATA
0CEC8 8D 07 20                      STA PPU_DATA
0CECB                           
0CECB 60                            RTS
0CECC                           
0CECC                           .include "game/subroutine/LoadWinScreen.asm"
0CECC                           
0CECC                           ;; Load the win screen (in progress)
0CECC                           sub_LoadWinScreen:
0CECC 60                            RTS
0CECD                           
0CECD                           .include "game/subroutine/PreloadSfxFromX.asm"
0CECD                           
0CECD                           sub_PreloadSfxFromX:
0CECD                               
0CECD                               ;; Load sample X into sfx address (low byte)
0CECD BD 4A DA                      LDA tbl_Sfx_lo,x
0CED0 85 4C                         STA sfx_address
0CED2                               
0CED2                               ;; Load sample X into sfx address (high byte)
0CED2 BD 47 DA                      LDA tbl_Sfx_hi,x
0CED5 85 4D                         STA sfx_address+1
0CED7                               
0CED7                               ;; Start SFX timer
0CED7 A9 01                         LDA #$01
0CED9 85 4E                         STA sfx_timer
0CEDB                               
0CEDB 60                            RTS
0CEDC                               
0CEDC                               0CEDC                           .include "game/subroutine/RemoveBlockFromScreen.asm"
0CEDC                           
0CEDC                           ;; Remove a block from screen
0CEDC                           sub_RemoveBlockFromScreen:
0CEDC                           
0CEDC                               ;; Get current buffer location
0CEDC A4 3A                         LDY ppu_buffer_pointer
0CEDE                               
0CEDE                               ;; TILE 1: if metatile on top left is solid, draw
0CEDE                               ;; null tile, else draw random noise tile
0CEDE A9 00                         LDA #$00
0CEE0 85 39                         STA ppu_buffer_update
0CEE2                               
0CEE2 A5 00                         LDA temp
0CEE4 99 00 03                      STA ppu_buffer,y
0CEE7 C8                            INY
0CEE8 A5 01                         LDA temp+1
0CEEA 99 00 03                      STA ppu_buffer,y
0CEED C8                            INY
0CEEE                               
0CEEE 8A                            TXA
0CEEF 29 0F                         AND #%00001111
0CEF1 F0 11                         BEQ +drawRandomTile
0CEF3                           
0CEF3 8A                            TXA
0CEF4 29 F0                         AND #%11110000
0CEF6 F0 0C                         BEQ +drawRandomTile
0CEF8                           
0CEF8 BD EF 03                      LDA tile_type-17,x
0CEFB 29 01                         AND #%00000001
0CEFD F0 05                         BEQ +drawRandomTile  
0CEFF                           
0CEFF                               ;; Draw a null tile
0CEFF A9 00                         LDA #$00
0CF01 4C 0C CF                      JMP +addToPPUBuffer
0CF04                               
0CF04                           +drawRandomTile:
0CF04                               ;; Draw a random tile
0CF04 20 DF C4                      JSR sub_GetRandomNumber
0CF07 29 07                         AND #%00000111
0CF09 18                            CLC
0CF0A 69 68                         ADC #$68
0CF0C                               
0CF0C                               ;; Add tile to ppu buffer
0CF0C                           +addToPPUBuffer:
0CF0C 99 00 03                      STA ppu_buffer,y
0CF0F C8                            INY
0CF10                           
0CF10                               ;; TILE 2: If metatile above is solid, draw null,
0CF10                               ;; else draw random noise.
0CF10 E6 01                         INC temp+1
0CF12 A5 00                         LDA temp
0CF14 99 00 03                      STA ppu_buffer,y
0CF17 C8                            INY
0CF18 A5 01                         LDA temp+1
0CF1A 99 00 03                      STA ppu_buffer,y
0CF1D C8                            INY
0CF1E                               
0CF1E 8A                            TXA
0CF1F 29 F0                         AND #%11110000
0CF21 F0 0C                         BEQ +drawRandomTile
0CF23                               
0CF23 BD F0 03                      LDA tile_type-16,x
0CF26 29 01                         AND #%00000001
0CF28 F0 05                         BEQ +drawRandomTile
0CF2A                               
0CF2A A9 00                         LDA #%00
0CF2C 4C 37 CF                      JMP +addToPPUBuffer
0CF2F                           
0CF2F                           +drawRandomTile:
0CF2F 20 DF C4                      JSR sub_GetRandomNumber
0CF32 29 07                         AND #%00000111
0CF34 18                            CLC
0CF35 69 68                         ADC #$68
0CF37                           
0CF37                           +addToPPUBuffer:
0CF37 99 00 03                      STA ppu_buffer,y
0CF3A C8                            INY
0CF3B                               
0CF3B                               ;; TILE 3 - If metatile left is solid, draw null,
0CF3B                               ;; else draw random noise.
0CF3B A5 01                         LDA temp+1
0CF3D 18                            CLC
0CF3E 69 1F                         ADC #$1F
0CF40 85 01                         STA temp+1
0CF42 A5 00                         LDA temp
0CF44 69 00                         ADC #$00
0CF46 85 00                         STA temp
0CF48 99 00 03                      STA ppu_buffer,y
0CF4B C8                            INY
0CF4C A5 01                         LDA temp+1
0CF4E 99 00 03                      STA ppu_buffer,y
0CF51 C8                            INY
0CF52                               
0CF52 8A                            TXA
0CF53 29 0F                         AND #%00001111
0CF55 F0 0C                         BEQ +drawRandomTile
0CF57                               
0CF57 BD FF 03                      LDA tile_type-1,x
0CF5A 29 01                         AND #%00000001
0CF5C F0 05                         BEQ +drawRandomTile
0CF5E                               
0CF5E A9 00                         LDA #%00
0CF60 4C 6B CF                      JMP +addToPPUBuffer
0CF63                           
0CF63                           +drawRandomTile:
0CF63 20 DF C4                      JSR sub_GetRandomNumber
0CF66 29 07                         AND #%00000111
0CF68 18                            CLC
0CF69 69 68                         ADC #$68
0CF6B                               
0CF6B                           +addToPPUBuffer:
0CF6B 99 00 03                      STA ppu_buffer,y
0CF6E C8                            INY
0CF6F                               
0CF6F                               ;; TILE 4 - Always random noise
0CF6F E6 01                         INC temp+1
0CF71 A5 00                         LDA temp
0CF73 99 00 03                      STA ppu_buffer,y
0CF76 C8                            INY
0CF77 A5 01                         LDA temp+1
0CF79 99 00 03                      STA ppu_buffer,y
0CF7C C8                            INY
0CF7D 20 DF C4                      JSR sub_GetRandomNumber
0CF80 29 07                         AND #%00000111
0CF82 18                            CLC
0CF83 69 68                         ADC #$68
0CF85 99 00 03                      STA ppu_buffer,y
0CF88 C8                            INY
0CF89                           
0CF89                               ;; TILE 5 - If tile on the right is solid, skip,
0CF89                               ;; else draw random noise tile
0CF89 E6 01                         INC temp+1
0CF8B                               
0CF8B 8A                            TXA
0CF8C 29 0F                         AND #%00001111
0CF8E C9 0D                         CMP #$0D
0CF90 F0 1F                         BEQ +skipTile
0CF92                               
0CF92 BD 01 04                      LDA tile_type+1,x
0CF95 29 01                         AND #%00000001
0CF97 D0 18                         BNE +skipTile
0CF99 A5 00                             LDA temp
0CF9B 99 00 03                          STA ppu_buffer,y
0CF9E C8                                INY
0CF9F A5 01                             LDA temp+1
0CFA1 99 00 03                          STA ppu_buffer,y
0CFA4 C8                                INY
0CFA5 20 DF C4                          JSR sub_GetRandomNumber
0CFA8 29 07                             AND #%00000111
0CFAA 18                                CLC
0CFAB 69 68                             ADC #$68
0CFAD 99 00 03                          STA ppu_buffer,y
0CFB0 C8                                INY    
0CFB1                               +skipTile:
0CFB1                           
0CFB1                               ;; TILE 6 - If tile on bottom is solid, skip,
0CFB1                               ;; else draw random noise
0CFB1 A5 01                         LDA temp+1
0CFB3 18                            CLC
0CFB4 69 1F                         ADC #$1F
0CFB6 85 01                         STA temp+1
0CFB8 A5 00                         LDA temp
0CFBA 69 00                         ADC #$00
0CFBC 85 00                         STA temp
0CFBE                           
0CFBE 8A                            TXA
0CFBF 29 F0                         AND #%11110000
0CFC1 C9 90                         CMP #$90
0CFC3 F0 1F                         BEQ +skipTile
0CFC5                           
0CFC5 BD 10 04                      LDA tile_type+16,x
0CFC8 29 01                         AND #%00000001
0CFCA D0 18                         BNE +skipTile
0CFCC A5 00                             LDA temp
0CFCE 99 00 03                          STA ppu_buffer,y
0CFD1 C8                                INY
0CFD2 A5 01                             LDA temp+1
0CFD4 99 00 03                          STA ppu_buffer,y
0CFD7 C8                                INY
0CFD8 20 DF C4                          JSR sub_GetRandomNumber
0CFDB 29 07                             AND #%00000111
0CFDD 18                                CLC
0CFDE 69 68                             ADC #$68
0CFE0 99 00 03                          STA ppu_buffer,y
0CFE3 C8                                INY    
0CFE4                               +skipTile:
0CFE4                               
0CFE4                               ;; TILE 7 - If tile on bottom right is solid, skip,
0CFE4                               ;; else draw random noise
0CFE4 E6 01                         INC temp+1
0CFE6                           
0CFE6 8A                            TXA
0CFE7 29 F0                         AND #%11110000
0CFE9 C9 90                         CMP #$90
0CFEB F0 26                         BEQ +skipTile
0CFED                               
0CFED 8A                            TXA
0CFEE 29 0F                         AND #%00001111
0CFF0 C9 0D                         CMP #$0D
0CFF2 F0 1F                         BEQ +skipTile
0CFF4                               
0CFF4 BD 11 04                      LDA tile_type+17,x
0CFF7 29 01                         AND #%00000001
0CFF9 D0 18                         BNE +skipTile
0CFFB A5 00                             LDA temp
0CFFD 99 00 03                          STA ppu_buffer,y
0D000 C8                                INY
0D001 A5 01                             LDA temp+1
0D003 99 00 03                          STA ppu_buffer,y
0D006 C8                                INY
0D007 20 DF C4                          JSR sub_GetRandomNumber
0D00A 29 07                             AND #%00000111
0D00C 18                                CLC
0D00D 69 68                             ADC #$68
0D00F 99 00 03                          STA ppu_buffer,y
0D012 C8                                INY    
0D013                               +skipTile:   
0D013                           
0D013                           
0D013                               ;; Update attribute table accordingly through ppu buffer
0D013 20 52 D0                      JSR sub_SetTileAttributeAddress
0D016                               
0D016 8A                            TXA
0D017 29 10                         AND #%00010000
0D019 F0 05                         BEQ +
0D01B A9 F0                             LDA #%11110000
0D01D 4C 22 D0                          JMP ++
0D020                               +
0D020 A9 0F                         LDA #%00001111
0D022                               ++
0D022 85 02                         STA temp+2
0D024                               
0D024 8A                            TXA
0D025 48                            PHA
0D026 29 01                         AND #%00000001
0D028 F0 07                         BEQ +
0D02A A5 02                             LDA temp+2
0D02C 09 CC                             ORA #%11001100
0D02E 4C 35 D0                          JMP ++
0D031                               +
0D031 A5 02                         LDA temp+2
0D033 09 33                         ORA #%00110011
0D035                               ++
0D035 85 02                         STA temp+2
0D037                               
0D037 A5 00                         LDA temp
0D039 38                            SEC
0D03A E9 C0                         SBC #$C0
0D03C AA                            TAX
0D03D BD A0 04                      LDA tile_attributes,x
0D040 25 02                         AND temp+2
0D042 9D A0 04                      STA tile_attributes,x
0D045 99 00 03                      STA ppu_buffer,y
0D048 C8                            INY
0D049 68                            PLA
0D04A AA                            TAX
0D04B                           
0D04B                               ;; Tell PPU to update tiles and attributes next frame
0D04B 84 3A                         STY ppu_buffer_pointer
0D04D A9 01                         LDA #$01
0D04F 85 39                         STA ppu_buffer_update
0D051                            
0D051                               ;; We're done - return
0D051 60                            RTS
0D052                           
0D052                           .include "game/subroutine/SetTileAttributeAddress.asm"
0D052                           
0D052                           ;; Set the correct tile attribute address based on game tile (x) 
0D052                           ;; into the correct ppu buffer slot (y)
0D052                           
0D052                           sub_SetTileAttributeAddress:
0D052 A9 23                         LDA #$23
0D054 99 00 03                      STA ppu_buffer,y
0D057 C8                            INY
0D058                               
0D058 8A                            TXA
0D059 29 F0                         AND #%11110000
0D05B 4A                            LSR
0D05C 4A                            LSR
0D05D 4A                            LSR
0D05E 4A                            LSR
0D05F 18                            CLC
0D060 69 01                         ADC #$01
0D062 4A                            LSR
0D063 0A                            ASL
0D064 0A                            ASL
0D065 0A                            ASL
0D066 18                            CLC
0D067 69 C8                         ADC #$C8
0D069 85 00                         STA temp
0D06B 8A                            TXA
0D06C 29 0F                         AND #%00001111
0D06E 18                            CLC
0D06F 69 01                         ADC #$01
0D071 4A                            LSR
0D072 18                            CLC
0D073 65 00                         ADC temp
0D075 85 00                         STA temp
0D077 99 00 03                      STA ppu_buffer,y
0D07A C8                            INY
0D07B                                  
0D07B 60                            RTS
0D07C                           
0D07C                           .include "game/subroutine/SubtractXFromBonus.asm"
0D07C                           
0D07C                           sub_SubtractXFromBonus:
0D07C 86 09                         STX temp+9
0D07E A5 2E                         LDA ball_bonus+2
0D080 38                            SEC
0D081 E5 09                         SBC temp+9
0D083 30 05                         BMI +
0D085 85 2E                             STA ball_bonus+2
0D087 4C 9F D0                          JMP +updateBonusOnScreen
0D08A                               +
0D08A                           
0D08A 18                            CLC
0D08B 69 0A                         ADC #$0A
0D08D 85 2E                         STA ball_bonus+2
0D08F C6 2D                         DEC ball_bonus+1
0D091 10 0C                         BPL +updateBonusOnScreen
0D093                           
0D093 A9 09                         LDA #$09
0D095 85 2D                         STA ball_bonus+1
0D097 C6 2C                         DEC ball_bonus
0D099 10 04                         BPL +updateBonusOnScreen
0D09B                           
0D09B A9 00                         LDA #$00
0D09D 85 2C                         STA ball_bonus
0D09F                           
0D09F                               +updateBonusOnScreen:
0D09F A9 20                         LDA #$20
0D0A1 85 00                         STA temp
0D0A3 A9 9C                         LDA #$9C
0D0A5 85 01                         STA temp+1
0D0A7 A2 02                         LDX #$02
0D0A9                               
0D0A9                               -updateNextDigit:
0D0A9 B5 2C                             LDA ball_bonus,x
0D0AB 18                                CLC
0D0AC 69 01                             ADC #$01
0D0AE 85 02                             STA temp+2
0D0B0 20 CB D0                          JSR sub_WriteByteToPPUBuffer
0D0B3 C6 01                             DEC temp+1
0D0B5 CA                                DEX
0D0B6 10 F1                         BPL -updateNextDigit
0D0B8                           
0D0B8 60                            RTS
0D0B9                           
0D0B9                           .include "game/subroutine/WaitXFrames.asm"
0D0B9                           
0D0B9                           sub_WaitXFrames:
0D0B9                               
0D0B9                               ;; Push X to stack
0D0B9 8A                            TXA
0D0BA 48                            PHA
0D0BB                               
0D0BB                               ;; Wait for NMI
0D0BB 20 01 C5                      JSR sub_WaitForNMI
0D0BE                           
0D0BE                               ;; Clear pointer, except for sprite-zero and ball
0D0BE A9 08                         LDA #$08
0D0C0 85 3D                         STA sprite_ram_pointer
0D0C2                           
0D0C2                               ;; Load animations (if any)
0D0C2 20 D0 C9                      JSR sub_LoadAnimations
0D0C5                               
0D0C5                               ;; Restore original X
0D0C5 68                            PLA
0D0C6 AA                            TAX
0D0C7                               
0D0C7                               ;; Check if all X frames have passed
0D0C7 CA                            DEX
0D0C8 D0 EF                         BNE sub_WaitXFrames
0D0CA                               
0D0CA                               ;; Return
0D0CA 60                            RTS
0D0CB                           
0D0CB                           .include "game/subroutine/WriteByteToPPUBuffer.asm"
0D0CB                           
0D0CB                           ;; Write the byte in temp+2 and the ppu address (temp)
0D0CB                           ;; to a buffer, so NMI can update it before the next frame
0D0CB                           
0D0CB                           sub_WriteByteToPPUBuffer:
0D0CB                           
0D0CB                               ;; Prevent updating until full 3-byte buffer is filled,
0D0CB                               ;; so that graphics won't glitch out if NMI happens during
0D0CB                               ;; updating the buffer
0D0CB A9 00                         LDA #$00
0D0CD 85 39                         STA ppu_buffer_update
0D0CF                           
0D0CF                               ;; Check if buffer full; if so, wait a frame and force update
0D0CF A4 3A                         LDY ppu_buffer_pointer
0D0D1 C0 60                         CPY #$60
0D0D3 D0 05                         BNE +
0D0D5 E6 39                             INC ppu_buffer_update
0D0D7 20 0A C5                          JSR sub_WaitForVBlank
0D0DA                               +
0D0DA                           
0D0DA                               ;; Add ppu_addr high byte to buffer
0D0DA A5 00                         LDA temp
0D0DC 99 00 03                      STA ppu_buffer,y
0D0DF                           
0D0DF                               ;; Add ppu_addr low byte to buffer
0D0DF C8                            INY
0D0E0 A5 01                         LDA temp+1
0D0E2 99 00 03                      STA ppu_buffer,y
0D0E5                           
0D0E5                               ;; Add ppu_data to buffer
0D0E5 C8                            INY
0D0E6 A5 02                         LDA temp+2
0D0E8 99 00 03                      STA ppu_buffer,y
0D0EB                           
0D0EB                               ;; Update buffer pointer
0D0EB C8                            INY
0D0EC 84 3A                         STY ppu_buffer_pointer
0D0EE                           
0D0EE                               ;; Tell NMI to update next round
0D0EE E6 39                         INC ppu_buffer_update
0D0F0                           
0D0F0                               ;; Return
0D0F0 60                            RTS
0D0F1                           
0D0F1                           
0D0F1                           
0D0F1                           
0D0F1                           ;; LUTs
0D0F1                           .include "game/include/tables.asm"
0D0F1                           
0D0F1                           ;; Initial screen palette
0D0F1                           tbl_IntroScreenPalette:
0D0F1 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D0F5 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D0F9 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0D0FD 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D101                           
0D101 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0D105 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0D109 0F 2C 14 30                   .db #$0F, #$2C, #$14, #$30
0D10D 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0D111                           
0D111                           
0D111                           ;; Intro: mapping logo index to chr tile
0D111                           tbl_IntroScreenLogoChr:
0D111 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0D119                           
0D119                           
0D119                           ;; Intro screen data
0D119                           tbl_IntroScreenData:
0D119                           
0D119                               ;; Set PPU address $20AC and draw
0D119 60 AC                         .db #$60, #$AC
0D11B 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0D123                           
0D123                               ;; Set PPU address $20CF and draw
0D123 60 CF                         .db #$60, #$CF
0D125 01 02                         .db #_0, #_1
0D127                               
0D127                               ;; Set PPU address $2122 and draw
0D127 61 22                         .db #$61, #$22
0D129 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0D130 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0D136 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0D13E 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0D143                               
0D143                               ;; Set PPU address $2147 and draw
0D143 61 47                         .db #$61, #$47
0D145 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0D14C 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D150 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0D156 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0D15C                               
0D15C                               ;; Set PPU address $218B and draw
0D15C 61 8B                         .db #$61, #$8B
0D15E 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0D164 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0D169                               
0D169                               ;; Set PPU address $21E6 and draw
0D169 61 E6                         .db #$61, #$E6
0D16B 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0D173 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0D177 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0D17E                               
0D17E                               ;; Set PPU address $222D and draw
0D17E 62 2D                         .db #$62, #$2D
0D180 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0D186                               
0D186                               ;; Set PPU address $2281
0D186 62 81                         .db #$62, #$81
0D188                               
0D188                               ;; Draw the Crillion logo
0D188 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0D18C C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D190 C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0D194 E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0D198                               
0D198 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0D19C C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1A0 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1A4 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1A8                               
0D1A8 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0D1AC C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1B0 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1B4 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1B8                           
0D1B8 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D1BC C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1C0 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1C4 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1C8                               
0D1C8 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0D1CC C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0D1D0 C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0D1D4 D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0D1D8                           
0D1D8 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0D1DC C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0D1E0 C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0D1E4 F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0D1E7                           
0D1E7                               ;; End of intro
0D1E7 3F                            .db #$3F
0D1E8                           
0D1E8                           
0D1E8                           ;; Animation frames table
0D1E8                           .include "game/include/table/animation_frames.asm"
0D1E8                           
0D1E8                           ;; CHR tile-id's per slide of explosion
0D1E8                           explosion_slide0:
0D1E8 00 00 00                      .db #$00, #$00, #$00
0D1EB 2C 2D 2E                      .db #$2C, #$2D, #$2E
0D1EE 3C 3D 3E                      .db #$3C, #$3D, #$3E
0D1F1                           
0D1F1                           explosion_slide1:
0D1F1 00 00 00                      .db #$00, #$00, #$00
0D1F4 29 2A 2B                      .db #$29, #$2A, #$2B
0D1F7 39 3A 3B                      .db #$39, #$3A, #$3B
0D1FA                           
0D1FA                           explosion_slide2:
0D1FA 16 00 00                      .db #$16, #$00, #$00
0D1FD 26 27 28                      .db #$26, #$27, #$28
0D200 36 37 38                      .db #$36, #$37, #$38
0D203                           
0D203                           explosion_slide3:
0D203 00 14 15                      .db #$00, #$14, #$15
0D206 23 24 25                      .db #$23, #$24, #$25
0D209 33 34 35                      .db #$33, #$34, #$35
0D20C                           
0D20C                           explosion_slide4:
0D20C 10 11 12                      .db #$10, #$11, #$12
0D20F 20 21 22                      .db #$20, #$21, #$22
0D212 30 31 32                      .db #$30, #$31, #$32
0D215                           
0D215                           ;; High and low bytes of animation slides
0D215                           explosion_anim_hi:
0D215 D1                            .db >#explosion_slide0
0D216 D1                            .db >#explosion_slide1
0D217 D1                            .db >#explosion_slide2
0D218 D2                            .db >#explosion_slide3
0D219 D2                            .db >#explosion_slide4
0D21A D2                            .db >#explosion_slide4
0D21B D2                            .db >#explosion_slide3
0D21C D1                            .db >#explosion_slide2
0D21D D1                            .db >#explosion_slide1
0D21E D1                            .db >#explosion_slide0
0D21F                           
0D21F                           explosion_anim_lo:
0D21F E8                            .db <#explosion_slide0
0D220 F1                            .db <#explosion_slide1
0D221 FA                            .db <#explosion_slide2
0D222 03                            .db <#explosion_slide3
0D223 0C                            .db <#explosion_slide4
0D224 0C                            .db <#explosion_slide4
0D225 03                            .db <#explosion_slide3
0D226 FA                            .db <#explosion_slide2
0D227 F1                            .db <#explosion_slide1
0D228 E8                            .db <#explosion_slide0
0D229                           
0D229                           
0D229                           
0D229                           ;; Ball palette color table (CBRYGM)
0D229                           tbl_BallColorDark:
0D229 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0D22F                            
0D22F                           tbl_BallColorLight:
0D22F 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0D235                           
0D235                               
0D235                           ;; Screen mode drawing routine addresses
0D235                           tbl_LoadScreenHi:
0D235 CE CA CE                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0D238                           
0D238                           tbl_LoadScreenLo:
0D238 3D 75 CC                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0D23B                           
0D23B                           
0D23B                           ;; Level data
0D23B                           .include "game/include/table/level_data.asm"
0D23B                           
0D23B                           ;; Level layout tables
0D23B                           ;; (see ext_assets/LevelDesign.xlsx for more info)
0D23B                           
0D23B                           ifdef TESTING
0D23B                           lvl_test:
0D23B 64 41 74 07 11 11 C1 13       .db #$64, #%01000001, #$74, #%00000111, #$11, #%00010001, #$C1, #%00010011
0D243 18 1A C8 0B 13 E7 58 67       .db #$18, #%00011010, #$C8, #%00001011, #$13, #%11100111, #$58, #%01100111
0D24B FF                            .db #LEVEL_END
0D24C                           endif
0D24C                           
0D24C                           lvl_layout_01:
0D24C 61 21                         .db #$61, #%00100001
0D24E 52 61                         .db #$52, #%01100001
0D250 43 65                         .db #$43, #%01100101
0D252 83 05                         .db #$83, #%00000101
0D254 93 15                         .db #$93, #%00010101
0D256 34 7A                         .db #$34, #%01111010
0D258 74 7A                         .db #$74, #%01111010
0D25A 35 7A                         .db #$35, #%01111010
0D25C 75 7A                         .db #$75, #%01111010
0D25E 46 65                         .db #$46, #%01100101
0D260 86 25                         .db #$86, #%00100101
0D262 57 61                         .db #$57, #%01100001
0D264 68 21                         .db #$68, #%00100001
0D266 FF                            .db #LEVEL_END
0D267                           
0D267                           lvl_layout_02:
0D267 C0 0A                         .db #$C0, #%00001010
0D269 11 15                         .db #$11, #%00010101
0D26B 21 62                         .db #$21, #%01100010
0D26D 61 62                         .db #$61, #%01100010
0D26F A1 42                         .db #$A1, #%01000010
0D271 12 67                         .db #$12, #%01100111
0D273 52 67                         .db #$52, #%01100111
0D275 92 67                         .db #$92, #%01100111
0D277 C3 0D                         .db #$C3, #%00001101
0D279 14 11                         .db #$14, #%00010001
0D27B 24 65                         .db #$24, #%01100101
0D27D 64 65                         .db #$64, #%01100101
0D27F A4 45                         .db #$A4, #%01000101
0D281 15 67                         .db #$15, #%01100111
0D283 55 67                         .db #$55, #%01100111
0D285 95 67                         .db #$95, #%01100111
0D287 17 12                         .db #$17, #%00010010
0D289 27 61                         .db #$27, #%01100001
0D28B 67 61                         .db #$67, #%01100001
0D28D A7 41                         .db #$A7, #%01000001
0D28F 38 7A                         .db #$38, #%01111010
0D291 98 5A                         .db #$98, #%01011010
0D293 18 27                         .db #$18, #%00100111
0D295 48 27                         .db #$48, #%00100111
0D297 78 27                         .db #$78, #%00100111
0D299 C8 07                         .db #$C8, #%00000111
0D29B FF                            .db #LEVEL_END
0D29C                           
0D29C                           lvl_layout_03:
0D29C 00 7A                         .db #$00, #%01111010
0D29E 40 7A                         .db #$40, #%01111010
0D2A0 80 7A                         .db #$80, #%01111010
0D2A2 C0 1A                         .db #$C0, #%00011010
0D2A4 10 A1                         .db #$10, #%10100001
0D2A6 13 E1                         .db #$13, #%11100001
0D2A8 17 C1                         .db #$17, #%11000001
0D2AA 30 C1                         .db #$30, #%11000001
0D2AC 34 C1                         .db #$34, #%11000001
0D2AE 38 A1                         .db #$38, #%10100001
0D2B0 50 E1                         .db #$50, #%11100001
0D2B2 55 81                         .db #$55, #%10000001
0D2B4 57 C1                         .db #$57, #%11000001
0D2B6 70 C1                         .db #$70, #%11000001
0D2B8 73 A1                         .db #$73, #%10100001
0D2BA 76 E1                         .db #$76, #%11100001
0D2BC 90 E1                         .db #$90, #%11100001
0D2BE 95 81                         .db #$95, #%10000001
0D2C0 97 C1                         .db #$97, #%11000001
0D2C2 B0 C1                         .db #$B0, #%11000001
0D2C4 B4 C1                         .db #$B4, #%11000001
0D2C6 B8 A1                         .db #$B8, #%10100001
0D2C8 D0 A1                         .db #$D0, #%10100001
0D2CA D3 E1                         .db #$D3, #%11100001
0D2CC D7 C1                         .db #$D7, #%11000001
0D2CE FF                            .db #LEVEL_END
0D2CF                           
0D2CF                           lvl_layout_04:
0D2CF 00 4C                         .db #$00, #%01001100
0D2D1 40 6C                         .db #$40, #%01101100
0D2D3 80 4C                         .db #$80, #%01001100
0D2D5 81 AC                         .db #$81, #%10101100
0D2D7 C1 2C                         .db #$C1, #%00101100
0D2D9 02 6C                         .db #$02, #%01101100
0D2DB 42 CC                         .db #$42, #%11001100
0D2DD 62 EC                         .db #$62, #%11101100
0D2DF A2 CC                         .db #$A2, #%11001100
0D2E1 C3 CC                         .db #$C3, #%11001100
0D2E3 04 4C                         .db #$04, #%01001100
0D2E5 84 2C                         .db #$84, #%00101100
0D2E7 25 AC                         .db #$25, #%10101100
0D2E9 85 AC                         .db #$85, #%10101100
0D2EB 06 AC                         .db #$06, #%10101100
0D2ED 36 CC                         .db #$36, #%11001100
0D2EF 56 CC                         .db #$56, #%11001100
0D2F1 66 EC                         .db #$66, #%11101100
0D2F3 96 6C                         .db #$96, #%01101100
0D2F5 C7 AC                         .db #$C7, #%10101100
0D2F7 08 2C                         .db #$08, #%00101100
0D2F9 78 6C                         .db #$78, #%01101100
0D2FB D8 0C                         .db #$D8, #%00001100
0D2FD 30 A1                         .db #$30, #%10100001
0D2FF B0 21                         .db #$B0, #%00100001
0D301 01 41                         .db #$01, #%01000001
0D303 41 61                         .db #$41, #%01100001
0D305 91 A1                         .db #$91, #%10100001
0D307 A1 21                         .db #$A1, #%00100001
0D309 52 C1                         .db #$52, #%11000001
0D30B 72 E1                         .db #$72, #%11100001
0D30D B2 C1                         .db #$B2, #%11000001
0D30F C2 21                         .db #$C2, #%00100001
0D311 03 41                         .db #$03, #%01000001
0D313 33 C1                         .db #$33, #%11000001
0D315 83 21                         .db #$83, #%00100001
0D317 D3 E1                         .db #$D3, #%11100001
0D319 05 21                         .db #$05, #%00100001
0D31B 45 E1                         .db #$45, #%11100001
0D31D A5 21                         .db #$A5, #%00100001
0D31F 16 A1                         .db #$16, #%10100001
0D321 76 A1                         .db #$76, #%10100001
0D323 27 A1                         .db #$27, #%10100001
0D325 57 21                         .db #$57, #%00100001
0D327 87 41                         .db #$87, #%01000001
0D329 B7 A1                         .db #$B7, #%10100001
0D32B 19 21                         .db #$19, #%00100001
0D32D 39 41                         .db #$39, #%01000001
0D32F 89 41                         .db #$89, #%01000001
0D331 C9 21                         .db #$C9, #%00100001
0D333 D0 1A                         .db #$D0, #%00011010
0D335 55 1A                         .db #$55, #%00011010
0D337 95 1A                         .db #$95, #%00011010
0D339 D7 1A                         .db #$D7, #%00011010
0D33B 09 1A                         .db #$09, #%00011010
0D33D 79 1A                         .db #$79, #%00011010
0D33F FF                            .db #LEVEL_END
0D340                           
0D340                           lvl_layout_05:
0D340 40 0A                         .db #$40, #%00001010
0D342 70 1A                         .db #$70, #%00011010
0D344 B0 42                         .db #$B0, #%01000010
0D346 41 A7                         .db #$41, #%10100111
0D348 B1 22                         .db #$B1, #%00100010
0D34A D1 15                         .db #$D1, #%00010101
0D34C 22 0A                         .db #$22, #%00001010
0D34E 52 05                         .db #$52, #%00000101
0D350 B2 42                         .db #$B2, #%01000010
0D352 03 27                         .db #$03, #%00100111
0D354 33 67                         .db #$33, #%01100111
0D356 73 67                         .db #$73, #%01100111
0D358 B3 47                         .db #$B3, #%01000111
0D35A 05 E5                         .db #$05, #%11100101
0D35C 25 A5                         .db #$25, #%10100101
0D35E 35 25                         .db #$35, #%00100101
0D360 65 45                         .db #$65, #%01000101
0D362 A5 45                         .db #$A5, #%01000101
0D364 46 E5                         .db #$46, #%11100101
0D366 66 E5                         .db #$66, #%11100101
0D368 86 E5                         .db #$86, #%11100101
0D36A A6 E2                         .db #$A6, #%11100010
0D36C C6 E5                         .db #$C6, #%11100101
0D36E 27 25                         .db #$27, #%00100101
0D370 77 05                         .db #$77, #%00000101
0D372 B7 02                         .db #$B7, #%00000010
0D374 09 05                         .db #$09, #%00000101
0D376 79 05                         .db #$79, #%00000101
0D378 B9 02                         .db #$B9, #%00000010
0D37A FF                            .db #LEVEL_END
0D37B                           
0D37B                           lvl_layout_06:
0D37B 00 03                         .db #$00, #%00000011
0D37D 20 03                         .db #$20, #%00000011
0D37F 40 03                         .db #$40, #%00000011
0D381 A0 03                         .db #$A0, #%00000011
0D383 C0 03                         .db #$C0, #%00000011
0D385 11 03                         .db #$11, #%00000011
0D387 31 03                         .db #$31, #%00000011
0D389 51 03                         .db #$51, #%00000011
0D38B 91 03                         .db #$91, #%00000011
0D38D B1 03                         .db #$B1, #%00000011
0D38F D1 03                         .db #$D1, #%00000011
0D391 02 03                         .db #$02, #%00000011
0D393 22 03                         .db #$22, #%00000011
0D395 42 03                         .db #$42, #%00000011
0D397 A2 03                         .db #$A2, #%00000011
0D399 C2 03                         .db #$C2, #%00000011
0D39B 13 03                         .db #$13, #%00000011
0D39D 33 03                         .db #$33, #%00000011
0D39F 53 03                         .db #$53, #%00000011
0D3A1 93 03                         .db #$93, #%00000011
0D3A3 B3 03                         .db #$B3, #%00000011
0D3A5 D3 03                         .db #$D3, #%00000011
0D3A7 04 03                         .db #$04, #%00000011
0D3A9 24 03                         .db #$24, #%00000011
0D3AB 44 03                         .db #$44, #%00000011
0D3AD A4 03                         .db #$A4, #%00000011
0D3AF C4 03                         .db #$C4, #%00000011
0D3B1 15 03                         .db #$15, #%00000011
0D3B3 35 03                         .db #$35, #%00000011
0D3B5 55 03                         .db #$55, #%00000011
0D3B7 95 03                         .db #$95, #%00000011
0D3B9 B5 03                         .db #$B5, #%00000011
0D3BB D5 03                         .db #$D5, #%00000011
0D3BD 06 03                         .db #$06, #%00000011
0D3BF 26 03                         .db #$26, #%00000011
0D3C1 46 03                         .db #$46, #%00000011
0D3C3 A6 03                         .db #$A6, #%00000011
0D3C5 C6 03                         .db #$C6, #%00000011
0D3C7 17 03                         .db #$17, #%00000011
0D3C9 37 03                         .db #$37, #%00000011
0D3CB 57 03                         .db #$57, #%00000011
0D3CD 97 03                         .db #$97, #%00000011
0D3CF B7 03                         .db #$B7, #%00000011
0D3D1 D7 03                         .db #$D7, #%00000011
0D3D3 08 03                         .db #$08, #%00000011
0D3D5 28 03                         .db #$28, #%00000011
0D3D7 48 03                         .db #$48, #%00000011
0D3D9 A8 03                         .db #$A8, #%00000011
0D3DB C8 03                         .db #$C8, #%00000011
0D3DD 19 03                         .db #$19, #%00000011
0D3DF 39 03                         .db #$39, #%00000011
0D3E1 59 03                         .db #$59, #%00000011
0D3E3 99 03                         .db #$99, #%00000011
0D3E5 B9 03                         .db #$B9, #%00000011
0D3E7 D9 03                         .db #$D9, #%00000011
0D3E9 60 4B                         .db #$60, #%01001011
0D3EB 71 CB                         .db #$71, #%11001011
0D3ED 62 4B                         .db #$62, #%01001011
0D3EF 64 4B                         .db #$64, #%01001011
0D3F1 75 CB                         .db #$75, #%11001011
0D3F3 66 4B                         .db #$66, #%01001011
0D3F5 68 4B                         .db #$68, #%01001011
0D3F7 79 0B                         .db #$79, #%00001011
0D3F9 70 03                         .db #$70, #%00000011
0D3FB 72 03                         .db #$72, #%00000011
0D3FD 74 03                         .db #$74, #%00000011
0D3FF 76 03                         .db #$76, #%00000011
0D401 78 03                         .db #$78, #%00000011
0D403 FF                            .db #LEVEL_END
0D404                           
0D404                           lvl_layout_07:
0D404 00 11                         .db #$00, #%00010001
0D406 01 FA                         .db #$01, #%11111010
0D408 12 BA                         .db #$12, #%10111010
0D40A 23 DA                         .db #$23, #%11011010
0D40C 34 FA                         .db #$34, #%11111010
0D40E 05 DA                         .db #$05, #%11011010
0D410 15 FA                         .db #$15, #%11111010
0D412 45 BA                         .db #$45, #%10111010
0D414 56 DA                         .db #$56, #%11011010
0D416 27 BA                         .db #$27, #%10111010
0D418 67 DA                         .db #$67, #%11011010
0D41A 38 3A                         .db #$38, #%00111010
0D41C 78 BA                         .db #$78, #%10111010
0D41E 09 3A                         .db #$09, #%00111010
0D420 39 3A                         .db #$39, #%00111010
0D422 89 1A                         .db #$89, #%00011010
0D424 B0 01                         .db #$B0, #%00000001
0D426 D0 01                         .db #$D0, #%00000001
0D428 A1 01                         .db #$A1, #%00000001
0D42A C1 11                         .db #$C1, #%00010001
0D42C B2 01                         .db #$B2, #%00000001
0D42E D2 01                         .db #$D2, #%00000001
0D430 A3 01                         .db #$A3, #%00000001
0D432 C3 01                         .db #$C3, #%00000001
0D434 B4 01                         .db #$B4, #%00000001
0D436 D4 01                         .db #$D4, #%00000001
0D438 A5 01                         .db #$A5, #%00000001
0D43A C5 01                         .db #$C5, #%00000001
0D43C B6 01                         .db #$B6, #%00000001
0D43E D6 01                         .db #$D6, #%00000001
0D440 A7 01                         .db #$A7, #%00000001
0D442 C7 01                         .db #$C7, #%00000001
0D444 FF                            .db #LEVEL_END
0D445                           
0D445                           lvl_layout_08:
0D445 40 B5                         .db #$40, #%10110101
0D447 31 0D                         .db #$31, #%00001101
0D449 61 10                         .db #$61, #%00010000
0D44B 42 C7                         .db #$42, #%11000111
0D44D 52 67                         .db #$52, #%01100111
0D44F 63 C7                         .db #$63, #%11000111
0D451 83 E7                         .db #$83, #%11100111
0D453 05 07                         .db #$05, #%00000111
0D455 15 3A                         .db #$15, #%00111010
0D457 07 63                         .db #$07, #%01100011
0D459 27 13                         .db #$27, #%00010011
0D45B 38 A5                         .db #$38, #%10100101
0D45D 09 14                         .db #$09, #%00010100
0D45F 19 05                         .db #$19, #%00000101
0D461 D0 E0                         .db #$D0, #%11100000
0D463 C2 A0                         .db #$C2, #%10100000
0D465 B3 E0                         .db #$B3, #%11100000
0D467 D5 E0                         .db #$D5, #%11100000
0D469 C6 E0                         .db #$C6, #%11100000
0D46B B0 C4                         .db #$B0, #%11000100
0D46D C0 A4                         .db #$C0, #%10100100
0D46F D1 A4                         .db #$D1, #%10100100
0D471 C4 24                         .db #$C4, #%00100100
0D473 C5 04                         .db #$C5, #%00000100
0D475 B7 44                         .db #$B7, #%01000100
0D477 B8 A4                         .db #$B8, #%10100100
0D479 D9 05                         .db #$D9, #%00000101
0D47B FF                            .db #LEVEL_END
0D47C                           
0D47C                           lvl_layout_09:
0D47C 81 04                         .db #$81, #%00000100
0D47E D1 04                         .db #$D1, #%00000100
0D480 32 C4                         .db #$32, #%11000100
0D482 A2 C4                         .db #$A2, #%11000100
0D484 C2 24                         .db #$C2, #%00100100
0D486 13 24                         .db #$13, #%00100100
0D488 53 04                         .db #$53, #%00000100
0D48A C3 27                         .db #$C3, #%00100111
0D48C 15 6C                         .db #$15, #%01101100
0D48E 55 6C                         .db #$55, #%01101100
0D490 95 6C                         .db #$95, #%01101100
0D492 D5 0C                         .db #$D5, #%00001100
0D494 27 C7                         .db #$27, #%11000111
0D496 47 C7                         .db #$47, #%11000111
0D498 67 C7                         .db #$67, #%11000111
0D49A 87 C7                         .db #$87, #%11000111
0D49C A7 C7                         .db #$A7, #%11000111
0D49E C7 C7                         .db #$C7, #%11000111
0D4A0 08 13                         .db #$08, #%00010011
0D4A2 28 15                         .db #$28, #%00010101
0D4A4 48 12                         .db #$48, #%00010010
0D4A6 68 15                         .db #$68, #%00010101
0D4A8 88 11                         .db #$88, #%00010001
0D4AA A8 10                         .db #$A8, #%00010000
0D4AC C8 14                         .db #$C8, #%00010100
0D4AE 09 07                         .db #$09, #%00000111
0D4B0 19 03                         .db #$19, #%00000011
0D4B2 39 05                         .db #$39, #%00000101
0D4B4 59 02                         .db #$59, #%00000010
0D4B6 79 05                         .db #$79, #%00000101
0D4B8 99 01                         .db #$99, #%00000001
0D4BA B9 00                         .db #$B9, #%00000000
0D4BC D9 04                         .db #$D9, #%00000100
0D4BE FF                            .db #LEVEL_END
0D4BF                           
0D4BF                           lvl_layout_10:
0D4BF 00 02                         .db #$00, #%00000010
0D4C1 10 C9                         .db #$10, #%11001001
0D4C3 50 C9                         .db #$50, #%11001001
0D4C5 90 C9                         .db #$90, #%11001001
0D4C7 D0 C9                         .db #$D0, #%11001001
0D4C9 31 C9                         .db #$31, #%11001001
0D4CB 71 C9                         .db #$71, #%11001001
0D4CD B1 C9                         .db #$B1, #%11001001
0D4CF 13 C9                         .db #$13, #%11001001
0D4D1 53 C9                         .db #$53, #%11001001
0D4D3 93 C9                         .db #$93, #%11001001
0D4D5 D3 C9                         .db #$D3, #%11001001
0D4D7 34 C9                         .db #$34, #%11001001
0D4D9 74 C9                         .db #$74, #%11001001
0D4DB B4 C9                         .db #$B4, #%11001001
0D4DD 16 C9                         .db #$16, #%11001001
0D4DF 56 C9                         .db #$56, #%11001001
0D4E1 96 C9                         .db #$96, #%11001001
0D4E3 D6 C9                         .db #$D6, #%11001001
0D4E5 37 C9                         .db #$37, #%11001001
0D4E7 77 C9                         .db #$77, #%11001001
0D4E9 B7 C9                         .db #$B7, #%11001001
0D4EB D8 12                         .db #$D8, #%00010010
0D4ED FF                            .db #LEVEL_END
0D4EE                           
0D4EE                           lvl_layout_11:
0D4EE 00 65                         .db #$00, #%01100101
0D4F0 40 45                         .db #$40, #%01000101
0D4F2 50 A7                         .db #$50, #%10100111
0D4F4 80 05                         .db #$80, #%00000101
0D4F6 90 A7                         .db #$90, #%10100111
0D4F8 A0 65                         .db #$A0, #%01100101
0D4FA 01 43                         .db #$01, #%01000011
0D4FC 31 23                         .db #$31, #%00100011
0D4FE 61 A7                         .db #$61, #%10100111
0D500 81 A7                         .db #$81, #%10100111
0D502 A1 63                         .db #$A1, #%01100011
0D504 02 44                         .db #$02, #%01000100
0D506 32 44                         .db #$32, #%01000100
0D508 92 04                         .db #$92, #%00000100
0D50A A2 64                         .db #$A2, #%01100100
0D50C 03 40                         .db #$03, #%01000000
0D50E 33 40                         .db #$33, #%01000000
0D510 64 81                         .db #$64, #%10000001
0D512 84 82                         .db #$84, #%10000010
0D514 93 00                         .db #$93, #%00000000
0D516 A3 60                         .db #$A3, #%01100000
0D518 04 41                         .db #$04, #%01000001
0D51A 34 41                         .db #$34, #%01000001
0D51C 94 02                         .db #$94, #%00000010
0D51E A4 62                         .db #$A4, #%01100010
0D520 05 47                         .db #$05, #%01000111
0D522 35 67                         .db #$35, #%01100111
0D524 75 0A                         .db #$75, #%00001010
0D526 85 47                         .db #$85, #%01000111
0D528 B5 47                         .db #$B5, #%01000111
0D52A 06 E7                         .db #$06, #%11100111
0D52C 16 5A                         .db #$16, #%01011010
0D52E 26 11                         .db #$26, #%00010001
0D530 46 13                         .db #$46, #%00010011
0D532 56 1A                         .db #$56, #%00011010
0D534 66 14                         .db #$66, #%00010100
0D536 86 10                         .db #$86, #%00010000
0D538 96 5A                         .db #$96, #%01011010
0D53A A6 12                         .db #$A6, #%00010010
0D53C C6 15                         .db #$C6, #%00010101
0D53E D6 E7                         .db #$D6, #%11100111
0D540 FF                            .db #LEVEL_END
0D541                           
0D541                           lvl_layout_12:
0D541 00 00                         .db #$00, #%00000000
0D543 50 C0                         .db #$50, #%11000000
0D545 80 00                         .db #$80, #%00000000
0D547 61 00                         .db #$61, #%00000000
0D549 22 C0                         .db #$22, #%11000000
0D54B 82 E0                         .db #$82, #%11100000
0D54D C2 E0                         .db #$C2, #%11100000
0D54F A3 20                         .db #$A3, #%00100000
0D551 C3 10                         .db #$C3, #%00010000
0D553 04 00                         .db #$04, #%00000000
0D555 54 20                         .db #$54, #%00100000
0D557 15 0A                         .db #$15, #%00001010
0D559 25 C0                         .db #$25, #%11000000
0D55B 55 E0                         .db #$55, #%11100000
0D55D 86 20                         .db #$86, #%00100000
0D55F C6 E0                         .db #$C6, #%11100000
0D561 C7 A0                         .db #$C7, #%10100000
0D563 88 00                         .db #$88, #%00000000
0D565 59 00                         .db #$59, #%00000000
0D567 89 20                         .db #$89, #%00100000
0D569 D9 1A                         .db #$D9, #%00011010
0D56B FF                            .db #LEVEL_END
0D56C                           
0D56C                           lvl_layout_13:
0D56C 10 E0                         .db #$10, #%11100000
0D56E 20 E0                         .db #$20, #%11100000
0D570 30 E0                         .db #$30, #%11100000
0D572 40 40                         .db #$40, #%01000000
0D574 80 60                         .db #$80, #%01100000
0D576 C0 E0                         .db #$C0, #%11100000
0D578 D0 E0                         .db #$D0, #%11100000
0D57A 41 40                         .db #$41, #%01000000
0D57C 71 60                         .db #$71, #%01100000
0D57E 52 60                         .db #$52, #%01100000
0D580 A2 20                         .db #$A2, #%00100000
0D582 43 60                         .db #$43, #%01100000
0D584 83 60                         .db #$83, #%01100000
0D586 14 74                         .db #$14, #%01110100
0D588 54 74                         .db #$54, #%01110100
0D58A 94 74                         .db #$94, #%01110100
0D58C D4 14                         .db #$D4, #%00010100
0D58E 15 0D                         .db #$15, #%00001101
0D590 55 0D                         .db #$55, #%00001101
0D592 95 0D                         .db #$95, #%00001101
0D594 D5 0D                         .db #$D5, #%00001101
0D596 26 0D                         .db #$26, #%00001101
0D598 46 0D                         .db #$46, #%00001101
0D59A 66 0D                         .db #$66, #%00001101
0D59C 86 0D                         .db #$86, #%00001101
0D59E A6 0D                         .db #$A6, #%00001101
0D5A0 C6 0D                         .db #$C6, #%00001101
0D5A2 07 10                         .db #$07, #%00010000
0D5A4 37 0D                         .db #$37, #%00001101
0D5A6 77 0D                         .db #$77, #%00001101
0D5A8 B7 0D                         .db #$B7, #%00001101
0D5AA 28 0D                         .db #$28, #%00001101
0D5AC 48 0D                         .db #$48, #%00001101
0D5AE 68 0D                         .db #$68, #%00001101
0D5B0 88 0D                         .db #$88, #%00001101
0D5B2 A8 0D                         .db #$A8, #%00001101
0D5B4 C8 0D                         .db #$C8, #%00001101
0D5B6 19 0D                         .db #$19, #%00001101
0D5B8 59 0D                         .db #$59, #%00001101
0D5BA 99 0D                         .db #$99, #%00001101
0D5BC D9 0D                         .db #$D9, #%00001101
0D5BE FF                            .db #LEVEL_END
0D5BF                           
0D5BF                           lvl_layout_14:
0D5BF 00 67                         .db #$00, #%01100111
0D5C1 40 67                         .db #$40, #%01100111
0D5C3 80 67                         .db #$80, #%01100111
0D5C5 C0 27                         .db #$C0, #%00100111
0D5C7 01 27                         .db #$01, #%00100111
0D5C9 31 C7                         .db #$31, #%11000111
0D5CB 51 C7                         .db #$51, #%11000111
0D5CD 71 C7                         .db #$71, #%11000111
0D5CF 91 C7                         .db #$91, #%11000111
0D5D1 B1 C7                         .db #$B1, #%11000111
0D5D3 D1 07                         .db #$D1, #%00000111
0D5D5 02 E7                         .db #$02, #%11100111
0D5D7 06 E7                         .db #$06, #%11100111
0D5D9 13 07                         .db #$13, #%00000111
0D5DB D3 07                         .db #$D3, #%00000111
0D5DD 15 07                         .db #$15, #%00000111
0D5DF 35 07                         .db #$35, #%00000111
0D5E1 55 07                         .db #$55, #%00000111
0D5E3 75 07                         .db #$75, #%00000111
0D5E5 95 07                         .db #$95, #%00000111
0D5E7 B5 07                         .db #$B5, #%00000111
0D5E9 D5 07                         .db #$D5, #%00000111
0D5EB 17 07                         .db #$17, #%00000111
0D5ED 37 C7                         .db #$37, #%11000111
0D5EF 57 C7                         .db #$57, #%11000111
0D5F1 77 C7                         .db #$77, #%11000111
0D5F3 97 C7                         .db #$97, #%11000111
0D5F5 B7 C7                         .db #$B7, #%11000111
0D5F7 D7 07                         .db #$D7, #%00000111
0D5F9 19 07                         .db #$19, #%00000111
0D5FB D9 07                         .db #$D9, #%00000111
0D5FD 22 4C                         .db #$22, #%01001100
0D5FF 62 4C                         .db #$62, #%01001100
0D601 A2 4C                         .db #$A2, #%01001100
0D603 24 0C                         .db #$24, #%00001100
0D605 44 0C                         .db #$44, #%00001100
0D607 64 0C                         .db #$64, #%00001100
0D609 84 0C                         .db #$84, #%00001100
0D60B A4 0C                         .db #$A4, #%00001100
0D60D C4 0C                         .db #$C4, #%00001100
0D60F 26 0C                         .db #$26, #%00001100
0D611 46 0C                         .db #$46, #%00001100
0D613 66 0C                         .db #$66, #%00001100
0D615 86 0C                         .db #$86, #%00001100
0D617 A6 0C                         .db #$A6, #%00001100
0D619 C6 0C                         .db #$C6, #%00001100
0D61B 28 4C                         .db #$28, #%01001100
0D61D 68 4C                         .db #$68, #%01001100
0D61F A8 4C                         .db #$A8, #%01001100
0D621 32 04                         .db #$32, #%00000100
0D623 52 04                         .db #$52, #%00000100
0D625 72 04                         .db #$72, #%00000100
0D627 92 04                         .db #$92, #%00000100
0D629 B2 04                         .db #$B2, #%00000100
0D62B 38 04                         .db #$38, #%00000100
0D62D 58 04                         .db #$58, #%00000100
0D62F 78 04                         .db #$78, #%00000100
0D631 98 04                         .db #$98, #%00000100
0D633 B8 04                         .db #$B8, #%00000100
0D635 FF                            .db #LEVEL_END
0D636                           
0D636                           lvl_layout_15:
0D636 00 7A                         .db #$00, #%01111010
0D638 40 7A                         .db #$40, #%01111010
0D63A 80 7A                         .db #$80, #%01111010
0D63C C0 3A                         .db #$C0, #%00111010
0D63E 61 64                         .db #$61, #%01100100
0D640 05 E4                         .db #$05, #%11100100
0D642 15 64                         .db #$15, #%01100100
0D644 55 64                         .db #$55, #%01100100
0D646 95 64                         .db #$95, #%01100100
0D648 D5 E4                         .db #$D5, #%11100100
0D64A 26 04                         .db #$26, #%00000100
0D64C 46 44                         .db #$46, #%01000100
0D64E 76 64                         .db #$76, #%01100100
0D650 C6 04                         .db #$C6, #%00000100
0D652 17 04                         .db #$17, #%00000100
0D654 37 64                         .db #$37, #%01100100
0D656 77 44                         .db #$77, #%01000100
0D658 B7 04                         .db #$B7, #%00000100
0D65A 18 64                         .db #$18, #%01100100
0D65C 58 64                         .db #$58, #%01100100
0D65E 98 64                         .db #$98, #%01100100
0D660 FF                            .db #LEVEL_END
0D661                           
0D661                           lvl_layout_16:
0D661 10 E1                         .db #$10, #%11100001
0D663 20 9A                         .db #$20, #%10011010
0D665 30 E1                         .db #$30, #%11100001
0D667 40 E1                         .db #$40, #%11100001
0D669 50 E1                         .db #$50, #%11100001
0D66B 60 C1                         .db #$60, #%11000001
0D66D 70 E1                         .db #$70, #%11100001
0D66F 80 E1                         .db #$80, #%11100001
0D671 90 E1                         .db #$90, #%11100001
0D673 A0 61                         .db #$A0, #%01100001
0D675 21 C1                         .db #$21, #%11000001
0D677 A1 1A                         .db #$A1, #%00011010
0D679 B1 41                         .db #$B1, #%01000001
0D67B A2 E1                         .db #$A2, #%11100001
0D67D B2 E1                         .db #$B2, #%11100001
0D67F C2 1A                         .db #$C2, #%00011010
0D681 D2 E1                         .db #$D2, #%11100001
0D683 63 1A                         .db #$63, #%00011010
0D685 C3 C1                         .db #$C3, #%11000001
0D687 14 61                         .db #$14, #%01100001
0D689 54 61                         .db #$54, #%01100001
0D68B 94 C1                         .db #$94, #%11000001
0D68D 15 61                         .db #$15, #%01100001
0D68F 55 41                         .db #$55, #%01000001
0D691 85 1A                         .db #$85, #%00011010
0D693 16 41                         .db #$16, #%01000001
0D695 46 1A                         .db #$46, #%00011010
0D697 56 61                         .db #$56, #%01100001
0D699 A6 61                         .db #$A6, #%01100001
0D69B 17 67                         .db #$17, #%01100111
0D69D 57 67                         .db #$57, #%01100111
0D69F 97 67                         .db #$97, #%01100111
0D6A1 D7 07                         .db #$D7, #%00000111
0D6A3 28 41                         .db #$28, #%01000001
0D6A5 58 61                         .db #$58, #%01100001
0D6A7 A8 41                         .db #$A8, #%01000001
0D6A9 18 11                         .db #$18, #%00010001
0D6AB 38 11                         .db #$38, #%00010001
0D6AD 98 11                         .db #$98, #%00010001
0D6AF B8 11                         .db #$B8, #%00010001
0D6B1 D8 11                         .db #$D8, #%00010001
0D6B3 59 09                         .db #$59, #%00001001
0D6B5 FF                            .db #LEVEL_END
0D6B6                           
0D6B6                           lvl_layout_17:
0D6B6 10 EA                         .db #$10, #%11101010
0D6B8 20 E2                         .db #$20, #%11100010
0D6BA 30 62                         .db #$30, #%01100010
0D6BC 70 02                         .db #$70, #%00000010
0D6BE 80 6A                         .db #$80, #%01101010
0D6C0 90 22                         .db #$90, #%00100010
0D6C2 01 AA                         .db #$01, #%10101010
0D6C4 31 6A                         .db #$31, #%01101010
0D6C6 81 2A                         .db #$81, #%00101010
0D6C8 A1 02                         .db #$A1, #%00000010
0D6CA C1 02                         .db #$C1, #%00000010
0D6CC D1 0A                         .db #$D1, #%00001010
0D6CE 32 EA                         .db #$32, #%11101010
0D6D0 42 6A                         .db #$42, #%01101010
0D6D2 62 02                         .db #$62, #%00000010
0D6D4 92 6A                         .db #$92, #%01101010
0D6D6 D2 E2                         .db #$D2, #%11100010
0D6D8 43 1A                         .db #$43, #%00011010
0D6DA 53 CA                         .db #$53, #%11001010
0D6DC 73 02                         .db #$73, #%00000010
0D6DE 83 4A                         .db #$83, #%01001010
0D6E0 B3 CA                         .db #$B3, #%11001010
0D6E2 C3 EA                         .db #$C3, #%11101010
0D6E4 04 0A                         .db #$04, #%00001010
0D6E6 14 A2                         .db #$14, #%10100010
0D6E8 24 AA                         .db #$24, #%10101010
0D6EA 44 AA                         .db #$44, #%10101010
0D6EC 64 6A                         .db #$64, #%01101010
0D6EE 65 6A                         .db #$65, #%01101010
0D6F0 A5 AA                         .db #$A5, #%10101010
0D6F2 06 EA                         .db #$06, #%11101010
0D6F4 16 62                         .db #$16, #%01100010
0D6F6 66 22                         .db #$66, #%00100010
0D6F8 86 2A                         .db #$86, #%00101010
0D6FA 17 42                         .db #$17, #%01000010
0D6FC 47 12                         .db #$47, #%00010010
0D6FE 57 6A                         .db #$57, #%01101010
0D700 97 4A                         .db #$97, #%01001010
0D702 A7 02                         .db #$A7, #%00000010
0D704 18 02                         .db #$18, #%00000010
0D706 28 0A                         .db #$28, #%00001010
0D708 38 22                         .db #$38, #%00100010
0D70A 68 2A                         .db #$68, #%00101010
0D70C 88 62                         .db #$88, #%01100010
0D70E C8 0A                         .db #$C8, #%00001010
0D710 D8 02                         .db #$D8, #%00000010
0D712 19 2A                         .db #$19, #%00101010
0D714 39 2A                         .db #$39, #%00101010
0D716 69 42                         .db #$69, #%01000010
0D718 99 2A                         .db #$99, #%00101010
0D71A B9 42                         .db #$B9, #%01000010
0D71C FF                            .db #LEVEL_END
0D71D                           
0D71D                           lvl_layout_18:
0D71D 00 12                         .db #$00, #%00010010
0D71F 40 1A                         .db #$40, #%00011010
0D721 50 11                         .db #$50, #%00010001
0D723 70 1A                         .db #$70, #%00011010
0D725 80 10                         .db #$80, #%00010000
0D727 D0 13                         .db #$D0, #%00010011
0D729 01 1A                         .db #$01, #%00011010
0D72B 22 15                         .db #$22, #%00010101
0D72D A2 1A                         .db #$A2, #%00011010
0D72F B2 14                         .db #$B2, #%00010100
0D731 03 67                         .db #$03, #%01100111
0D733 43 67                         .db #$43, #%01100111
0D735 83 67                         .db #$83, #%01100111
0D737 24 09                         .db #$24, #%00001001
0D739 74 0D                         .db #$74, #%00001101
0D73B C4 0A                         .db #$C4, #%00001010
0D73D 05 A7                         .db #$05, #%10100111
0D73F 45 27                         .db #$45, #%00100111
0D741 95 27                         .db #$95, #%00100111
0D743 16 C7                         .db #$16, #%11000111
0D745 36 67                         .db #$36, #%01100111
0D747 86 67                         .db #$86, #%01100111
0D749 D6 07                         .db #$D6, #%00000111
0D74B 07 A3                         .db #$07, #%10100011
0D74D 27 23                         .db #$27, #%00100011
0D74F 47 C7                         .db #$47, #%11000111
0D751 57 A0                         .db #$57, #%10100000
0D753 67 A7                         .db #$67, #%10100111
0D755 77 20                         .db #$77, #%00100000
0D757 97 C7                         .db #$97, #%11000111
0D759 A7 A4                         .db #$A7, #%10100100
0D75B B7 A7                         .db #$B7, #%10100111
0D75D C7 24                         .db #$C7, #%00100100
0D75F 28 0B                         .db #$28, #%00001011
0D761 38 A3                         .db #$38, #%10100011
0D763 78 08                         .db #$78, #%00001000
0D765 88 A0                         .db #$88, #%10100000
0D767 C8 0C                         .db #$C8, #%00001100
0D769 D8 A4                         .db #$D8, #%10100100
0D76B 09 43                         .db #$09, #%01000011
0D76D 59 40                         .db #$59, #%01000000
0D76F A9 44                         .db #$A9, #%01000100
0D771 FF                            .db #LEVEL_END
0D772                           
0D772                           lvl_layout_19:
0D772 11 A8                         .db #$11, #%10101000
0D774 21 68                         .db #$21, #%01101000
0D776 81 28                         .db #$81, #%00101000
0D778 B1 48                         .db #$B1, #%01001000
0D77A 22 48                         .db #$22, #%01001000
0D77C 62 68                         .db #$62, #%01101000
0D77E B2 28                         .db #$B2, #%00101000
0D780 23 28                         .db #$23, #%00101000
0D782 83 28                         .db #$83, #%00101000
0D784 B3 28                         .db #$B3, #%00101000
0D786 04 E8                         .db #$04, #%11101000
0D788 24 08                         .db #$24, #%00001000
0D78A 44 08                         .db #$44, #%00001000
0D78C 64 E8                         .db #$64, #%11101000
0D78E 84 E8                         .db #$84, #%11101000
0D790 C4 A8                         .db #$C4, #%10101000
0D792 D4 E8                         .db #$D4, #%11101000
0D794 15 48                         .db #$15, #%01001000
0D796 55 C8                         .db #$55, #%11001000
0D798 75 C8                         .db #$75, #%11001000
0D79A A5 08                         .db #$A5, #%00001000
0D79C 36 08                         .db #$36, #%00001000
0D79E B6 08                         .db #$B6, #%00001000
0D7A0 27 48                         .db #$27, #%01001000
0D7A2 97 28                         .db #$97, #%00101000
0D7A4 C7 08                         .db #$C7, #%00001000
0D7A6 09 61                         .db #$09, #%01100001
0D7A8 19 11                         .db #$19, #%00010001
0D7AA 49 61                         .db #$49, #%01100001
0D7AC 89 31                         .db #$89, #%00110001
0D7AE A9 61                         .db #$A9, #%01100001
0D7B0 FF                            .db #LEVEL_END
0D7B1                           
0D7B1                           lvl_layout_20:
0D7B1 00 60                         .db #$00, #%01100000
0D7B3 10 1A                         .db #$10, #%00011010
0D7B5 40 A7                         .db #$40, #%10100111
0D7B7 50 20                         .db #$50, #%00100000
0D7B9 70 1A                         .db #$70, #%00011010
0D7BB 80 40                         .db #$80, #%01000000
0D7BD B0 1A                         .db #$B0, #%00011010
0D7BF C0 20                         .db #$C0, #%00100000
0D7C1 01 40                         .db #$01, #%01000000
0D7C3 31 1A                         .db #$31, #%00011010
0D7C5 A1 40                         .db #$A1, #%01000000
0D7C7 D1 1A                         .db #$D1, #%00011010
0D7C9 43 67                         .db #$43, #%01100111
0D7CB 83 47                         .db #$83, #%01000111
0D7CD 44 A7                         .db #$44, #%10100111
0D7CF 54 25                         .db #$54, #%00100101
0D7D1 94 08                         .db #$94, #%00001000
0D7D3 A4 A7                         .db #$A4, #%10100111
0D7D5 55 05                         .db #$55, #%00000101
0D7D7 65 08                         .db #$65, #%00001000
0D7D9 06 27                         .db #$06, #%00100111
0D7DB 36 67                         .db #$36, #%01100111
0D7DD 76 28                         .db #$76, #%00101000
0D7DF A6 27                         .db #$A6, #%00100111
0D7E1 D6 07                         .db #$D6, #%00000111
0D7E3 A7 A7                         .db #$A7, #%10100111
0D7E5 08 60                         .db #$08, #%01100000
0D7E7 09 60                         .db #$09, #%01100000
0D7E9 18 A7                         .db #$18, #%10100111
0D7EB 48 A7                         .db #$48, #%10100111
0D7ED 58 47                         .db #$58, #%01000111
0D7EF 88 27                         .db #$88, #%00100111
0D7F1 B8 20                         .db #$B8, #%00100000
0D7F3 D8 1A                         .db #$D8, #%00011010
0D7F5 59 15                         .db #$59, #%00010101
0D7F7 69 60                         .db #$69, #%01100000
0D7F9 A9 60                         .db #$A9, #%01100000
0D7FB FF                            .db #LEVEL_END
0D7FC                           
0D7FC                           lvl_layout_21:
0D7FC 00 13                         .db #$00, #%00010011
0D7FE 10 11                         .db #$10, #%00010001
0D800 20 67                         .db #$20, #%01100111
0D802 60 67                         .db #$60, #%01100111
0D804 A0 47                         .db #$A0, #%01000111
0D806 D0 15                         .db #$D0, #%00010101
0D808 32 63                         .db #$32, #%01100011
0D80A 72 05                         .db #$72, #%00000101
0D80C 82 43                         .db #$82, #%01000011
0D80E B2 43                         .db #$B2, #%01000011
0D810 33 03                         .db #$33, #%00000011
0D812 43 2A                         .db #$43, #%00101010
0D814 63 7A                         .db #$63, #%01111010
0D816 73 2A                         .db #$73, #%00101010
0D818 A3 7A                         .db #$A3, #%01111010
0D81A 34 63                         .db #$34, #%01100011
0D81C 74 63                         .db #$74, #%01100011
0D81E B4 43                         .db #$B4, #%01000011
0D820 06 63                         .db #$06, #%01100011
0D822 46 63                         .db #$46, #%01100011
0D824 86 63                         .db #$86, #%01100011
0D826 C6 C3                         .db #$C6, #%11000011
0D828 07 7A                         .db #$07, #%01111010
0D82A 47 7A                         .db #$47, #%01111010
0D82C 67 0A                         .db #$67, #%00001010
0D82E 87 7A                         .db #$87, #%01111010
0D830 08 13                         .db #$08, #%00010011
0D832 18 43                         .db #$18, #%01000011
0D834 48 63                         .db #$48, #%01100011
0D836 88 63                         .db #$88, #%01100011
0D838 FF                            .db #LEVEL_END
0D839                           
0D839                           lvl_layout_22:
0D839 00 7A                         .db #$00, #%01111010
0D83B 40 7A                         .db #$40, #%01111010
0D83D 80 7A                         .db #$80, #%01111010
0D83F C0 3A                         .db #$C0, #%00111010
0D841 13 67                         .db #$13, #%01100111
0D843 83 A7                         .db #$83, #%10100111
0D845 B3 07                         .db #$B3, #%00000111
0D847 14 07                         .db #$14, #%00000111
0D849 44 07                         .db #$44, #%00000111
0D84B A4 07                         .db #$A4, #%00000111
0D84D 15 A5                         .db #$15, #%10100101
0D84F 45 A5                         .db #$45, #%10100101
0D851 85 25                         .db #$85, #%00100101
0D853 86 05                         .db #$86, #%00000101
0D855 A6 05                         .db #$A6, #%00000101
0D857 17 11                         .db #$17, #%00010001
0D859 47 A1                         .db #$47, #%10100001
0D85B 87 A1                         .db #$87, #%10100001
0D85D B7 A1                         .db #$B7, #%10100001
0D85F 18 41                         .db #$18, #%01000001
0D861 68 01                         .db #$68, #%00000001
0D863 D8 01                         .db #$D8, #%00000001
0D865 FF                            .db #LEVEL_END
0D866                           
0D866                           lvl_layout_23:
0D866 00 71                         .db #$00, #%01110001
0D868 40 11                         .db #$40, #%00010001
0D86A 50 43                         .db #$50, #%01000011
0D86C 80 D1                         .db #$80, #%11010001
0D86E 90 E3                         .db #$90, #%11100011
0D870 A0 63                         .db #$A0, #%01100011
0D872 01 63                         .db #$01, #%01100011
0D874 41 63                         .db #$41, #%01100011
0D876 A1 63                         .db #$A1, #%01100011
0D878 02 63                         .db #$02, #%01100011
0D87A 42 63                         .db #$42, #%01100011
0D87C 62 11                         .db #$62, #%00010001
0D87E A2 67                         .db #$A2, #%01100111
0D880 04 63                         .db #$04, #%01100011
0D882 44 23                         .db #$44, #%00100011
0D884 64 D1                         .db #$64, #%11010001
0D886 74 E3                         .db #$74, #%11100011
0D888 84 F1                         .db #$84, #%11110001
0D88A 94 E3                         .db #$94, #%11100011
0D88C A4 C7                         .db #$A4, #%11000111
0D88E B4 23                         .db #$B4, #%00100011
0D890 05 63                         .db #$05, #%01100011
0D892 45 23                         .db #$45, #%00100011
0D894 06 71                         .db #$06, #%01110001
0D896 46 11                         .db #$46, #%00010001
0D898 56 E3                         .db #$56, #%11100011
0D89A D6 07                         .db #$D6, #%00000111
0D89C 17 D1                         .db #$17, #%11010001
0D89E 27 43                         .db #$27, #%01000011
0D8A0 67 D1                         .db #$67, #%11010001
0D8A2 A7 C7                         .db #$A7, #%11000111
0D8A4 C7 A7                         .db #$C7, #%10100111
0D8A6 D7 B3                         .db #$D7, #%10110011
0D8A8 28 43                         .db #$28, #%01000011
0D8AA 78 43                         .db #$78, #%01000011
0D8AC 29 43                         .db #$29, #%01000011
0D8AE 79 43                         .db #$79, #%01000011
0D8B0 FF                           .db #LEVEL_END
0D8B1                           
0D8B1                           lvl_layout_24:
0D8B1 02 67                         .db #$02, #%01100111
0D8B3 42 67                         .db #$42, #%01100111
0D8B5 82 67                         .db #$82, #%01100111
0D8B7 05 67                         .db #$05, #%01100111
0D8B9 45 67                         .db #$45, #%01100111
0D8BB 85 67                         .db #$85, #%01100111
0D8BD 08 67                         .db #$08, #%01100111
0D8BF 48 67                         .db #$48, #%01100111
0D8C1 88 67                         .db #$88, #%01100111
0D8C3 30 E7                         .db #$30, #%11100111
0D8C5 70 E7                         .db #$70, #%11100111
0D8C7 B0 E7                         .db #$B0, #%11100111
0D8C9 34 E7                         .db #$34, #%11100111
0D8CB 74 E7                         .db #$74, #%11100111
0D8CD B4 E7                         .db #$B4, #%11100111
0D8CF 20 13                         .db #$20, #%00010011
0D8D1 40 10                         .db #$40, #%00010000
0D8D3 80 02                         .db #$80, #%00000010
0D8D5 41 05                         .db #$41, #%00000101
0D8D7 B1 09                         .db #$B1, #%00001001
0D8D9 02 09                         .db #$02, #%00001001
0D8DB 52 0C                         .db #$52, #%00001100
0D8DD 13 11                         .db #$13, #%00010001
0D8DF 33 04                         .db #$33, #%00000100
0D8E1 74 0C                         .db #$74, #%00001100
0D8E3 B4 08                         .db #$B4, #%00001000
0D8E5 15 09                         .db #$15, #%00001001
0D8E7 55 0C                         .db #$55, #%00001100
0D8E9 95 0C                         .db #$95, #%00001100
0D8EB 47 03                         .db #$47, #%00000011
0D8ED A7 12                         .db #$A7, #%00010010
0D8EF 18 15                         .db #$18, #%00010101
0D8F1 09 05                         .db #$09, #%00000101
0D8F3 19 03                         .db #$19, #%00000011
0D8F5 FF                            .db #LEVEL_END
0D8F6                           
0D8F6                           lvl_layout_25:
0D8F6 00 12                         .db #$00, #%00010010
0D8F8 10 63                         .db #$10, #%01100011
0D8FA 60 63                         .db #$60, #%01100011
0D8FC A0 07                         .db #$A0, #%00000111
0D8FE 01 11                         .db #$01, #%00010001
0D900 A1 02                         .db #$A1, #%00000010
0D902 02 67                         .db #$02, #%01100111
0D904 42 07                         .db #$42, #%00000111
0D906 62 67                         .db #$62, #%01100111
0D908 A2 C7                         .db #$A2, #%11000111
0D90A 03 61                         .db #$03, #%01100001
0D90C 43 01                         .db #$43, #%00000001
0D90E 63 61                         .db #$63, #%01100001
0D910 A6 E7                         .db #$A6, #%11100111
0D912 B6 47                         .db #$B6, #%01000111
0D914 C6 01                         .db #$C6, #%00000001
0D916 B7 42                         .db #$B7, #%01000010
0D918 B8 42                         .db #$B8, #%01000010
0D91A C8 0A                         .db #$C8, #%00001010
0D91C 09 7A                         .db #$09, #%01111010
0D91E 49 7A                         .db #$49, #%01111010
0D920 89 3A                         .db #$89, #%00111010
0D922 B9 42                         .db #$B9, #%01000010
0D924 FF                            .db #LEVEL_END
0D925                           
0D925                           ;; Level layout address pointers
0D925                           tbl_lvl_layout_hi:
0D925                           ifdef TESTING
0D925 D2                            .db >#lvl_test
0D926                           endif
0D926 D2 D2 D2 D2 D3                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D92B D3 D4 D4 D4 D4                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D930 D4 D5 D5 D5 D6                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D935 D6 D6 D7 D7 D7                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D93A D7 D8 D8 D8 D8                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D93F                           
0D93F                           tbl_lvl_layout_lo:
0D93F                           ifdef TESTING
0D93F 3B                            .db <#lvl_test
0D940                           endif
0D940 4C 67 9C CF 40                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D945 7B 04 45 7C BF                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D94A EE 41 6C BF 36                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D94F 61 B6 1D 72 B1                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D954 FC 39 66 B1 F6                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D959                           
0D959                           ;; Ball start position (#$YX)
0D959                           tbl_lvl_ball_startpos:
0D959                           ifdef TESTING
0D959 29                            .db #$29
0D95A                           endif
0D95A 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D95F 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D964 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D969 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D96E 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D973                           
0D973                               
0D973                           ;; Ball start direction, color and tile score
0D973                           ;; #% ccc v tttt
0D973                           ;;    ||| | ++++-- tile score
0D973                           ;;    ||| +------- vertical direction, up (0) or down
0D973                           ;;    +++--------- color (CBRYGM)
0D973                           tbl_lvl_ball_init:
0D973                           ifdef TESTING
0D973 20                            .db #%00100000
0D974                           endif
0D974 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D979 70 50 B0 80 30                .db #%01110000, #%01010000, #%10110000, #%10000000, #%00110000
0D97E 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D983 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D988 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D98D                           
0D98D                           
0D98D                           
0D98D                           ;; Helper table to multiply values by 16
0D98D                           tbl_Times16:
0D98D 00 10 20 30 40 50 60 70       .db #$00, #$10, #$20, #$30, #$40, #$50, #$60, #$70
0D995 80 90 A0 B0 C0 D0 E0 F0       .db #$80, #$90, #$A0, #$B0, #$C0, #$D0, #$E0, #$F0
0D99D                               
0D99D                           
0D99D                           ;; Helper table to multiply values by 64
0D99D                           tbl_Times64:
0D99D 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D9A1                           
0D9A1                           
0D9A1                           ;; Metatile ID to CHR data mapper
0D9A1                           tbl_GametileTopLeft:
0D9A1 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D9AB                           
0D9AB                           tbl_GametileTopRight:
0D9AB 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D9B5                           
0D9B5                           tbl_GametileBottomLeft:
0D9B5 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D9BF                           
0D9BF                           tbl_GametileBottomRight:
0D9BF 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D9C9                           
0D9C9                           ;; Metatile ID to RAM byte data mapper
0D9C9                           tbl_GameTileRamByte:
0D9C9 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D9CE                           
0D9CE                           ;; HUD text data
0D9CE                           tbl_HudText:
0D9CE 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D9D6 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D9DD 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D9E5 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S
0D9EA                           
0D9EA                           ;; Move block top left tile based on color
0D9EA                           tbl_MoveBlockTopLeftTile:
0D9EA 00 4A 42 4A 42 4A 42          .db #$00, #$4A, #$42, #$4A, #$42, #$4A, #$42
0D9F1                           
0D9F1                           ;; Game over data
0D9F1                           tbl_GameOver:
0D9F1 11 0B 17 0F                   .db #_G, #_A, #_M, #_E
0D9F5 00 00                         .db #_SPACE, #_SPACE
0D9F7 19 20 0F 1C                   .db #_O, #_V, #_E, #_R
0D9FB                           
0D9FB                           ;; Background fade pallette table
0D9FB                           tbl_BackgroundFade:
0D9FB 00 10 20 30 30 30 20 10..     .db #$00, #$10, #$20, #$30, #$30, #$30, #$20, #$10, #$00, #$0F
0DA05                           
0DA05                           ;; Sound effects
0DA05                           .include "game/include/table/sfx.asm"
0DA05                           ;;
0DA05                           ;; Explosion sound effects
0DA05                           ;;
0DA05                           ;;   #% ffff vvvv
0DA05                           ;;      |||| ++++---- volume (0=low, 15=high)
0DA05                           ;;      ++++-------- frequency (0=low, 15=high)
0DA05                           ;;
0DA05                           ;; #$FF = end of sfx
0DA05                           ;;
0DA05                           
0DA05                           tbl_ExplosionSfx:
0DA05 00                            .db #$00 ; buffer byte
0DA06 04 18 3C 2F 3F 2F 1F 1F       .db #$04, #$18, #$3C, #$2F, #$3F, #$2F, #$1F, #$1F
0DA0E 0F 1F 1F 0F 0F 0F 1F 1F       .db #$0F, #$1F, #$1F, #$0F, #$0F, #$0F, #$1F, #$1F
0DA16 2F 1F 1F 2F 2F 1F 1F 0F       .db #$2F, #$1F, #$1F, #$2F, #$2F, #$1F, #$1F, #$0F
0DA1E 0F 1F 0F 1F 1F 2F 0F 1E       .db #$0F, #$1F, #$0F, #$1F, #$1F, #$2F, #$0F, #$1E
0DA26 1D 0C 0B 0A 19 18 27 06       .db #$1D, #$0C, #$0B, #$0A, #$19, #$18, #$27, #$06
0DA2E 15 14 03 02 01                .db #$15, #$14, #$03, #$02, #$01
0DA33                           
0DA33                           tbl_ThudSfx:
0DA33 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DA34 6D 2F 9F CF DF EF ED DB       .db #$6D, #$2F, #$9F, #$CF, #$DF, #$EF, #$ED, #$DB
0DA3C E8 C6 D4 E2 12                .db #$E8, #$C6, #$D4, #$E2, #$12
0DA41                           
0DA41                           tbl_BounceSfx:
0DA41 00                            .db #$00 ; buffer byte doubles as end byte for explosion sfx
0DA42 5F 46 42 12                   .db #$5F, #$46, #$42, #$12
0DA46                           
0DA46 00                            .db #$00
0DA47                           tbl_Sfx_hi:
0DA47 DA DA DA                      .db >#tbl_ExplosionSfx, >#tbl_ThudSfx, >#tbl_BounceSfx
0DA4A                           
0DA4A                           tbl_Sfx_lo:
0DA4A 05 33 41                      .db <#tbl_ExplosionSfx, <#tbl_ThudSfx, <#tbl_BounceSfx
0DA4D                           
0DA4D                           ;; Lookup table to convert bonus ticks to score
0DA4D                           tbl_BonusToScore:
0DA4D 00 0A 14 1E 28 32 3C 46..     .db #00, #10, #20, #30, #40, #50, #60, #70, #80, #90
0DA57                           
0DA57                           
0DA57                           ;; NMI handler
0DA57                           NMI:
0DA57                               .include "interrupt/nmi.asm"
0DA57                           
0DA57                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0DA57                           ;;
0DA57                           ;; include/nmi.asm
0DA57                           ;;
0DA57                           ;; Non-maskable interrupt script. This script is being executed
0DA57                           ;; when vBlank hits.
0DA57                           ;;
0DA57                           ;;
0DA57                           
0DA57                               ;; Preserve accumulator through stack
0DA57 48                            PHA
0DA58                           
0DA58                               ;; Should NMI be skipped?
0DA58 A5 13                         LDA skip_nmi
0DA5A F0 03                         BEQ +
0DA5C 4C DA DB                          JMP +skip_nmi
0DA5F                               +
0DA5F                           
0DA5F                               ;; When in NMI, skip additional NMI requests
0DA5F A9 01                         LDA #$01
0DA61 85 13                         STA skip_nmi
0DA63                           
0DA63                               ;; Preserve X, Y, and PC through stack
0DA63 8A                            TXA
0DA64 48                            PHA
0DA65 98                            TYA
0DA66 48                            PHA
0DA67 08                            PHP
0DA68                               
0DA68                               ;; Check forced NMI skip
0DA68 A5 14                         LDA force_skip_nmi
0DA6A F0 03                         BEQ +
0DA6C 4C C9 DB                          JMP +force_skip_nmi
0DA6F                               +
0DA6F                           
0DA6F                               ;; Update PPU mask
0DA6F                               ;LDA #$00
0DA6F                               ;STA PPU_CTRL
0DA6F A5 12                         LDA soft_ppu_mask
0DA71 8D 01 20                      STA PPU_MASK
0DA74                               
0DA74                               
0DA74                               ;; Additional PPU updates go here
0DA74                               .include "game/interrupt/nmi.asm"
0DA74                           
0DA74                               ;; Check if ppu_buffer needs updating
0DA74 A5 39                         LDA ppu_buffer_update
0DA76 D0 03                         BNE +
0DA78 4C BA DA                          JMP +no_ppu_buffer_update
0DA7B                               +
0DA7B                           
0DA7B                               ;; Reset ppu control register and mask
0DA7B A2 00                         LDX #$00
0DA7D 8E 00 20                      STX PPU_CTRL
0DA80 8E 01 20                      STX PPU_MASK
0DA83                           
0DA83                               ;; Set up loop
0DA83                               -
0DA83                                   ;; Reset hi/lo latch
0DA83 2C 02 20                          BIT PPU_STATUS
0DA86                           
0DA86                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0DA86 BD 00 03                          LDA ppu_buffer,x
0DA89 8D 06 20                          STA PPU_ADDR
0DA8C E8                                INX
0DA8D BD 00 03                          LDA ppu_buffer,x
0DA90 8D 06 20                          STA PPU_ADDR
0DA93                           
0DA93                                   ;; Write ppu_buffer data to PPU_ADDR
0DA93 E8                                INX
0DA94 BD 00 03                          LDA ppu_buffer,x
0DA97 8D 07 20                          STA PPU_DATA
0DA9A                           
0DA9A                                   ;; Check if updating is done (eg. X is at pointer)
0DA9A E8                                INX
0DA9B E4 3A                             CPX ppu_buffer_pointer
0DA9D F0 03                             BEQ +
0DA9F 4C 83 DA                      JMP -
0DAA2                           +
0DAA2                           
0DAA2                               ;; Reset ppu buffer update and pointer
0DAA2 A9 00                         LDA #$00
0DAA4 85 39                         STA ppu_buffer_update
0DAA6 85 3A                         STA ppu_buffer_pointer
0DAA8                               
0DAA8                               ;; Reset scrolling position
0DAA8 8D 05 20                      STA PPU_SCROLL
0DAAB 8D 05 20                      STA PPU_SCROLL
0DAAE                           
0DAAE                               ;; Restore ppu control register and mask
0DAAE A9 90                         LDA #%10010000
0DAB0 8D 00 20                      STA PPU_CTRL
0DAB3 A5 12                         LDA soft_ppu_mask
0DAB5 8D 01 20                      STA PPU_MASK
0DAB8 A9 00                         LDA #$00
0DABA                           
0DABA                           ;; Continue other NMI stuff
0DABA                           +no_ppu_buffer_update:
0DABA                           
0DABA                               ;; Reset sprite RAM, draw sprites
0DABA 8D 03 20                      STA OAM_ADDR
0DABD A9 02                         LDA #$02
0DABF 8D 14 40                      STA OAM_DMA
0DAC2                           
0DAC2                               ;; Decrease explosion and move block timers
0DAC2 A0 04                         LDY #MAX_ANIMATIONS
0DAC4 A2 00                         LDX #$00
0DAC6                               -
0DAC6 BD 60 03                          LDA explosion_timer,x
0DAC9 F0 03                             BEQ +
0DACB DE 60 03                              DEC explosion_timer,x
0DACE                                   +
0DACE                           
0DACE BD 80 03                          LDA move_block_timer,x
0DAD1 F0 03                             BEQ +
0DAD3 DE 80 03                              DEC move_block_timer,x
0DAD6                                   +
0DAD6                                   
0DAD6 E8                                INX
0DAD7 88                                DEY
0DAD8 F0 03                             BEQ +done
0DADA 4C C6 DA                      JMP -
0DADD                           +done:
0DADD                           
0DADD                               ;; Decrease nudge timer
0DADD A5 3E                         LDA nudge_timer
0DADF F0 02                         BEQ +
0DAE1 C6 3E                             DEC nudge_timer
0DAE3                               +
0DAE3                           
0DAE3                               ;; Decrease bonus timer
0DAE3 A5 3F                         LDA bonus_timer
0DAE5 F0 02                         BEQ +
0DAE7 C6 3F                             DEC bonus_timer
0DAE9                               +
0DAE9                           
0DAE9                               ;; Decrease kill timer
0DAE9 A5 40                         LDA kill_timer
0DAEB F0 02                         BEQ +
0DAED C6 40                             DEC kill_timer
0DAEF                               +
0DAEF                               
0DAEF                               ;; Decrease and handle unfreeze timer
0DAEF A5 41                         LDA unfreeze_timer
0DAF1 F0 0A                         BEQ +
0DAF3 C6 41                             DEC unfreeze_timer
0DAF5 D0 06                             BNE +
0DAF7                                   
0DAF7 A5 37                             LDA ball_flags
0DAF9 29 FB                             AND #UNFREEZE_BALL
0DAFB 85 37                             STA ball_flags
0DAFD                               +
0DAFD                           
0DAFD                               ;; Play background noise
0DAFD A5 38                         LDA screen_mode
0DAFF 29 01                         AND #IS_GAME_SCREEN
0DB01 F0 0C                         BEQ +
0DB03                                   .include "game/include/main/background_sound.asm"
0DB03                           
0DB03                               ;; If noise is muted, no noise should play
0DB03 A5 4B                         LDA noise_muted
0DB05 F0 08                         BEQ +
0DB07 A9 30                             LDA #$30
0DB09 8D 0C 40                          STA NOISE_VOLUME
0DB0C 4C 74 DB                          JMP +endNoise
0DB0F                               +
0DB0F                               
0DB0F                               ;; At random times, set max_noise period to $03-$0A
0DB0F A5 45                         LDA max_noise
0DB11 D0 1D                         BNE +
0DB13 20 DF C4                          JSR sub_GetRandomNumber
0DB16 29 EF                             AND #%11101111
0DB18 D0 16                             BNE +
0DB1A                                   
0DB1A A5 15                             LDA frame_counter
0DB1C 85 16                             STA random_seed
0DB1E 20 DF C4                          JSR sub_GetRandomNumber
0DB21 29 07                             AND #$07
0DB23 69 03                             ADC #$03
0DB25 85 45                             STA max_noise
0DB27 A9 01                             LDA #$01
0DB29 85 46                             STA sweep_noise
0DB2B A9 34                             LDA #$34
0DB2D 8D 0C 40                          STA NOISE_VOLUME
0DB30                               +
0DB30                           
0DB30                               ;; if sweep noise = $00: constant noise
0DB30                               ;; else if sweep noise > $80: decrease pitch
0DB30                               ;; else: increase pitch
0DB30 A5 46                         LDA sweep_noise
0DB32 F0 18                         BEQ +constantNoise
0DB34 30 2A                         BMI +decreaseNoise
0DB36                           
0DB36                           ;; Sweep noise up to max noise pitch
0DB36                           +increaseNoise:
0DB36 C6 47                         DEC current_noise
0DB38 A5 47                         LDA current_noise
0DB3A 8D 0E 40                      STA NOISE_PERIOD
0DB3D C5 45                         CMP max_noise
0DB3F D0 08                         BNE +
0DB41 A9 00                             LDA #$00
0DB43 85 46                             STA sweep_noise
0DB45 A9 0A                             LDA #$0A
0DB47 85 48                             STA noise_timer
0DB49                               +
0DB49 4C 74 DB                      JMP +endNoise
0DB4C                           
0DB4C                           ;; Keep noise at constant pitch
0DB4C                           +constantNoise:
0DB4C A5 45                         LDA max_noise
0DB4E F0 24                         BEQ +endNoise
0DB50                           
0DB50 A5 48                         LDA noise_timer
0DB52 D0 07                         BNE +
0DB54 A9 80                             LDA #$80
0DB56 85 46                             STA sweep_noise
0DB58 4C 74 DB                          JMP +endNoise
0DB5B                               +
0DB5B C6 48                         DEC noise_timer
0DB5D 4C 74 DB                      JMP +endNoise
0DB60                           
0DB60                           ;; Sweep noise down to initial pitch
0DB60                           +decreaseNoise:
0DB60 E6 47                         INC current_noise
0DB62 A5 47                         LDA current_noise
0DB64 8D 0E 40                      STA NOISE_PERIOD
0DB67 C9 0E                         CMP #$0E
0DB69 D0 09                         BNE +endNoise
0DB6B                           
0DB6B 20 6F C5                      JSR sub_BackgroundNoise
0DB6E A9 00                         LDA #$00
0DB70 85 45                         STA max_noise
0DB72 85 46                         STA sweep_noise
0DB74                           
0DB74                           +endNoise:
0DB74                           
0DB74                               +
0DB74                           
0DB74                               ;; Play bonus to score bleeps
0DB74                               .include "game/include/main/bonus_to_score_bleeps.asm"
0DB74                           
0DB74                           ;; Random bleepy noises
0DB74                           
0DB74 A5 49                         LDA do_beeps
0DB76 F0 2E                         BEQ +continue
0DB78                               
0DB78 C9 02                         CMP #$02
0DB7A D0 12                         BNE +beep
0DB7C                              
0DB7C                           +stopBeep:
0DB7C A9 00                         LDA #$00
0DB7E 85 49                         STA do_beeps
0DB80 A9 08                         LDA #$08
0DB82 8D 15 40                      STA APU_STATUS
0DB85 8D 0F 40                      STA NOISE_LENGTH
0DB88 20 6F C5                      JSR sub_BackgroundNoise
0DB8B 4C A6 DB                      JMP +continue
0DB8E                               
0DB8E                           +beep:
0DB8E A9 01                         LDA #$01
0DB90 8D 15 40                      STA APU_STATUS
0DB93 A5 4A                         LDA soft_pulse1
0DB95 8D 00 40                      STA PULSE1_VOLUME
0DB98 20 DF C4                      JSR sub_GetRandomNumber
0DB9B 8D 02 40                      STA PULSE1_TIMER_LO
0DB9E 20 DF C4                      JSR sub_GetRandomNumber
0DBA1 29 01                         AND #$01
0DBA3 8D 03 40                      STA PULSE1_TIMER_HI
0DBA6                           
0DBA6                           +continue:
0DBA6                           
0DBA6                               
0DBA6                               ;; Play sound effect
0DBA6                               .include "game/include/main/nmi_sfx.asm"
0DBA6                           
0DBA6                               ;; Get current explosion sfx frame; if not set, skip this
0DBA6 A4 4E                         LDY sfx_timer
0DBA8 F0 1F                         BEQ +done
0DBAA                               
0DBAA                                   ;; Check if explosion sfx is done; if so, disable and skip
0DBAA B1 4C                             LDA (sfx_address),y
0DBAC D0 07                             BNE +
0DBAE A9 00                                 LDA #$00
0DBB0 85 4E                                 STA sfx_timer
0DBB2 4C C9 DB                              JMP +done
0DBB5                                   +
0DBB5                                   
0DBB5                                   ;; Set low nibble as volume
0DBB5 29 0F                             AND #$0F
0DBB7 09 30                             ORA #$30
0DBB9 8D 0C 40                          STA NOISE_VOLUME
0DBBC                                   
0DBBC                                   ;; Set high nibble as frequency
0DBBC B1 4C                             LDA (sfx_address),y
0DBBE 4A                                LSR
0DBBF 4A                                LSR
0DBC0 4A                                LSR
0DBC1 4A                                LSR
0DBC2 49 0F                             EOR #$0F
0DBC4 8D 0E 40                          STA NOISE_PERIOD
0DBC7                                   
0DBC7                                   ;; Next frame
0DBC7 E6 4E                             INC sfx_timer
0DBC9                               +done
0DBC9                           
0DBC9                               
0DBC9                           
0DBC9                           ;; This is what happens when we forced nmi skip
0DBC9                           +force_skip_nmi:
0DBC9                           
0DBC9                               ;; Increase frame timers
0DBC9 E6 15                         INC frame_counter
0DBCB                           
0DBCB                               ;; reset sprites_update_position
0DBCB A9 00                         LDA #$00
0DBCD 85 35                         STA sprites_update_position
0DBCF                           
0DBCF                               ;; Don't skip next NMI request
0DBCF A9 00                         LDA #$00
0DBD1 85 13                         STA skip_nmi
0DBD3 85 4F                         STA check_nmi
0DBD5                           
0DBD5                               ;; Restore X, Y and PC from stack
0DBD5 28                            PLP
0DBD6 68                            PLA
0DBD7 A8                            TAY
0DBD8 68                            PLA
0DBD9 AA                            TAX
0DBDA                           
0DBDA                           +skip_nmi:
0DBDA                               ;; Restore accumulator from stack
0DBDA 68                            PLA
0DBDB                           
0DBDB                               ;; Return
0DBDB 40                            RTI
0DBDC                           
0DBDC                           
0DBDC                           ;; IRQ handler (empty)
0DBDC                           IRQ:
0DBDC                               .include "interrupt/irq.asm"
0DBDC                           
0DBDC 40                            RTI
0DBDD                           
0DBDD                           
0DBDD                           ;; Interrupt vectors
0DBDD 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 57 DA                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE DC DB                         .dw IRQ
10000                           
10000                           ;; CHR data
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
12000                           
