	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;;    ╔══ ╔═╗  ╖ ╖   ╖   ╖ ╔══╗ ╔══╗
	                            ;;    ║   ║ ║  ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ╠═╩╗ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ║   ║  ║ ║ ║   ║   ║ ║  ║ ║  ║
	                            ;;    ╚══ ╙  ╙ ╙ ╚══ ╚══ ╙ ╚══╝ ╙  ╙
	                            ;;
	                            ;;  A 2023 NES port of the Commodore 64 game "Crillion"
	                            ;;
	                            ;;  Design, sound, graphics and program by Oliver Kirwa
	                            ;;  © 1987,1988
	                            ;;
	                            ;;  NES port by Kevin81 © 2023
	                            ;;
	                            ;;
	                            
	                            
	                            ;; Project constants and macros
	                            .include "include/constants.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/constants.asm
	                            ;;
	                            ;; List of general constant declarations, like addresses and
	                            ;; input button values, for example. These constants should
	                            ;; make developing easier and code better readable.
	                            ;;
	                            ;;
	                            
	                            ;; Cartridge RAM/ROM constants
	                            ADDR_ZEROPAGE  = $0000
	                            ADDR_SOUNDRAM  = $0100
	                            ADDR_SPRITERAM = $0200
	                            ADDR_OTHERRAM  = $0300
	                            ADDR_STARTBANK = $8000
	                            ADDR_ENDBANK   = $C000
	                            ADDR_VECTORS   = $FFFA
	                            ADDR_CHRROM    = $0000
	                            
	                            ;; PPU constants
	                            PPU_CTRL   = $2000
	                            PPU_MASK   = $2001
	                            PPU_STATUS = $2002
	                            PPU_SCROLL = $2005
	                            PPU_ADDR   = $2006
	                            PPU_DATA   = $2007
	                            
	                            ;; Object attribute model addresses
	                            OAM_ADDR   = $2003
	                            OAM_DATA   = $2004
	                            OAM_DMA    = $4014
	                            
	                            ;; Audio processing unit addresses
	                            APU_CTRL   = $4010
	                            APU_STATUS = $4015
	                            APU_FC     = $4017
	                            
	                            ;; Joypad input addresses
	                            JOYPAD_1   = $4016
	                            JOYPAD_2   = $4017
	                            
	                            ;; Joypad buttons
	                            BUTTON_A      = #%10000000
	                            BUTTON_B      = #%01000000
	                            BUTTON_SELECT = #%00100000
	                            BUTTON_START  = #%00010000
	                            BUTTON_UP     = #%00001000
	                            BUTTON_DOWN   = #%00000100
	                            BUTTON_LEFT   = #%00000010
	                            BUTTON_RIGHT  = #%00000001
	                            
	                            ;; Custom game constants
	                            .include "game/include/constants.asm"	                            ;; Starting address for screen tile RAM
	                            ADDR_SCREENTILERAM  = $0400
	                            
	                            
	                            ;; Ball bounding box constants
	                            BALL_HEIGHT  = #$08  ; Height of the ball graphic within the sprite(s)
	                            BALL_WIDTH   = #$08  ; Width of the ball graphic within the sprite(s)
	                            BALL_TOP     = #$00  ; Top offset of the ball graphic
	                            BALL_LEFT    = #$00  ; Left offset of the ball graphic
	                            
	                            
	                            ;; Ball speed (high/low byte), tile and attribute
	                            BALL_SPEED_HI  = #$02        ; High byte of ball speed
	                            BALL_SPEED_LO  = #$30        ; Low byte of ball speed
	                            BALL_TILE_CHR  = #$01        ; CHR tile ID
	                            BALL_ATTR      = #%00000000  ; Attribute (no mirror, subpalette 0)
	                            BALL_LEFT_WGA  = #$F0        ; Left position within game area (-#$10)
	                            BALL_TOP_WGA   = #$D0        ; Top position within game area (-#$30)
	                            BALL_HALF_SIZE = #$04        ; Half the ball's size (8x8)
	                            
	                            
	                            ;; Ball flag helpers
	                            BALL_IS_DEAD     = #%00000001
	                            KILL_BALL        = #%00000001
	                            REVIVE_BALL      = #%11111110
	                            NUDGE_BALL_RIGHT = #%00000010
	                            NUDGE_BALL_LEFT  = #%11111101
	                            BALL_IS_FROZEN   = #%00000100
	                            FREEZE_BALL      = #%00000100
	                            UNFREEZE_BALL    = #%11111011
	                            BALL_MOVES_DOWN  = #%00010000
	                            MOVE_BALL_DOWN   = #%00010000
	                            MOVE_BALL_UP     = #%11101111
	                            
	                            
	                            ;; Tile flag helpers
	                            TILE_IS_SOLID    = #%00000001
	                            IS_COLOR_BLOCK   = #%10000000
	                            IS_PAINT_BLOCK   = #%00010000
	                            IS_DEATH_BLOCK   = #%00100000
	                            IS_MOVE_BLOCK    = #%01000000
	                            
	                            
	                            ;; Screen load helpers
	                            LOAD_INTRO_SCREEN = #%10000000
	                            LOAD_GAME_SCREEN  = #%10000001
	                            LOAD_WIN_SCREEN   = #%10000010
	                            IS_INTRO_SCREEN   = #%00000000
	                            IS_GAME_SCREEN    = #%00000001
	                            IS_WIN_SCREEN     = #%00000010
	                            CHECK_SCREEN_MODE = #%00000011
	                            
	                            
	                            ;; Game area bounds
	                            BOUND_TOP       = #$30
	                            BOUND_BOTTOM    = #$C8
	                            BOUND_LEFT      = #$10
	                            BOUND_RIGHT     = #$E8
	                            
	                            
	                            ;; Max number of animations on screen
	                            MAX_ANIMATIONS  = #$04
	                            
	                            
	                            ;; Animation data
	                            ANIMATION_SPEED = #$04 ; number of frames per animation frame
	                            ANIM_SLIDES     = #$0A ; number of slides in an animation
	                            
	                            
	                            ;; Slide data
	                            SLIDE_WIDTH     = #$03 ; slide width in tiles
	                            SLIDE_SIZE      = #$09 ; total number of tiles in slide
	                            
	                            
	                            ;; Max number of nudge frames
	                            NUDGE_FRAMES    = #$03
	                            
	                            
	                            ;; Helper constant for when a level is done loading
	                            LEVEL_END       = #$FF
	                            
	                            
	                            ;; Character map
	                            _SPACE = #$00
	                            _0     = #$01
	                            _1     = #$02
	                            _2     = #$03
	                            _3     = #$04
	                            _4     = #$05
	                            _5     = #$06
	                            _6     = #$07
	                            _7     = #$08
	                            _8     = #$09
	                            _9     = #$0A
	                            _A     = #$0B
	                            _B     = #$0C
	                            _C     = #$0D
	                            _D     = #$0E
	                            _E     = #$0F
	                            _F     = #$10
	                            _G     = #$11
	                            _H     = #$12
	                            _I     = #$13
	                            _J     = #$14
	                            _K     = #$15
	                            _L     = #$16
	                            _M     = #$17
	                            _N     = #$18
	                            _O     = #$19
	                            _P     = #$1A
	                            _Q     = #$1B
	                            _R     = #$1C
	                            _S     = #$1D
	                            _T     = #$1E
	                            _U     = #$1F
	                            _V     = #$20
	                            _W     = #$21
	                            _X     = #$22
	                            _Y     = #$23
	                            _Z     = #$24
	                            _COMMA = #$25
	                            _DOT   = #$26
	                            _COLON = #$27
	                            _COPY  = #$28
	                            .include "include/macros.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/macros.asm
	                            ;;
	                            ;; List of macros to include in the game. Currently none.
	                            ;;
	                            ;;
	                            
	                            ;; game-specific macros
	                            .include "game/include/macros.asm"
	                            ;; additional game-specific macros go here
	                            
	                            ;; iNES header (can vary per game)
	                            .include "game/include/header.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; include/header.asm
	                            ;;
	                            ;; The iNES header for the game. This tells the hardware /
	                            ;; emulator the number of PRG-ROM and CHR-ROM banks, which
	                            ;; mapper to use, the mirroring type, and some other ROM info.
	                            ;;
	                            ;; See https://www.nesdev.org/wiki/INES for more info.
	                            ;;
	                            ;;
	                            
	                                ;; iNES identifier
	  4E 45 53 1A                   .db "NES", $1A
	                            
	                                ;; Number of PRG-ROM (1) and CHR-ROM (1) banks
	  01 01                         .db $01, $01
	                                
	                                ;; Mapper (0, or NROM)
	  00                            .db %00000000
	  00                            .db %00000000
	                            
	                                ;; Add an additional 8 bytes of padding
	  00 00 00 00 00 00 00 00       .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            
	                            ;; Zero page RAM
	                            .enum ADDR_ZEROPAGE
00000                               .include "ram/zp.asm"
00000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00000                           ;;
00000                           ;; include/zp_ram.asm
00000                           ;;
00000                           ;; List of zero-page RAM variables. Currently only holds a
00000                           ;; variable to keep track of button presses, but will contain
00000                           ;; more variables that should be accessed often or easily by
00000                           ;; the game at any time, like temporary variables used by
00000                           ;; subroutines or macros, game status flags, and the like.
00000                           ;;
00000                           ;;
00000                           
00000                               ;; Reserve ten temporary variables for use in subroutines.
00000                               temp              .dsb 10
0000A                           
0000A                               ;; Reserve a two-byte temporary variable for use with 16-bit
0000A                               ;; operations (like addresses)
0000A                               temp16            .dsb 2
0000C                           
0000C                               ;; Two-byte variable to store a pointer address
0000C                               pointer           .dsb 2
0000E                           
0000E                               ;; Variable to store button presses
0000E                               buttons_prev      .dsb 1
0000F                               buttons_held      .dsb 1
00010                               buttons_pressed   .dsb 1
00011                               buttons_released  .dsb 1
00012                           
00012                               ;; PPU mask buffer variable, used to store the new value of
00012                               ;; the PPU mask outside NMI
00012                               soft_ppu_mask     .dsb 1
00013                           
00013                               ;; Variables to skip NMI handling
00013                               skip_nmi          .dsb 1
00014                               force_skip_nmi    .dsb 1
00015                           
00015                               ;; Counters and seeds
00015                               frame_counter     .dsb 1
00016                               random_seed       .dsb 1
00017                           
00017                               ;; Game specific variables
00017                               .include "game/ram/zp.asm"
00017                           ;; Ball variables
00017                           ball_xpos_hi           .dsb 1
00018                           ball_xpos_lo           .dsb 1
00019                           ball_ypos_hi           .dsb 1
0001A                           ball_ypos_lo           .dsb 1
0001B                           ball_lives             .dsb 1   ; number of lives left
0001C                           ball_score             .dsb 6   ; decimal score, five bytes (0-9)
00022                           ball_bonus             .dsb 3   ; decimal bonus points, three bytes (0-9)
00025                           
00025                           ;; Ball bounding box, relative to the screen
00025                           ball_left              .dsb 1
00026                           ball_center            .dsb 1
00027                           ball_right             .dsb 1
00028                           ball_top               .dsb 1
00029                           ball_middle            .dsb 1
0002A                           ball_bottom            .dsb 1
0002B                           
0002B                           ;; Update-position check
0002B                           ball_update_position   .dsb 1
0002C                           
0002C                           
0002C                           ;; Ball flags
0002C                           ;; #% c c c v . f n a
0002C                           ;;    | | | | | | | +-- ball is dead (0) or alive (1)
0002C                           ;;    | | | | | | +---- ball is being nudged left (0) or right (1)
0002C                           ;;    | | | | | +------ ball is frozen (not moving)
0002C                           ;;    | | | | +-------- (unused for now)
0002C                           ;;    | | | +---------- ball moves up (0) or down (1)
0002C                           ;;    +-+-+------------ ball color (1-6)
0002C                           ball_flags             .dsb 1
0002D                           
0002D                           
0002D                           ;; Screen mode
0002D                           ;; #% u . . . . . t t
0002D                           ;;    | | | | | | +-+--------- screen type (00 = intro, 01 = game, 10 = win)
0002D                           ;;    | +-+-+-+-+------------- unused
0002D                           ;;    +----------------------- should the screen update
0002D                           screen_mode            .dsb 1
0002E                           
0002E                           
0002E                           ;; Start level pointer
0002E                           ;; You can start the game at level 1, 5, 9, 13 or 17.
0002E                           ;; This is the pointer that tells you at which level to start.
0002E                           startlevel_pointer     .dsb 1 
0002F                           
0002F                           
0002F                           ;; PPU buffer variables
0002F                           ppu_buffer_update      .dsb 1
00030                           ppu_buffer_pointer     .dsb 1
00031                           
00031                           ;; Pointer to keep track of the number of explosions
00031                           explosion_pointer      .dsb 1
00032                           
00032                           ;; Sprite RAM pointer to keep track of sprites to update
00032                           sprite_ram_pointer     .dsb 1
00033                           
00033                           ;; Nudge counter
00033                           nudge_counter          .dsb 1
00034                           
00034                           ;; Current level
00034                           current_level          .dsb 1
00035                           
00035                           ;; Tile type the ball is currently colliding with
00035                           colliding_tile         .dsb 1
00036                               00036                           .ende
	                            
	                            ;; Other RAM (must be ENUM'd within)
	                            .include "ram/misc.asm"
	                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                            ;;
	                            ;; ram/misc.asm
	                            ;;
	                            ;; List of additional, non-zeropage RAM variables. Currently
	                            ;; empty, but will hold data like the OAM buffer and other,
	                            ;; less-often accessed, global variables.
	                            ;;
	                            ;;
	                            
	                            
	                                ;; Game specific RAM variables
	                                .include "game/ram/misc.asm"
	                            ;; miscellaneous (non-zeropage) ram variables go here
	                            
	                            .enum ADDR_OTHERRAM
00300                               ;; PPU buffer (3x16 bytes, as a capped max for NMI)
00300                               ppu_buffer                .dsb 48
00330                           
00330                               ;; _framecounter, counts from ANIMATION_SPEED to 0 per slide
00330                               explosion_framecounter    .dsb 4
00334                           
00334                               ;; _currentframe, keeps track which anim frame we're at
00334                               explosion_currentframe    .dsb 4
00338                           
00338                               ;; _attributes, to distinguish between ball and wall explosion
00338                               explosion_attributes      .dsb 4
0033C                           
0033C                               ;; x- and y-coordinate of the explosion
0033C                               explosion_x               .dsb 4
00340                               explosion_y               .dsb 4
00344                           
00344                               ;; active flag to see if animation is/should be shown
00344                               explosion_active          .dsb 4
00348                           .ende
	                            
	                            
	                            .enum ADDR_SCREENTILERAM
00400                               ;; screen tile type data
00400                               ;;  #% b m p d ccC s
00400                               ;;     | | | | ||| +-- block is solid
00400                               ;;     | | | | ||+---- block color (CHR offset boolean)
00400                               ;;     | | | | ++----- block color (subpal 0-3)
00400                               ;;     | | | +-------- death block
00400                               ;;     | | +---------- paint block
00400                               ;;     | +------------ move block
00400                               ;;     +-------------- color block
00400                               tile_type                 .dsb 160
004A0                               
004A0                               ;; attribute table in ram (for easy updating during gameplay)
004A0                               tile_attributes           .dsb 64
004E0                           .ende
	                            
	                            
	                            ;; Instantly go to the static bank
	                            .org ADDR_ENDBANK
0C000                           
0C000                           ;; Reset script
0C000                           RESET:
0C000                               .include "interrupt/reset.asm"
0C000                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C000                           ;;
0C000                           ;; include/reset.asm
0C000                           ;;
0C000                           ;; Basic reset script. Disables rendering, clears memory, moves
0C000                           ;; sprites off screen and (re)initializes the game.
0C000                           ;;
0C000                           ;;
0C000                           
0C000                               ;; Ignore IRQ's
0C000 78                            SEI
0C001                           
0C001                               ;; Disable decimal mode
0C001 D8                            CLD
0C002                           
0C002                               ;; Disable APU frame IRQ
0C002 A2 40                         LDX #$40
0C004 8E 17 40                      STX APU_FC
0C007                           
0C007                               ;; Set up the stack
0C007 A2 FF                         LDX #$FF
0C009 9A                            TXS
0C00A                           
0C00A                               ;; Disable NMI, rendering, DMC and APU IRQ's
0C00A E8                            INX
0C00B 8E 00 20                      STX PPU_CTRL
0C00E 8E 01 20                      STX PPU_MASK
0C011 8E 10 40                      STX APU_CTRL
0C014 8E 15 40                      STX APU_STATUS
0C017                           
0C017                               ;; Clear the vBlank flag
0C017 2C 02 20                      BIT PPU_STATUS
0C01A                           
0C01A                               ;; Wait for vBlank
0C01A 20 3B C3                      JSR sub_WaitForVBlank
0C01D                           
0C01D                               ;; Clear memory
0C01D                               -clrMem:
0C01D                                   ;; Move sprites off screen
0C01D A9 FE                             LDA #$FE
0C01F 9D 00 02                          STA ADDR_SPRITERAM,x
0C022                           
0C022                                   ;; Clear other memory
0C022 A9 00                             LDA #$00
0C024 95 00                             STA ADDR_ZEROPAGE,x
0C026 9D 00 01                          STA $0100,x
0C029 9D 00 03                          STA $0300,x
0C02C 9D 00 04                          STA $0400,x
0C02F 9D 00 05                          STA $0500,x
0C032 9D 00 06                          STA $0600,x
0C035 9D 00 07                          STA $0700,x
0C038                           
0C038                                   ;; Clear next in line
0C038 E8                                INX
0C039 D0 E2                         BNE -clrMem
0C03B                           
0C03B                               ;; Wait for vBlank
0C03B 20 3B C3                      JSR sub_WaitForVBlank
0C03E                           
0C03E                           	;; Turn on NMI, set foreground $0000, background $1000
0C03E A9 90                         LDA #%10010000
0C040 8D 00 20                      STA PPU_CTRL
0C043                               
0C043                               ;; Reset PPU scroll pointer
0C043 A0 00                         LDY #0
0C045 8C 05 20                      STY $2005
0C048 8C 05 20                      STY $2005
0C04B                               
0C04B                               ;; Initialize game
0C04B                               .include "game/interrupt/reset.asm"
0C04B                           ;; game initialization goes here
0C04B                           
0C04B                               ;; Tell game to load the intro screen
0C04B A9 80                         LDA #LOAD_INTRO_SCREEN
0C04D 85 2D                         STA screen_mode
0C04F                           
0C04F                               ;; Set number of lives (5)
0C04F A9 05                         LDA #$05
0C051 85 1B                         STA ball_lives
0C053                           
0C053                               ;; Start at level -1 for now, because [START] increments level number
0C053 A9 FF                         LDA #$FF
0C055 85 34                         STA current_level0C057                           
0C057                           
0C057                           ;; Main game loop
0C057                           MainGameLoop:
0C057                               .include "game/main.asm"
0C057                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C057                           ;;
0C057                           ;; game/main.asm
0C057                           ;;
0C057                           ;; The main game loop content.
0C057                           ;;
0C057                           ;;
0C057                           
0C057                               ;; Reset sprite pointer every game loop
0C057 A9 00                         LDA #$00
0C059 85 32                         STA sprite_ram_pointer
0C05B                           
0C05B                               ;; Store previous buttons
0C05B A5 0F                         LDA buttons_held
0C05D 85 0E                         STA buttons_prev
0C05F                           
0C05F                               ;; Read controller input
0C05F 20 27 C3                      JSR sub_ReadController
0C062                           
0C062                               ;; Get buttons released
0C062 A5 0F                         LDA buttons_held
0C064 49 FF                         EOR #$FF
0C066 25 0E                         AND buttons_prev
0C068 85 11                         STA buttons_released
0C06A                           
0C06A                               ;; Set buttons pressed
0C06A A5 0E                         LDA buttons_prev
0C06C 49 FF                         EOR #$FF
0C06E 25 0F                         AND buttons_held
0C070 85 10                         STA buttons_pressed
0C072                           
0C072                               ;; Load screen?
0C072 A5 2D                         LDA screen_mode
0C074 29 80                         AND #%10000000
0C076 F0 1E                         BEQ +screenLoaded
0C078                           
0C078                               ;; Get screen type to load
0C078 A5 2D                         LDA screen_mode
0C07A 29 03                         AND #%00000011
0C07C A8                            TAY
0C07D                               
0C07D                               ;; Get address to load screen type from
0C07D B9 F3 C9                      LDA tbl_LoadScreenLo,y
0C080 85 0C                         STA pointer
0C082 B9 F0 C9                      LDA tbl_LoadScreenHi,y
0C085 85 0D                         STA pointer+1
0C087                           
0C087                               ;; Load screen
0C087 20 F6 C3                      JSR sub_DisableRendering
0C08A 20 67 C4                      JSR sub_JumpToPointer
0C08D 20 0A C4                      JSR sub_EnableRendering
0C090                               
0C090                               ;; Don't load screen anymore next loop
0C090 A5 2D                         LDA screen_mode
0C092 29 7F                         AND #%01111111
0C094 85 2D                         STA screen_mode
0C096                               
0C096                           
0C096                           +screenLoaded:
0C096                           
0C096                               ;; CONCEPT SCRIPTS
0C096                               
0C096                               ;; Upon pressing A, an explosion will happen on screen
0C096                               .include "game/test/show_animation.asm"
0C096                               ;; If A button is pressed, initiate explosion
0C096 A5 10                         LDA buttons_pressed
0C098 29 80                         AND #BUTTON_A
0C09A D0 03                         BNE +
0C09C 4C CE C0                          JMP +end
0C09F                               +
0C09F                           
0C09F                               ;; Get most recent slot for explosion
0C09F A6 31                         LDX explosion_pointer
0C0A1                           
0C0A1                               ;; If 0, use max pointer value
0C0A1 D0 02                         BNE +
0C0A3 A2 04                             LDX #MAX_ANIMATIONS
0C0A5                               +
0C0A5                           
0C0A5                               ;; Decrease pointer by one
0C0A5 CA                            DEX
0C0A6 86 31                         STX explosion_pointer
0C0A8                           
0C0A8                               ;; Load explosion data into RAM
0C0A8 A9 00                         LDA #$00
0C0AA 9D 34 03                      STA explosion_currentframe,x
0C0AD A9 04                         LDA #ANIMATION_SPEED
0C0AF 9D 30 03                      STA explosion_framecounter,x
0C0B2 20 19 C3                      JSR sub_GetRandomNumber
0C0B5                               ;AND #%11110000
0C0B5 9D 3C 03                      STA explosion_x,x
0C0B8 20 19 C3                      JSR sub_GetRandomNumber
0C0BB                               ;AND #%11110000
0C0BB 9D 40 03                      STA explosion_y,x
0C0BE 20 19 C3                      JSR sub_GetRandomNumber
0C0C1 29 02                         AND #%00000010
0C0C3 18                            CLC
0C0C4 69 01                         ADC #$01
0C0C6 9D 38 03                      STA explosion_attributes,x
0C0C9 A9 01                         LDA #$01
0C0CB 9D 44 03                      STA explosion_active,x
0C0CE                           
0C0CE                           
0C0CE                           +end:
0C0CE                           
0C0CE                               ;; Set up loop
0C0CE A2 00                         LDX #$00
0C0D0                               -loop_load_animation:
0C0D0                                   ;; Check if current animation is active. If not, goto next
0C0D0 BD 44 03                          LDA explosion_active,x
0C0D3 D0 03                             BNE +
0C0D5 4C 6F C1                              JMP +next
0C0D8                                   +
0C0D8                           
0C0D8                                   ;; Check the explosion framecounter
0C0D8 BD 30 03                          LDA explosion_framecounter,x
0C0DB D0 26                             BNE +
0C0DD                                       ;; Framecounter is 0
0C0DD                                       ;; Reset to animation speed
0C0DD A9 04                                 LDA #ANIMATION_SPEED
0C0DF 9D 30 03                              STA explosion_framecounter,x
0C0E2                           
0C0E2                                       ;; Set next animation frame, and check if we're done yet
0C0E2 FE 34 03                              INC explosion_currentframe,x
0C0E5 BD 34 03                              LDA explosion_currentframe,x
0C0E8 C9 0A                                 CMP #ANIM_SLIDES
0C0EA D0 17                                 BNE +
0C0EC                           
0C0EC                                       ;; If we're done, inactivate current explosion, clean
0C0EC                                       ;; up sprite RAM and go to the next one
0C0EC A9 00                                 LDA #$00
0C0EE 9D 44 03                              STA explosion_active,x
0C0F1                                       
0C0F1 A9 09                                 LDA #SLIDE_SIZE
0C0F3 0A                                    ASL
0C0F4 0A                                    ASL
0C0F5 A8                                    TAY
0C0F6 A9 EF                                 LDA #$EF
0C0F8                                       -
0C0F8 88                                        DEY
0C0F9 99 00 02                                  STA ADDR_SPRITERAM,y
0C0FC C0 00                                     CPY #00
0C0FE D0 F8                                 BNE -
0C100                                       
0C100 4C 6F C1                              JMP +next
0C103                                   +
0C103                           
0C103                                   ;; Load (x,y) position in temp variables
0C103 BD 3C 03                          LDA explosion_x,x
0C106 85 01                             STA temp+1
0C108 85 03                             STA temp+3
0C10A BD 40 03                          LDA explosion_y,x
0C10D 85 02                             STA temp+2
0C10F                           
0C10F                                   ;; Load attribute in temp variable
0C10F BD 38 03                          LDA explosion_attributes,x
0C112 85 04                             STA temp+4
0C114                           
0C114                                   ;; Load current frame into Y-register
0C114 BC 34 03                          LDY explosion_currentframe,x
0C117                           
0C117                                   ;; Load current frame ROM address from table
0C117 B9 DA C9                          LDA explosion_anim_lo,y
0C11A 85 0C                             STA pointer
0C11C B9 D0 C9                          LDA explosion_anim_hi,y
0C11F 85 0D                             STA pointer+1
0C121                           
0C121                                   ;; Save x-register on stack
0C121 8A                                TXA
0C122 48                                PHA
0C123                           
0C123                                   ;; Load sprites into sprite RAM
0C123 A6 32                             LDX sprite_ram_pointer
0C125 A0 00                             LDY #$00
0C127                           
0C127                                   ;; Prepare (x,y) offset for loop
0C127 84 00                             STY temp
0C129                           
0C129                                   -loop_load_sprite:
0C129                                   
0C129                                       ;; Do not draw empty sprites
0C129 B1 0C                                 LDA (pointer),y
0C12B F0 18                                 BEQ +nextSprite
0C12D                                   
0C12D                                           ;; Add y-position to sprite ram buffer
0C12D A5 02                                     LDA temp+2
0C12F 9D 00 02                                  STA ADDR_SPRITERAM,x
0C132 E8                                        INX
0C133                           
0C133                                           ;; Get tile number from frame ROM address, and
0C133                                           ;; add it to sprite ram buffer
0C133 B1 0C                                     LDA (pointer),y
0C135 9D 00 02                                  STA ADDR_SPRITERAM,x
0C138 E8                                        INX
0C139                           
0C139                                           ;; Add attribute data to sprite ram buffer
0C139 A5 04                                     LDA temp+4
0C13B 9D 00 02                                  STA ADDR_SPRITERAM,x
0C13E E8                                        INX
0C13F                           
0C13F                                           ;; Add x-position to sprite ram buffer
0C13F A5 03                                     LDA temp+3
0C141 9D 00 02                                  STA ADDR_SPRITERAM,x
0C144 E8                                        INX
0C145                           
0C145                                       +nextSprite:
0C145                           
0C145                                       ;; Check if all sprites are done
0C145 C8                                    INY
0C146 C0 09                                 CPY #SLIDE_SIZE
0C148 F0 21                                 BEQ +done
0C14A                           
0C14A                                       ;; Update x value
0C14A A5 03                                 LDA temp+3
0C14C 18                                    CLC
0C14D 69 08                                 ADC #$08
0C14F 85 03                                 STA temp+3
0C151                           
0C151                                       ;; Update temp for x,y position
0C151 E6 00                                 INC temp
0C153 A5 00                                 LDA temp
0C155 C9 03                                 CMP #SLIDE_WIDTH
0C157 D0 0F                                 BNE +
0C159                                           ;; Row is done; reset x-position
0C159 A5 01                                     LDA temp+1
0C15B 85 03                                     STA temp+3
0C15D                           
0C15D                                           ;; Update y-position
0C15D A5 02                                     LDA temp+2
0C15F 18                                        CLC
0C160 69 08                                     ADC #$08
0C162 85 02                                     STA temp+2
0C164                           
0C164                                           ;; Reset row counter
0C164 A9 00                                     LDA #$00
0C166 85 00                                     STA temp
0C168                                       +
0C168                           
0C168 4C 29 C1                          JMP -loop_load_sprite
0C16B                           
0C16B                               +done:
0C16B 86 32                             STX sprite_ram_pointer
0C16D                           
0C16D                                   ;; Retrieve x-register from stack
0C16D 68                                PLA
0C16E AA                                TAX
0C16F                           
0C16F                               +next:
0C16F                                   ;; Check if all animations have been updated
0C16F E8                                INX
0C170 E0 04                             CPX #MAX_ANIMATIONS
0C172 F0 03                             BEQ +done
0C174                           
0C174 4C D0 C0                      JMP -loop_load_animation
0C177                           +done:
0C177                           
0C177                               ;; Check if we're on the game screen
0C177 A5 2D                         LDA screen_mode
0C179 C9 01                         CMP #IS_GAME_SCREEN
0C17B F0 03                         BEQ +
0C17D 4C F6 C2                          JMP +doneGameScreen
0C180                               +
0C180                           
0C180                               ;; We're on the game screen
0C180                               ;; Check if position should be updated (ie. has nmi happened yet)
0C180 A5 2B                         LDA ball_update_position
0C182 F0 03                         BEQ +
0C184 4C DA C2                          JMP +skipBallMovement
0C187                               +
0C187                               
0C187                               ;; Move the ball
0C187                               .include "game/test/move_ball.asm"
0C187                           
0C187                               ;; Check if ball goes up or down
0C187 A5 2C                         LDA ball_flags
0C189 29 10                         AND #BALL_MOVES_DOWN
0C18B F0 24                         BEQ +moveBallUp
0C18D                           
0C18D                           
0C18D                           +moveBallDown:
0C18D                               ;; update the low byte
0C18D A5 1A                         LDA ball_ypos_lo
0C18F 18                            CLC
0C190 69 30                         ADC #BALL_SPEED_LO
0C192 85 1A                         STA ball_ypos_lo
0C194                           
0C194                               ;; update the high byte with carry
0C194 A5 19                         LDA ball_ypos_hi
0C196 69 02                         ADC #BALL_SPEED_HI
0C198 85 19                         STA ball_ypos_hi
0C19A                               
0C19A                               ;; Check bottom bound
0C19A C9 C8                         CMP #BOUND_BOTTOM
0C19C 90 32                         BCC +checkHorizontalMovement
0C19E F0 30                         BEQ +checkHorizontalMovement
0C1A0                           
0C1A0                           
0C1A0                               ;; Change ball direction to "up"
0C1A0 A9 C8                         LDA #BOUND_BOTTOM
0C1A2 85 19                         STA ball_ypos_hi
0C1A4 A9 00                         LDA #$00
0C1A6 85 1A                         STA ball_ypos_lo
0C1A8 A5 2C                         LDA ball_flags
0C1AA 29 EF                         AND #MOVE_BALL_UP
0C1AC 85 2C                         STA ball_flags
0C1AE 4C D0 C1                      JMP +checkHorizontalMovement
0C1B1                           
0C1B1                           
0C1B1                           +moveBallUp:
0C1B1                               ;; update the low byte
0C1B1 A5 1A                         LDA ball_ypos_lo
0C1B3 38                            SEC
0C1B4 E9 30                         SBC #BALL_SPEED_LO
0C1B6 85 1A                         STA ball_ypos_lo
0C1B8                           
0C1B8                               ;; update the high byte with carry
0C1B8 A5 19                         LDA ball_ypos_hi
0C1BA E9 02                         SBC #BALL_SPEED_HI
0C1BC 85 19                         STA ball_ypos_hi
0C1BE                               
0C1BE                               ;; Check top bound
0C1BE C9 30                         CMP #BOUND_TOP
0C1C0 B0 0E                         BCS +checkHorizontalMovement
0C1C2                           
0C1C2                               ;; Change ball direction to "down"
0C1C2 A9 30                         LDA #BOUND_TOP
0C1C4 85 19                         STA ball_ypos_hi
0C1C6 A9 00                         LDA #$00
0C1C8 85 1A                         STA ball_ypos_lo
0C1CA A5 2C                         LDA ball_flags
0C1CC 09 10                         ORA #MOVE_BALL_DOWN
0C1CE 85 2C                         STA ball_flags
0C1D0                           
0C1D0                           
0C1D0                           +checkHorizontalMovement:
0C1D0                           
0C1D0                               ;; Check if ball is being nudged
0C1D0 A5 33                         LDA nudge_counter
0C1D2 D0 41                         BNE +doneBallMovement
0C1D4                           
0C1D4                               ;; Check if left button is held
0C1D4 A5 0F                         LDA buttons_held
0C1D6 29 02                         AND #BUTTON_LEFT
0C1D8 F0 1B                         BEQ +
0C1DA                                   ;; update the low byte
0C1DA A5 18                             LDA ball_xpos_lo
0C1DC 38                                SEC
0C1DD E9 30                             SBC #BALL_SPEED_LO
0C1DF 85 18                             STA ball_xpos_lo
0C1E1                           
0C1E1                                   ;; update the high byte
0C1E1 A5 17                             LDA ball_xpos_hi
0C1E3 E9 02                             SBC #BALL_SPEED_HI
0C1E5 85 17                             STA ball_xpos_hi
0C1E7                                   
0C1E7                                   ;; Check left bound
0C1E7 C9 10                             CMP #BOUND_LEFT
0C1E9 B0 2A                             BCS +doneBallMovement
0C1EB                                   
0C1EB                                   ;; Set flag to nudge right and set nudge counter
0C1EB A5 2C                             LDA ball_flags
0C1ED 09 02                             ORA #NUDGE_BALL_RIGHT
0C1EF 20 60 C4                          JSR sub_InitiateNudge
0C1F2                           
0C1F2 4C 15 C2                          JMP +doneBallMovement        
0C1F5                               +
0C1F5                           
0C1F5                               ;; Check if right button is held
0C1F5 A5 0F                         LDA buttons_held
0C1F7 29 01                         AND #BUTTON_RIGHT
0C1F9 F0 1A                         BEQ +
0C1FB                                   ;; update the low byte
0C1FB A5 18                             LDA ball_xpos_lo
0C1FD 18                                CLC
0C1FE 69 30                             ADC #BALL_SPEED_LO
0C200 85 18                             STA ball_xpos_lo
0C202                           
0C202                                   ;; update the high byte
0C202 A5 17                             LDA ball_xpos_hi
0C204 69 02                             ADC #BALL_SPEED_HI
0C206 85 17                             STA ball_xpos_hi     
0C208                           
0C208                                  ;; Check right bound
0C208 C9 E8                             CMP #BOUND_RIGHT
0C20A 90 09                             BCC +doneBallMovement
0C20C F0 07                             BEQ +doneBallMovement
0C20E                                   
0C20E                                   ;; Set flag to nudge left and set nudge timer
0C20E A5 2C                             LDA ball_flags
0C210 29 FD                             AND #NUDGE_BALL_LEFT
0C212 20 60 C4                          JSR sub_InitiateNudge
0C215                               +
0C215                           
0C215                           
0C215                           +doneBallMovement:
0C215                           
0C215                               ;; Check nudge
0C215 A5 33                         LDA nudge_counter
0C217 F0 23                         BEQ +doneBallNudging
0C219 A5 2C                             LDA ball_flags
0C21B 29 02                             AND #NUDGE_BALL_RIGHT
0C21D F0 10                             BEQ +nudgeBallLeft
0C21F                                   
0C21F                                       ;; update the low byte
0C21F A5 18                                 LDA ball_xpos_lo
0C221 18                                    CLC
0C222 69 30                                 ADC #BALL_SPEED_LO
0C224 85 18                                 STA ball_xpos_lo
0C226                           
0C226                                       ;; update the high byte
0C226 A5 17                                 LDA ball_xpos_hi
0C228 69 02                                 ADC #BALL_SPEED_HI
0C22A 85 17                                 STA ball_xpos_hi  
0C22C 4C 3C C2                              JMP +doneBallNudging
0C22F                                   +nudgeBallLeft:
0C22F                                   
0C22F                                   ;; update the low byte
0C22F A5 18                             LDA ball_xpos_lo
0C231 38                                SEC
0C232 E9 30                             SBC #BALL_SPEED_LO
0C234 85 18                             STA ball_xpos_lo
0C236                           
0C236                                   ;; update the high byte
0C236 A5 17                             LDA ball_xpos_hi
0C238 E9 02                             SBC #BALL_SPEED_HI
0C23A 85 17                             STA ball_xpos_hi
0C23C                               +doneBallNudging:
0C23C                           
0C23C                               ;; Don't update position again until next frame
0C23C E6 2B                         INC ball_update_position
0C23E                           
0C23E                               
0C23E                               ;; Test collision detection
0C23E                               .include "game/test/collision_detection.asm"
0C23E                           
0C23E                               ;; Get ball's x-left, x-center, x-right position
0C23E A5 17                         LDA ball_xpos_hi
0C240 18                            CLC
0C241 69 F0                         ADC #BALL_LEFT_WGA
0C243 85 25                         STA ball_left
0C245 18                            CLC
0C246 69 04                         ADC #BALL_HALF_SIZE
0C248 85 26                         STA ball_center
0C24A 18                            CLC
0C24B 69 04                         ADC #BALL_HALF_SIZE
0C24D 85 27                         STA ball_right
0C24F                           
0C24F                               ;; Get ball's y-top, y-middle, y-bottom position
0C24F A5 19                         LDA ball_ypos_hi
0C251 18                            CLC
0C252 69 D0                         ADC #BALL_TOP_WGA
0C254 85 28                         STA ball_top
0C256 18                            CLC
0C257 69 04                         ADC #BALL_HALF_SIZE
0C259 85 29                         STA ball_middle
0C25B 18                            CLC
0C25C 69 04                         ADC #BALL_HALF_SIZE
0C25E 85 2A                         STA ball_bottom
0C260                           
0C260                           +checkRightCollision:
0C260                               ;; Check if ball moves right
0C260                               ;; No need to check nudging here as that will never collide with a tile
0C260 A5 0F                         LDA buttons_held
0C262 29 01                         AND #BUTTON_RIGHT
0C264 F0 1C                         BEQ +checkLeftCollision
0C266                           
0C266                               ;; Check tile at right position
0C266 A5 29                         LDA ball_middle
0C268 85 00                         STA temp
0C26A A5 27                         LDA ball_right
0C26C 85 01                         STA temp+1
0C26E 20 DE C3                      JSR sub_ConvertXYToTileType
0C271 29 01                         AND #TILE_IS_SOLID
0C273 F0 2C                         BEQ +checkTopCollision ; no need for left check as ball moves right
0C275                           
0C275                               ;; Tile is solid; nudge ball and evaluate tile type
0C275 A5 2C                         LDA ball_flags
0C277 29 FD                         AND #NUDGE_BALL_LEFT
0C279 20 60 C4                      JSR sub_InitiateNudge
0C27C 20 37 C4                      JSR sub_EvaluateTileType
0C27F 4C A1 C2                      JMP +checkTopCollision
0C282                           
0C282                           +checkLeftCollision:
0C282                               ;; Check if ball moves right
0C282                               ;; No need to check nudging here as that will never collide with a tile
0C282 A5 0F                         LDA buttons_held
0C284 29 02                         AND #BUTTON_LEFT
0C286 F0 19                         BEQ +checkTopCollision
0C288                           
0C288                               ;; Check tile at right position
0C288 A5 29                         LDA ball_middle
0C28A 85 00                         STA temp
0C28C A5 25                         LDA ball_left
0C28E 85 01                         STA temp+1
0C290 20 DE C3                      JSR sub_ConvertXYToTileType
0C293 29 01                         AND #TILE_IS_SOLID
0C295 F0 0A                         BEQ +checkTopCollision
0C297                           
0C297                               ;; Tile is solid; nudge ball and evaluate tile type
0C297 A5 2C                         LDA ball_flags
0C299 09 02                         ORA #NUDGE_BALL_RIGHT
0C29B 20 60 C4                      JSR sub_InitiateNudge
0C29E 20 37 C4                      JSR sub_EvaluateTileType
0C2A1                               
0C2A1                               
0C2A1                           +checkTopCollision:
0C2A1                               ;; Check if ball moves up
0C2A1 A5 2C                         LDA ball_flags
0C2A3 29 10                         AND #BALL_MOVES_DOWN
0C2A5 D0 1B                         BNE +checkBottomCollision
0C2A7                           
0C2A7                               ;; Check tile at top position
0C2A7 A5 28                         LDA ball_top
0C2A9 85 00                         STA temp
0C2AB A5 26                         LDA ball_center
0C2AD 85 01                         STA temp+1
0C2AF 20 DE C3                      JSR sub_ConvertXYToTileType
0C2B2 29 01                         AND #TILE_IS_SOLID
0C2B4 F0 24                         BEQ +doneCheckingCollision ; no need for bottom check as ball moves up
0C2B6                           
0C2B6                               ;; Tile is solid; move ball down and evaluate tile type
0C2B6 A5 2C                         LDA ball_flags
0C2B8 09 10                         ORA #MOVE_BALL_DOWN
0C2BA 85 2C                         STA ball_flags
0C2BC 20 37 C4                      JSR sub_EvaluateTileType
0C2BF 4C DA C2                      JMP +doneCheckingCollision
0C2C2                           
0C2C2                           +checkBottomCollision:
0C2C2                               ;; No movement check needed: since ball is not moving up, it must move down
0C2C2                           
0C2C2                               ;; Check tile at bottom position
0C2C2 A5 2A                         LDA ball_bottom
0C2C4 85 00                         STA temp
0C2C6 A5 26                         LDA ball_center
0C2C8 85 01                         STA temp+1
0C2CA 20 DE C3                      JSR sub_ConvertXYToTileType
0C2CD 29 01                         AND #TILE_IS_SOLID
0C2CF F0 09                         BEQ +doneCheckingCollision
0C2D1                           
0C2D1                               ;; Tile is solid; move ball up and evaluate tile type
0C2D1 A5 2C                         LDA ball_flags
0C2D3 29 EF                         AND #MOVE_BALL_UP
0C2D5 85 2C                         STA ball_flags
0C2D7 20 37 C4                      JSR sub_EvaluateTileType
0C2DA                               ;JMP +doneCheckingCollision
0C2DA                           
0C2DA                           +doneCheckingCollision:
0C2DA                           
0C2DA                           
0C2DA                           
0C2DA                           +skipBallMovement:
0C2DA                               ;; Add to sprite buffer
0C2DA A6 32                         LDX sprite_ram_pointer
0C2DC A5 19                         LDA ball_ypos_hi
0C2DE 9D 00 02                      STA ADDR_SPRITERAM,x
0C2E1 E8                            INX
0C2E2 A9 01                         LDA #BALL_TILE_CHR
0C2E4 9D 00 02                      STA ADDR_SPRITERAM,x
0C2E7 E8                            INX
0C2E8 A9 00                         LDA #BALL_ATTR
0C2EA 9D 00 02                      STA ADDR_SPRITERAM,x
0C2ED E8                            INX
0C2EE A5 17                         LDA ball_xpos_hi
0C2F0 9D 00 02                      STA ADDR_SPRITERAM,x
0C2F3 E8                            INX
0C2F4 86 32                         STX sprite_ram_pointer
0C2F6                           
0C2F6                           
0C2F6                           +doneGameScreen:
0C2F6                           
0C2F6                               ;; Upon pressing START, (next level) design will be drawn
0C2F6                               .include "game/test/load_next_level.asm"
0C2F6                               ;; If START button is pressed
0C2F6 A5 10                         LDA buttons_pressed
0C2F8 29 10                         AND #BUTTON_START
0C2FA F0 10                         BEQ +continue
0C2FC                                   ;; Load the next level
0C2FC E6 34                             INC current_level
0C2FE A5 34                             LDA current_level
0C300 C9 19                             CMP #25
0C302 D0 04                             BNE +
0C304 A9 00                                 LDA #$00
0C306 85 34                                 STA current_level
0C308                                   +
0C308                                   
0C308 A9 81                             LDA #LOAD_GAME_SCREEN
0C30A 85 2D                             STA screen_mode
0C30C                           
0C30C                               +continue:
0C30C                           
0C30C                           
0C30C                           
0C30C                               ;; Sprite clean-up
0C30C A6 32                         LDX sprite_ram_pointer
0C30E A9 EF                         LDA #$EF
0C310                               -
0C310 9D 00 02                          STA ADDR_SPRITERAM,x
0C313 E8                                INX
0C314 D0 FA                         BNE -
0C316 4C 57 C0                      JMP MainGameLoop
0C319                           
0C319                           ;; Subroutines
0C319                           .include "include/subroutines.asm"
0C319                           
0C319                           ;; RNG
0C319                           .include "subroutine/GetRandomNumber.asm"
0C319                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C319                           ;;
0C319                           ;; subroutine/GetRandomNumber.asm
0C319                           ;;
0C319                           ;; Simple and fast random number generator by White Flame.
0C319                           ;;
0C319                           ;; Set random_seed to an arbitrary number to randomize between
0C319                           ;; gaming sessions, for instance using the frame counter upon
0C319                           ;; pressing START on the intro screen.
0C319                           ;;
0C319                           ;;     ;; IF START PRESSED:
0C319                           ;;     LDA frame_counter
0C319                           ;;     STA random_seed
0C319                           ;;
0C319                           ;; Source:
0C319                           ;; codebase64.org/doku.php?id=base:small_fast_8-bit_prng
0C319                           ;;
0C319                           ;;
0C319                           
0C319                           sub_GetRandomNumber:
0C319                               ;; Force EOR if random_seed is zero
0C319 A5 16                         LDA random_seed
0C31B F0 05                         BEQ +doEor
0C31D                           
0C31D                               ;; Shift left, and EOR if the high bit is set
0C31D 0A                            ASL
0C31E F0 04                         BEQ +noEor
0C320 90 02                         BCC +noEor
0C322                           
0C322                           +doEor:
0C322 49 1D                         EOR #$1D
0C324                           
0C324                           +noEor:
0C324 85 16                         STA random_seed
0C326                           
0C326 60                            RTS
0C327                           
0C327                           
0C327                           ;; Read controller input
0C327                           .include "subroutine/ReadController.asm"
0C327                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C327                           ;;
0C327                           ;; subroutine/ReadController.asm
0C327                           ;;
0C327                           ;; Subroutine that polls the controller and stores the input
0C327                           ;; buttons in a variable. This version only handles controller
0C327                           ;; 1. Expects "buttons" variable to be declared in RAM.
0C327                           ;;
0C327                           ;;
0C327                           
0C327                           sub_ReadController:
0C327                           
0C327                               ;; Set strobe bit
0C327 A9 01                         LDA #$01
0C329 8D 16 40                      STA JOYPAD_1
0C32C                           
0C32C                               ;; Set up ring counter
0C32C 85 0F                         STA buttons_held
0C32E                           
0C32E                               ;; Clear strobe bit
0C32E 4A                            LSR
0C32F 8D 16 40                      STA JOYPAD_1
0C332                           
0C332                               ;; Loop through button presses
0C332                               -
0C332 AD 16 40                          LDA JOYPAD_1
0C335 4A                                LSR
0C336 26 0F                             ROL buttons_held
0C338                           
0C338                               ;; Check if ring counter is done
0C338 90 F8                         BCC -
0C33A                           
0C33A                               ;; Return from subroutine
0C33A 60                            RTS
0C33B                           
0C33B                           
0C33B                           ;; vBlank wait
0C33B                           .include "subroutine/WaitForVBlank.asm"
0C33B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C33B                           ;;
0C33B                           ;; subroutine/WaitForVBlank.asm
0C33B                           ;;
0C33B                           ;; Subroutine that essentially pauses script execution until
0C33B                           ;; vBlank happens.
0C33B                           ;;
0C33B                           ;;
0C33B                           
0C33B                           sub_WaitForVBlank:
0C33B 2C 02 20                      BIT $2002
0C33E 10 FB                         BPL sub_WaitForVBlank
0C340 60                            RTS
0C341                           
0C341                           
0C341                           ;; Game specific subroutines
0C341                           .include "game/include/subroutines.asm"
0C341                           ;; additional game-specific subroutines go here
0C341                           
0C341                           .include "game/subroutine/ClearScreen.asm"
0C341                           ;; Subroutine to clear the screen
0C341                           ;; If it's a game screen, add noise
0C341                           
0C341                           sub_ClearScreen:
0C341                               ;; Check of game screen or not
0C341 A5 2D                         LDA screen_mode
0C343 29 03                         AND #CHECK_SCREEN_MODE
0C345 C9 01                         CMP #IS_GAME_SCREEN
0C347 F0 02                         BEQ +
0C349 A9 00                             LDA #$00
0C34B                               +
0C34B 85 01                         STA temp+1
0C34D                               
0C34D                               ;; Set start writing address at tile (0,0) - or PPU address $2000
0C34D 2C 02 20                      BIT PPU_STATUS
0C350 A9 20                         LDA #$20
0C352 8D 06 20                      STA PPU_ADDR
0C355 A9 00                         LDA #$00
0C357 8D 06 20                      STA PPU_ADDR
0C35A                               
0C35A                               ;; Set up tile to draw and loop
0C35A 85 00                         STA temp
0C35C AA                            TAX
0C35D A8                            TAY
0C35E                           
0C35E                               -     
0C35E                                   ;; Write empty tile or noise (#$00) and add one to PPU address
0C35E A5 00                             LDA temp
0C360 8D 07 20                          STA PPU_DATA
0C363                           
0C363                                   ;; Check if we should draw noise next. Noise is drawn if:
0C363                                   ;; - Screen mode is game screen
0C363                                   ;; - Y between #$06 and #$19 (inclusive)
0C363                                   ;; - X between #$02 and #$1D (inclusive)
0C363                                   
0C363                                   ;; If not a game screen, or Y exceeds row $17, skip further check
0C363 A5 01                             LDA temp+1
0C365 F0 1C                             BEQ +nextTileInRow
0C367                                   
0C367                                   ;; If Y < $6, skip the check
0C367 C0 06                             CPY #$06
0C369 90 18                             BCC +nextTileInRow
0C36B                                   
0C36B                                   ;; If X < $1, skip the check
0C36B E0 01                             CPX #$01
0C36D 90 14                             BCC +nextTileInRow
0C36F                                   
0C36F                                   ;; If X >= $1D, skip the check. If it IS $1D, set temp = 0
0C36F E0 1D                             CPX #$1D
0C371 D0 04                             BNE +
0C373 A9 00                                 LDA #$00
0C375 85 00                                 STA temp
0C377                                   +
0C377 B0 0A                             BCS +nextTileInRow
0C379                                   
0C379                                   ;; Load a random noise tile (tiles $68-$6F in CHR ROM)
0C379 20 19 C3                          JSR sub_GetRandomNumber
0C37C 29 07                             AND #%00000111
0C37E 18                                CLC
0C37F 69 68                             ADC #$68
0C381 85 00                             STA temp
0C383                           
0C383                           +nextTileInRow:
0C383                                   
0C383                                   ;; Check if a row has been done. If not, draw the next
0C383 E8                                INX
0C384 E0 20                             CPX #$20
0C386 D0 D6                             BNE -
0C388                                   
0C388                                   ;; Go to the next row (if any left)
0C388 A2 00                             LDX #00
0C38A C8                                INY
0C38B                                   
0C38B                                   ;; If Y is 1A, skip noise tile check until done drawing
0C38B C0 1A                             CPY #$1A
0C38D D0 04                             BNE +
0C38F A9 00                                 LDA #$00
0C391 85 01                                 STA temp+1
0C393                                   +
0C393                                   
0C393 C0 1E                             CPY #$1E
0C395 D0 C7                         BNE -
0C397                           
0C397                               ;; Clear attribute table
0C397 A9 23                         LDA #$23
0C399 8D 06 20                      STA PPU_ADDR
0C39C A9 C0                         LDA #$C0
0C39E 8D 06 20                      STA PPU_ADDR
0C3A1 A9 00                         LDA #$00
0C3A3 A2 40                         LDX #$40
0C3A5                               -
0C3A5 8D 07 20                          STA PPU_DATA
0C3A8 CA                                DEX
0C3A9 D0 FA                         BNE -
0C3AB                               
0C3AB 60                            RTS0C3AC                           .include "game/subroutine/ColorizeBall.asm"
0C3AC                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C3AC                           ;;
0C3AC                           ;;  Subroutine: ColorizeBall
0C3AC                           ;;
0C3AC                           ;;  Applies the color set through ball_flags to the ball sprite.
0C3AC                           ;;
0C3AC                           ;;
0C3AC                           
0C3AC                           
0C3AC                           sub_ColorizeBall:
0C3AC                           
0C3AC                               ;; Get color from ball_flags
0C3AC 4A                            LSR
0C3AD 4A                            LSR
0C3AE 4A                            LSR
0C3AF 4A                            LSR
0C3B0 4A                            LSR
0C3B1 AA                            TAX
0C3B2                           
0C3B2                               ;; Add new light color of ball to PPU palette
0C3B2 A9 3F                         LDA #$3F
0C3B4 85 00                         STA temp
0C3B6 A9 11                         LDA #$11
0C3B8 85 01                         STA temp+1
0C3BA BD EA C9                      LDA tbl_BallColorLight,x
0C3BD 85 02                         STA temp+2
0C3BF 20 86 C8                      JSR sub_WriteByteToPPUBuffer
0C3C2                               
0C3C2                               ;; Add new dark color of ball to PPU palette
0C3C2 E6 01                         INC temp+1
0C3C4 BD E4 C9                      LDA tbl_BallColorDark,x
0C3C7 85 02                         STA temp+2
0C3C9 20 86 C8                      JSR sub_WriteByteToPPUBuffer
0C3CC                               
0C3CC 60                            RTS
0C3CD                           
0C3CD                           .include "game/subroutine/ColorsMatch.asm"
0C3CD                           
0C3CD                           ;; Subroutine to check if ball color matches colliding tile color
0C3CD                           
0C3CD                           sub_ColorsMatch:
0C3CD                               ;; Save tile color in temp variable
0C3CD A5 35                         LDA colliding_tile
0C3CF 29 0E                         AND #%00001110
0C3D1 85 00                         STA temp
0C3D3                           
0C3D3                               ;; Get ball color
0C3D3 A5 2C                         LDA ball_flags
0C3D5 29 E0                         AND #%11100000
0C3D7 4A                            LSR
0C3D8 4A                            LSR
0C3D9 4A                            LSR
0C3DA 4A                            LSR
0C3DB                           
0C3DB                               ;; Compare with tile color
0C3DB C5 00                         CMP temp
0C3DD 60                            RTS
0C3DE                           
0C3DE                           .include "game/subroutine/ConvertXYToTileType.asm"
0C3DE                           
0C3DE                           ;; Subroutine to convert the ball's position to a tile type
0C3DE                           ;; - Expects temp to be y-position of ball within game area
0C3DE                           ;; - Expects temp+1 to be x-position of ball within game area
0C3DE                           ;; - Puts result in accumulator and zp variable
0C3DE                           ;; - Corrupts X-register
0C3DE                           
0C3DE                           sub_ConvertXYToTileType:
0C3DE A5 01                         LDA temp+1
0C3E0 4A                            LSR
0C3E1 4A                            LSR
0C3E2 4A                            LSR
0C3E3 4A                            LSR
0C3E4 85 09                         STA temp+9
0C3E6 A5 00                         LDA temp
0C3E8 29 F0                         AND #%11110000
0C3EA 18                            CLC
0C3EB 65 09                         ADC temp+9
0C3ED 85 09                         STA temp+9
0C3EF AA                            TAX
0C3F0 BD 00 04                      LDA ADDR_SCREENTILERAM, x
0C3F3 85 35                         STA colliding_tile
0C3F5 60                            RTS
0C3F6                           
0C3F6                           .include "game/subroutine/DisableEnableRendering.asm"
0C3F6                           sub_DisableRendering:
0C3F6                               ;; Force NMI skip, disable rendering
0C3F6 A9 01                     	LDA #$01
0C3F8 85 14                     	STA force_skip_nmi
0C3FA 20 3B C3                      JSR sub_WaitForVBlank
0C3FD A5 12                         LDA soft_ppu_mask
0C3FF 29 E7                         AND #%11100111
0C401 8D 01 20                      STA PPU_MASK
0C404 85 12                         STA soft_ppu_mask
0C406 20 3B C3                      JSR sub_WaitForVBlank
0C409 60                            RTS
0C40A                           
0C40A                           sub_EnableRendering:
0C40A                               ;; Enable rendering
0C40A A9 00                     	LDA #$00
0C40C 8D 05 20                  	STA PPU_SCROLL
0C40F 8D 05 20                  	STA PPU_SCROLL
0C412 20 3B C3                      JSR sub_WaitForVBlank
0C415 85 14                     	STA force_skip_nmi
0C417 A5 12                         LDA soft_ppu_mask
0C419 09 18                         ORA #%00011000
0C41B 85 12                         STA soft_ppu_mask
0C41D 8D 01 20                      STA PPU_MASK
0C420 20 3B C3                      JSR sub_WaitForVBlank
0C423 60                            RTS
0C424                           .include "game/subroutine/DrawIntroScreenLogoTile.asm"
0C424                           sub_drawIntroScreenLogoTile:
0C424 B9 CC C8                      LDA tbl_IntroScreenLogoChr,y
0C427 C9 60                         CMP #$60
0C429 D0 08                         BNE +
0C42B 20 19 C3                          JSR sub_GetRandomNumber
0C42E 29 07                             AND #$07
0C430 18                                CLC
0C431 69 60                             ADC #$60
0C433                               +
0C433 8D 07 20                      STA PPU_DATA
0C436 60                            RTS
0C437                           .include "game/subroutine/EvaluateTileType.asm"
0C437                           
0C437                           ;; Subroutine to evaluate the colliding tile type and take its
0C437                           ;; corresponding action (move block, kill player, ...)
0C437                           ;; - Expects X-register to be the ADDR_SCREENTILERAM offset
0C437                           ;; - Uses zp variable colliding_tile
0C437                           
0C437                           sub_EvaluateTileType:
0C437                           
0C437                               ;; Check if collided tile is a color block
0C437 A5 35                         LDA colliding_tile
0C439 29 80                         AND #IS_COLOR_BLOCK
0C43B F0 07                         BEQ +checkIfPaintBlock
0C43D                                   ;; It's a color block. Check if the colors match
0C43D 20 CD C3                          JSR sub_ColorsMatch
0C440 F0 01                             BEQ +
0C442                                       ;; Colors don't match - return
0C442 60                                    RTS
0C443                                   +
0C443                           
0C443                                   ;; Colors match. Destroy color block
0C443                                   ;; - Add the tiles that need updating to ppu buffer
0C443                                   ;; - Load destruction animation on tile
0C443                                   ;; - Write #$00 in tile type ram (makes not-solid)
0C443                                   ;; - Update attribute table accordingly through ppu buffer
0C443                                   ;; - If there are no color blocks left:
0C443                                   ;;   - Freeze ball
0C443                                   ;;   - Initiate level-win state
0C443                                   ;; (@TODO)
0C443 60                                RTS
0C444                               +checkIfPaintBlock:
0C444                               
0C444                               ;; Check if collided tile is a paint block
0C444 A5 35                         LDA colliding_tile
0C446 29 10                         AND #IS_PAINT_BLOCK
0C448 F0 01                         BEQ +checkIfDeathBlock
0C44A                                   ;; It's a paint block. Update ball color (@TODO)
0C44A                           
0C44A                           ;        ;; Save x-register
0C44A                           ;        TXA
0C44A                           ;        PHA
0C44A                           ;
0C44A                           ;        ;; Get tile color
0C44A                           ;        LDA colliding_tile
0C44A                           ;        AND #%00001110
0C44A                           ;        ASL
0C44A                           ;        ASL
0C44A                           ;        ASL
0C44A                           ;        ASL
0C44A                           ;        STA temp
0C44A                           ;
0C44A                           ;        ;; Apply tile color to ball
0C44A                           ;        LDA ball_flags
0C44A                           ;        AND #%00011111
0C44A                           ;        ORA temp
0C44A                           ;        STA ball_flags
0C44A                           ;        JSR sub_ColorizeBall
0C44A                           ;
0C44A                           ;        ;; Restore x-register
0C44A                           ;        PLA
0C44A                           ;        TAX
0C44A                           
0C44A                                   ;; Return
0C44A 60                                RTS
0C44B                               +checkIfDeathBlock:
0C44B                           
0C44B                               ;; Check if collided tile is a death block
0C44B A5 35                         LDA colliding_tile
0C44D 29 20                         AND #IS_DEATH_BLOCK
0C44F F0 01                         BEQ +checkIfMoveBlock
0C451                                   ;; It is a death block. Kill player and return (@TODO)
0C451                           ;        LDA ball_flags
0C451                           ;        ORA #%00000101
0C451                           ;        STA ball_flags
0C451 60                                RTS
0C452                               +checkIfMoveBlock:
0C452                           
0C452                               ;; Check if collided tile is a move block
0C452 A5 35                         LDA colliding_tile
0C454 29 40                         AND #IS_MOVE_BLOCK
0C456 F0 07                         BEQ +done
0C458                                   ;; It is a move block. Check if colors match
0C458 20 CD C3                          JSR sub_ColorsMatch
0C45B F0 01                             BEQ +
0C45D                                       ;; Colors don't match - return
0C45D 60                                    RTS
0C45E                                   +
0C45E                           
0C45E                                   ;; Colors match.
0C45E                                   ;; - Check if next tile is a solid
0C45E                                   ;; - If not, move the tile:
0C45E                                   ;;   - Add the tiles that need updating to ppu buffer
0C45E                                   ;;   - Add move tile sprite over the original tile
0C45E                                   ;;   - Initiate moving the sprite that way for 16px
0C45E                                   ;;   - Write #$00 in tile type ram (makes not-solid)
0C45E                                   ;;   - Update attribute table accordingly through ppu buffer
0C45E                                   ;; - After moving the sprite, in a different routine:
0C45E                                   ;;   - Add move tile data on the new tile location
0C45E                                   ;;   - Write the original tile type data on new position in ram
0C45E                                   ;;   - Destroy sprite
0C45E                                   ;;   - Update attribute table accordingly through ppu buffer
0C45E                                   ;; (@TODO)
0C45E 60                                RTS
0C45F                               +done:
0C45F                           
0C45F                               ;; Return
0C45F 60                            RTS
0C460                           
0C460                           .include "game/subroutine/InitiateNudge.asm"
0C460                           
0C460                           sub_InitiateNudge:
0C460 85 2C                         STA ball_flags
0C462 A9 03                         LDA #NUDGE_FRAMES
0C464 85 33                         STA nudge_counter
0C466 60                            RTS
0C467                           
0C467                           .include "game/subroutine/JumpToPointer.asm"
0C467                           sub_JumpToPointer:
0C467 6C 0C 00                      JMP (pointer)
0C46A                               ;RTS must be handled by the routine (pointer) jumps to
0C46A                           .include "game/subroutine/LoadGameScreen.asm"
0C46A                           sub_LoadGameScreen:
0C46A                           
0C46A                               ;; Clear the screen
0C46A 20 41 C3                      JSR sub_ClearScreen
0C46D                               
0C46D                               ;; Clear collision and attribute data
0C46D A2 00                         LDX #$00
0C46F 8A                            TXA
0C470                               -
0C470 9D 00 04                          STA tile_type,x
0C473 E8                                INX
0C474 D0 FA                         BNE -
0C476                               
0C476                               ;; Get pointer from current level
0C476 A6 34                         LDX current_level
0C478 BD EE D0                      LDA tbl_lvl_layout_lo,x
0C47B 85 0C                         STA pointer
0C47D BD D5 D0                      LDA tbl_lvl_layout_hi,x
0C480 85 0D                         STA pointer+1
0C482                           
0C482                               ;; Set up the loop
0C482 A0 00                         LDY #$00
0C484                           -drawRowColumnLoop:
0C484                           
0C484                               ;; Load (x,y) of current set of tiles
0C484 B1 0C                         LDA (pointer),y
0C486                           
0C486                               ;; Check if level is done; if so, skip the loop
0C486 C9 FF                         CMP #LEVEL_END
0C488 D0 03                         BNE +
0C48A 4C D3 C5                          JMP +doneLevelLoad
0C48D                               +
0C48D                           
0C48D                               ;; Store (x,y) and number of tiles and tile data in temp variable
0C48D 85 00                         STA temp
0C48F C8                            INY
0C490 B1 0C                         LDA (pointer),y
0C492 85 01                         STA temp+1
0C494                               
0C494                               ;; Convert (x,y) to PPU address
0C494                               ;; temp+2 = PPU_hi = $20 + _y/4_ + carry from temp+3
0C494 A5 00                         LDA temp
0C496 29 0F                         AND #%00001111
0C498 4A                            LSR
0C499 4A                            LSR
0C49A 09 20                         ORA #$20
0C49C 85 02                         STA temp+2
0C49E                               
0C49E                               ;; temp+3 = PPU_lo = 2*x + $40*(y%4) + $C2
0C49E A5 00                         LDA temp
0C4A0 29 F0                         AND #%11110000
0C4A2 4A                            LSR
0C4A3 4A                            LSR
0C4A4 4A                            LSR
0C4A5 85 03                         STA temp+3
0C4A7                               
0C4A7 A5 00                         LDA temp
0C4A9 29 03                         AND #%00000011
0C4AB AA                            TAX
0C4AC BD 39 D1                      LDA tbl_Times64,x
0C4AF 18                            CLC
0C4B0 65 03                         ADC temp+3
0C4B2 18                            CLC
0C4B3 69 C2                         ADC #$C2
0C4B5 85 03                         STA temp+3
0C4B7                               
0C4B7                               ;; Add carry to temp+2
0C4B7 A5 02                         LDA temp+2
0C4B9 69 00                         ADC #$00
0C4BB 85 02                         STA temp+2
0C4BD                           
0C4BD                               ;; Convert tile data to loop count and tile type
0C4BD                               ;; temp+4 = color
0C4BD A5 01                         LDA temp+1
0C4BF 29 07                         AND #%00000111
0C4C1 85 04                         STA temp+4
0C4C3                               
0C4C3                               ;; If color = 7, this is a wall
0C4C3 C9 07                         CMP #%00000111
0C4C5 F0 12                         BEQ +wallHack
0C4C7                                   
0C4C7                                   ;; temp+7 = first or second set in CHR (add 5 to offset)
0C4C7 29 01                             AND #%00000001
0C4C9 F0 02                             BEQ +
0C4CB A9 05                                 LDA #$05
0C4CD                                   +
0C4CD 85 07                             STA temp+7
0C4CF                                
0C4CF                                   ;; temp+5 = tile type
0C4CF A5 01                             LDA temp+1
0C4D1 4A                                LSR
0C4D2 4A                                LSR
0C4D3 4A                                LSR
0C4D4 29 03                             AND #%00000011
0C4D6 4C DF C4                          JMP +setTileType
0C4D9                               +wallHack:
0C4D9                               
0C4D9                               ;; It's a wall! Set CHR offset to 0, and tile type to 4.
0C4D9 A9 00                         LDA #$00
0C4DB 85 07                         STA temp+7
0C4DD A9 04                         LDA #$04
0C4DF                           
0C4DF                           +setTileType:    
0C4DF 85 05                         STA temp+5
0C4E1                               
0C4E1                               ;; X = tile offset
0C4E1 18                            CLC
0C4E2 65 07                         ADC temp+7
0C4E4 AA                            TAX
0C4E5                               
0C4E5                               ;; temp+6 = number of tiles
0C4E5 A5 01                         LDA temp+1
0C4E7 29 60                         AND #%01100000
0C4E9 4A                            LSR
0C4EA 4A                            LSR
0C4EB 4A                            LSR
0C4EC 4A                            LSR
0C4ED 4A                            LSR
0C4EE 85 06                         STA temp+6
0C4F0                               
0C4F0                               ;; Translate (x,y) to (y,x) for tile RAM
0C4F0 A5 00                         LDA temp
0C4F2 0A                            ASL
0C4F3 0A                            ASL
0C4F4 0A                            ASL
0C4F5 0A                            ASL
0C4F6 85 08                         STA temp+8
0C4F8 A5 00                         LDA temp
0C4FA 4A                            LSR
0C4FB 4A                            LSR
0C4FC 4A                            LSR
0C4FD 4A                            LSR
0C4FE 05 08                         ORA temp+8
0C500 85 00                         STA temp
0C502                               
0C502                               ;; Set up loop
0C502 98                            TYA
0C503 48                            PHA
0C504 A4 06                         LDY temp+6
0C506                           
0C506                               -drawTileLoop:
0C506                                   ;; Write PPU address
0C506 2C 02 20                          BIT PPU_STATUS
0C509 A5 02                             LDA temp+2
0C50B 8D 06 20                          STA PPU_ADDR
0C50E A5 03                             LDA temp+3
0C510 8D 06 20                          STA PPU_ADDR
0C513                                   
0C513                                   ;; Write first and second tile
0C513 BD 3D D1                          LDA tbl_GametileTopLeft,x
0C516 8D 07 20                          STA PPU_DATA
0C519 BD 47 D1                          LDA tbl_GametileTopRight,x
0C51C 8D 07 20                          STA PPU_DATA
0C51F                                   
0C51F                                   ;; Update PPU address
0C51F 2C 02 20                          BIT PPU_STATUS
0C522 A5 02                             LDA temp+2
0C524 8D 06 20                          STA PPU_ADDR
0C527 A5 03                             LDA temp+3
0C529 18                                CLC
0C52A 69 20                             ADC #$20
0C52C 8D 06 20                          STA PPU_ADDR
0C52F                                   
0C52F                                   ;; Write third and fourth tile
0C52F BD 51 D1                          LDA tbl_GametileBottomLeft,x
0C532 8D 07 20                          STA PPU_DATA
0C535 BD 5B D1                          LDA tbl_GametileBottomRight,x
0C538 8D 07 20                          STA PPU_DATA
0C53B                           
0C53B                                   ;; Push x-register to stack
0C53B 8A                                TXA
0C53C 48                                PHA
0C53D                                   
0C53D                                   ;; Update tile RAM (aka collision table)
0C53D A6 05                             LDX temp+5
0C53F BD 65 D1                          LDA tbl_GameTileRamByte,x
0C542 05 04                             ORA temp+4
0C544 0A                                ASL
0C545 09 01                             ORA #%00000001
0C547 A6 00                             LDX temp
0C549 9D 00 04                          STA tile_type,x
0C54C                           
0C54C                                   ;; Check if shade 1 should be drawn
0C54C E8                                INX
0C54D BD 00 04                          LDA tile_type,x
0C550 D0 05                             BNE +
0C552 A9 00                                 LDA #$00
0C554 8D 07 20                              STA PPU_DATA
0C557                                   +
0C557                                   
0C557                                   ;; Check if shade 2 should be drawn
0C557 A5 03                             LDA temp+3
0C559 18                                CLC
0C55A 69 41                             ADC #$41
0C55C 85 03                             STA temp+3
0C55E A5 02                             LDA temp+2
0C560 69 00                             ADC #$00
0C562 85 02                             STA temp+2
0C564                                   
0C564 8A                                TXA
0C565 18                                CLC
0C566 69 0F                             ADC #$0F
0C568 AA                                TAX
0C569                                   
0C569 BD 00 04                          LDA tile_type,x
0C56C D0 0F                             BNE +
0C56E A5 02                                 LDA temp+2
0C570 8D 06 20                              STA PPU_ADDR
0C573 A5 03                                 LDA temp+3
0C575 8D 06 20                              STA PPU_ADDR
0C578 A9 00                                 LDA #$00
0C57A 8D 07 20                              STA PPU_DATA
0C57D                                   +
0C57D                           
0C57D                                   ;; Check if shade 3 should be drawn
0C57D E8                                INX
0C57E E6 03                             INC temp+3
0C580 BD 00 04                          LDA tile_type,x
0C583 D0 0F                             BNE +
0C585 A5 02                                 LDA temp+2
0C587 8D 06 20                              STA PPU_ADDR
0C58A A5 03                                 LDA temp+3
0C58C 8D 06 20                              STA PPU_ADDR
0C58F A9 00                                 LDA #$00
0C591 8D 07 20                              STA PPU_DATA
0C594                                   +
0C594                                   
0C594                                   ;; Restore x-register from stack
0C594 68                                PLA
0C595 AA                                TAX
0C596                                   
0C596                                   ;; Reset pointer for next tile
0C596 A5 03                             LDA temp+3
0C598 38                                SEC
0C599 E9 42                             SBC #$42
0C59B 85 03                             STA temp+3
0C59D A5 02                             LDA temp+2
0C59F E9 00                             SBC #$00
0C5A1 85 02                             STA temp+2
0C5A3                                   
0C5A3                                   ;; Draw next metatile in this loop (if any left)
0C5A3 88                                DEY
0C5A4 30 27                             BMI +doneDrawingRowColumn
0C5A6                                   
0C5A6                                   ;; Is it a row or a column?
0C5A6 A5 01                             LDA temp+1
0C5A8 10 17                             BPL +
0C5AA                                       ;; It is a column: move pointer down (+$40)
0C5AA A5 03                                 LDA temp+3
0C5AC 18                                    CLC
0C5AD 69 40                                 ADC #$40
0C5AF 85 03                                 STA temp+3
0C5B1 A5 02                                 LDA temp+2
0C5B3 69 00                                 ADC #$00
0C5B5 85 02                                 STA temp+2
0C5B7                                       
0C5B7                                       ;; Add 16 to temp (as a tile RAM pointer)
0C5B7 A5 00                                 LDA temp
0C5B9 18                                    CLC
0C5BA 69 10                                 ADC #$10
0C5BC 85 00                                 STA temp
0C5BE 4C CA C5                              JMP +drawNextTile
0C5C1                                   +
0C5C1                                   
0C5C1                                   ;; It is a row: move pointer right (+$02)
0C5C1 A5 03                             LDA temp+3
0C5C3 18                                CLC
0C5C4 69 02                             ADC #$02
0C5C6 85 03                             STA temp+3
0C5C8                                   
0C5C8                                   ;; Add 1 to temp (as a tile RAM pointer)
0C5C8 E6 00                             INC temp
0C5CA                           
0C5CA                               
0C5CA                               ;; Next tile in the row/column
0C5CA                                   +drawNextTile:
0C5CA 4C 06 C5                      JMP -drawTileLoop
0C5CD                           
0C5CD                               ;; Go to the next set of tiles
0C5CD                           +doneDrawingRowColumn:
0C5CD 68                            PLA
0C5CE A8                            TAY
0C5CF C8                            INY
0C5D0 4C 84 C4                      JMP -drawRowColumnLoop
0C5D3                           
0C5D3                           ;; Level loading is done
0C5D3                           +doneLevelLoad:
0C5D3                           
0C5D3                               ;; Top game bound: set PPU_ADDR offset and draw 28 tiles
0C5D3 A9 20                         LDA #$20
0C5D5 8D 06 20                      STA PPU_ADDR
0C5D8 A9 A2                         LDA #$A2
0C5DA 8D 06 20                      STA PPU_ADDR
0C5DD A9 35                         LDA #$35
0C5DF 20 ED C7                      JSR sub_Draw28HorizontalTiles
0C5E2                           
0C5E2                               ;; Bottom game bound: set PPU_ADDR offset and draw 28 tiles
0C5E2 A9 23                         LDA #$23
0C5E4 8D 06 20                      STA PPU_ADDR
0C5E7 A9 42                         LDA #$42
0C5E9 8D 06 20                      STA PPU_ADDR
0C5EC A9 31                         LDA #$31
0C5EE 20 ED C7                      JSR sub_Draw28HorizontalTiles
0C5F1                           
0C5F1                               ;; Left & right game bounds
0C5F1                               ;; Set PPU_ADDR and store in temp variables
0C5F1 A9 20                         LDA #$20
0C5F3 85 00                         STA temp
0C5F5 8D 06 20                      STA PPU_ADDR
0C5F8 A9 C1                         LDA #$C1
0C5FA 85 01                         STA temp+1
0C5FC 8D 06 20                      STA PPU_ADDR
0C5FF                               
0C5FF                               ;; Set vertical bound tile and set up loop
0C5FF A0 33                         LDY #$33
0C601 A2 14                         LDX #20
0C603                               -
0C603                                   ;; Show left tile
0C603 8C 07 20                          STY PPU_DATA
0C606                                   
0C606                                   ;; Set PPU_ADDR to right bound by adding 29 (tiles) to low byte
0C606 A5 00                             LDA temp
0C608 8D 06 20                          STA PPU_ADDR
0C60B A5 01                             LDA temp+1
0C60D 18                                CLC
0C60E 69 1D                             ADC #29
0C610 85 01                             STA temp+1
0C612 8D 06 20                          STA PPU_ADDR
0C615                           
0C615                                   ;; Show right tile
0C615 8C 07 20                          STY PPU_DATA
0C618                           
0C618                                   ;; Check if we're done yet
0C618 CA                                DEX
0C619 F0 18                             BEQ +drawCorners
0C61B                                   
0C61B                                   ;; Not done yet: add 3 to low byte for next left bound
0C61B A5 01                             LDA temp+1
0C61D 18                                CLC
0C61E 69 03                             ADC #3
0C620 85 01                             STA temp+1
0C622                                   
0C622                                   ;; Apply carry to high byte
0C622 A5 00                             LDA temp
0C624 69 00                             ADC #$00
0C626 85 00                             STA temp
0C628                                   
0C628                                   ;; Store next PPU_ADDR to draw at
0C628 8D 06 20                          STA PPU_ADDR
0C62B A5 01                             LDA temp+1
0C62D 8D 06 20                          STA PPU_ADDR
0C630 4C 03 C6                      JMP -
0C633                               
0C633                               
0C633                           
0C633                           +drawCorners:
0C633                               ;; Draw the corners of the playing field
0C633 A9 20                         LDA #$20
0C635 8D 06 20                      STA PPU_ADDR
0C638 A9 A1                         LDA #$A1
0C63A 8D 06 20                      STA PPU_ADDR
0C63D A9 39                         LDA #$39
0C63F 8D 07 20                      STA PPU_DATA
0C642                           
0C642 A9 20                         LDA #$20
0C644 8D 06 20                      STA PPU_ADDR
0C647 A9 BE                         LDA #$BE
0C649 8D 06 20                      STA PPU_ADDR
0C64C A9 3A                         LDA #$3A
0C64E 8D 07 20                      STA PPU_DATA
0C651                           
0C651 A9 23                         LDA #$23
0C653 8D 06 20                      STA PPU_ADDR
0C656 A9 41                         LDA #$41
0C658 8D 06 20                      STA PPU_ADDR
0C65B A9 36                         LDA #$36
0C65D 8D 07 20                      STA PPU_DATA
0C660                           
0C660 A9 23                         LDA #$23
0C662 8D 06 20                      STA PPU_ADDR
0C665 A9 5E                         LDA #$5E
0C667 8D 06 20                      STA PPU_ADDR
0C66A A9 34                         LDA #$34
0C66C 8D 07 20                      STA PPU_DATA
0C66F                           
0C66F                           
0C66F                               ;; Draw the hud labels
0C66F A9 20                         LDA #$20
0C671 8D 06 20                      STA PPU_ADDR
0C674 A9 62                         LDA #$62
0C676 8D 06 20                      STA PPU_ADDR
0C679 A2 00                         LDX #$00
0C67B                               -
0C67B BD 6A D1                          LDA tbl_HudText,x
0C67E 8D 07 20                          STA PPU_DATA
0C681 E8                                INX
0C682 E0 1C                             CPX #28
0C684 D0 F5                         BNE -
0C686                           
0C686                           
0C686                               ;; Draw the current score
0C686 A9 20                         LDA #$20
0C688 8D 06 20                      STA PPU_ADDR
0C68B A9 83                         LDA #$83
0C68D 8D 06 20                      STA PPU_ADDR
0C690 A2 00                         LDX #$00
0C692                               -
0C692 B5 1C                             LDA ball_score,x
0C694 18                                CLC
0C695 69 01                             ADC #$01
0C697 8D 07 20                          STA PPU_DATA
0C69A E8                                INX
0C69B E0 06                             CPX #$06
0C69D D0 F3                         BNE -
0C69F                           
0C69F                           
0C69F                               ;; Draw the level number
0C69F                               ;; (with primitive HEX>DEC)
0C69F A5 34                         LDA current_level
0C6A1 18                            CLC
0C6A2 69 01                         ADC #$01
0C6A4 85 01                         STA temp+1
0C6A6                               
0C6A6 C9 14                         CMP #20
0C6A8 B0 13                         BCS +tempIsTwo
0C6AA                               
0C6AA C9 0A                         CMP #10
0C6AC B0 05                         BCS +tempIsOne
0C6AE                               
0C6AE A9 00                         LDA #$00
0C6B0 4C C4 C6                      JMP +setTemp
0C6B3                               
0C6B3                           +tempIsOne:
0C6B3 38                            SEC
0C6B4 E9 0A                         SBC #10
0C6B6 85 01                         STA temp+1
0C6B8 A9 01                         LDA #$01
0C6BA 4C C4 C6                      JMP +setTemp
0C6BD                               
0C6BD                           +tempIsTwo:
0C6BD 38                            SEC
0C6BE E9 14                         SBC #20
0C6C0 85 01                         STA temp+1
0C6C2 A9 02                         LDA #$02
0C6C4                           
0C6C4                           +setTemp:
0C6C4 85 00                         STA temp
0C6C6                               
0C6C6 E6 00                         INC temp
0C6C8 E6 01                         INC temp+1
0C6CA                               
0C6CA A9 20                         LDA #$20
0C6CC 8D 06 20                      STA PPU_ADDR
0C6CF A9 8B                         LDA #$8B
0C6D1 8D 06 20                      STA PPU_ADDR
0C6D4 A5 00                         LDA temp
0C6D6 8D 07 20                      STA PPU_DATA
0C6D9 A5 01                         LDA temp+1
0C6DB 8D 07 20                      STA PPU_DATA
0C6DE                           
0C6DE                           
0C6DE                               ;; Draw lives (presumes lives to be capped at 9)
0C6DE A9 20                         LDA #$20
0C6E0 8D 06 20                      STA PPU_ADDR
0C6E3 A9 92                         LDA #$92
0C6E5 8D 06 20                      STA PPU_ADDR
0C6E8 A6 1B                         LDX ball_lives
0C6EA E8                            INX
0C6EB 8E 07 20                      STX PPU_DATA
0C6EE                           
0C6EE                           
0C6EE                               ;; Set and draw bonus
0C6EE A9 07                         LDA #$07
0C6F0 85 22                         STA ball_bonus
0C6F2 A9 09                         LDA #$09
0C6F4 85 23                         STA ball_bonus+1
0C6F6 85 24                         STA ball_bonus+2
0C6F8                               
0C6F8 A9 20                         LDA #$20
0C6FA 8D 06 20                      STA PPU_ADDR
0C6FD A9 9A                         LDA #$9A
0C6FF 8D 06 20                      STA PPU_ADDR
0C702 A2 00                         LDX #$00
0C704                               -
0C704 B5 22                             LDA ball_bonus,x
0C706 18                                CLC
0C707 69 01                             ADC #$01
0C709 8D 07 20                          STA PPU_DATA
0C70C E8                                INX
0C70D E0 03                             CPX #$03
0C70F D0 F3                         BNE -
0C711                           
0C711                           
0C711                               ;; Set attribute data to RAM
0C711                               
0C711                               ;; Byte 0-7 of attribute ram should be #%10100000
0C711 A2 00                         LDX #$00
0C713 A9 A0                         LDA #$A0
0C715                               -
0C715 9D A0 04                          STA tile_attributes,x
0C718 E8                                INX
0C719 E0 08                             CPX #$08
0C71B D0 F8                         BNE -
0C71D                           
0C71D                               ;; Byte 8-55 of attribute ram are filled with game subpal data
0C71D                           
0C71D                           -attributeLoop:
0C71D                               ;; Reset current attribute value
0C71D A9 00                         LDA #$00
0C71F 85 02                         STA temp+2
0C721                           
0C721                               ;; Get first metatile in tile ram based on attribute index
0C721                               ;; metatile = (attr-8)*2 +(16*(attr-8)/8))
0C721 8A                            TXA
0C722                           
0C722 38                            SEC
0C723 E9 08                         SBC #$08
0C725 85 01                         STA temp+1      ; attr - 8 (temp1)
0C727 0A                            ASL             ; * 2
0C728 85 00                         STA temp        ; temp = temp1 * 2
0C72A                           
0C72A A5 01                         LDA temp+1      ; temp1
0C72C 29 F8                         AND #%11111000  ; rounded down to 8's
0C72E 0A                            ASL             ; * 2
0C72F 18                            CLC
0C730 65 00                         ADC temp        ; + temp1 * 2
0C732 85 00                         STA temp        ; first metatile
0C734                           
0C734                               ;; Store first metatile in y-register
0C734 A8                            TAY
0C735                           
0C735                               ;; If X MOD 8 == 7, don't apply bottom right metatile
0C735 8A                            TXA
0C736 29 07                         AND #%00000111
0C738 C9 07                         CMP #%00000111
0C73A F0 0B                         BEQ +
0C73C                           
0C73C                               ;; If X >= $30, don't apply bottom right metatile
0C73C E0 30                         CPX #$30
0C73E B0 07                         BCS +
0C740                               
0C740                               ;; Add metatile1 subpalette to attribute value
0C740 B9 00 04                      LDA tile_type,y
0C743 29 0C                         AND #%00001100
0C745 85 02                         STA temp+2
0C747                               +
0C747                           
0C747                           
0C747                               ;; Apply second metatile
0C747 88                            DEY
0C748                           
0C748                               ;; If X MOD 8 == 0, don't apply bottom left metatile
0C748 8A                            TXA
0C749 29 07                         AND #%00000111
0C74B F0 10                         BEQ +
0C74D                           
0C74D                               ;; If X >= $30, don't apply bottom left metatile
0C74D E0 30                         CPX #$30
0C74F B0 0C                         BCS +
0C751                           
0C751                           
0C751                           
0C751                               ;; Add metatile2 subpalette to attribute value
0C751 B9 00 04                      LDA tile_type,y
0C754 29 0C                         AND #%00001100
0C756 4A                            LSR
0C757 4A                            LSR
0C758 05 02                         ORA temp+2
0C75A 4C 5F C7                      JMP ++
0C75D                               +
0C75D A5 02                         LDA temp+2
0C75F                               ++
0C75F 0A                            ASL
0C760 0A                            ASL
0C761 85 02                         STA temp+2
0C763                           
0C763                           
0C763                               ;; Apply third metatile
0C763 98                            TYA
0C764 38                            SEC
0C765 E9 0F                         SBC #$0F
0C767 A8                            TAY
0C768                           
0C768                               ;; If X MOD 8 == 7, don't apply top right metatile
0C768 8A                            TXA
0C769 29 07                         AND #%00000111
0C76B C9 07                         CMP #%00000111
0C76D F0 11                         BEQ +
0C76F                           
0C76F                               ;; If X < $10, don't apply top right metatile
0C76F 8A                            TXA
0C770 29 F0                         AND #%11110000
0C772 F0 0C                         BEQ +
0C774                           
0C774                               ;; Add metatile3 subpalette to attribute value
0C774 B9 00 04                      LDA tile_type,y
0C777 29 0C                         AND #%00001100
0C779 4A                            LSR
0C77A 4A                            LSR
0C77B 05 02                         ORA temp+2
0C77D 4C 82 C7                      JMP ++
0C780                               +
0C780 A5 02                         LDA temp+2
0C782                               ++
0C782 0A                            ASL
0C783 0A                            ASL
0C784 85 02                         STA temp+2
0C786                           
0C786                           
0C786                               ;; Apply fourth metatile
0C786 88                            DEY
0C787                           
0C787                               ;; If X MOD 8 == 0, don't apply top left metatile
0C787 8A                            TXA
0C788 29 07                         AND #%00000111
0C78A F0 11                         BEQ +
0C78C                           
0C78C                               ;; If X < $10, don't apply top left metatile
0C78C 8A                            TXA
0C78D 29 F0                         AND #%11110000
0C78F F0 0C                         BEQ +
0C791                           
0C791                               ;; Add metatile4 subpalette to attribute value
0C791 B9 00 04                      LDA tile_type,y
0C794 29 0C                         AND #%00001100
0C796 4A                            LSR
0C797 4A                            LSR
0C798 05 02                         ORA temp+2
0C79A 4C 9F C7                      JMP ++
0C79D                               +
0C79D A5 02                         LDA temp+2
0C79F                               ++
0C79F 9D A0 04                      STA tile_attributes,x
0C7A2                           
0C7A2                               ;; Check the next attribute, if any left
0C7A2 E8                            INX
0C7A3 E0 38                         CPX #$38
0C7A5 F0 03                         BEQ +
0C7A7 4C 1D C7                          JMP -attributeLoop
0C7AA                               +
0C7AA                           
0C7AA                               ;; Stream attribute RAM to PPU
0C7AA 2C 02 20                      BIT PPU_STATUS
0C7AD A9 23                         LDA #$23
0C7AF 8D 06 20                      STA PPU_ADDR
0C7B2 A9 C0                         LDA #$C0
0C7B4 8D 06 20                      STA PPU_ADDR
0C7B7 A2 00                         LDX #$00
0C7B9                               -
0C7B9 BD A0 04                          LDA tile_attributes,x
0C7BC 8D 07 20                          STA PPU_DATA
0C7BF E8                                INX
0C7C0 E0 40                             CPX #$40
0C7C2 D0 F5                         BNE -
0C7C4                           
0C7C4                               ;; Set initial ball position
0C7C4 A6 34                         LDX current_level
0C7C6 BD 07 D1                      LDA tbl_lvl_ball_startpos,x
0C7C9 29 F0                         AND #%11110000
0C7CB 18                            CLC
0C7CC 69 34                         ADC #$34
0C7CE 85 19                         STA ball_ypos_hi
0C7D0 BD 07 D1                      LDA tbl_lvl_ball_startpos,x
0C7D3 0A                            ASL
0C7D4 0A                            ASL
0C7D5 0A                            ASL
0C7D6 0A                            ASL
0C7D7 18                            CLC
0C7D8 69 14                         ADC #$14
0C7DA 85 17                         STA ball_xpos_hi
0C7DC A9 00                         LDA #$00
0C7DE 85 18                         STA ball_xpos_lo
0C7E0 85 1A                         STA ball_ypos_lo
0C7E2                               
0C7E2                               ;; Set initial ball color and direction
0C7E2 BD 20 D1                      LDA tbl_lvl_ball_init,x
0C7E5 29 F0                         AND #%11110000
0C7E7 85 2C                         STA ball_flags
0C7E9 20 AC C3                      JSR sub_ColorizeBall
0C7EC                               
0C7EC                               ;; Return
0C7EC 60                            RTS
0C7ED                           
0C7ED                           
0C7ED                           ;; Subroutine: draw 28 tiles in a row
0C7ED                           sub_Draw28HorizontalTiles:
0C7ED A2 1C                         LDX #28
0C7EF                               -
0C7EF 8D 07 20                          STA PPU_DATA
0C7F2 CA                                DEX
0C7F3 D0 FA                         BNE -
0C7F5 60                            RTS0C7F6                           .include "game/subroutine/LoadIntroScreen.asm"
0C7F6                           sub_LoadIntroScreen:
0C7F6                           
0C7F6                               ;; Load intro palette
0C7F6 2C 02 20                      BIT PPU_STATUS
0C7F9 A9 3F                         LDA #$3F
0C7FB 8D 06 20                      STA PPU_ADDR
0C7FE A9 00                         LDA #$00
0C800 8D 06 20                      STA PPU_ADDR
0C803 A2 00                         LDX #$00
0C805                               -
0C805 BD AC C8                          LDA tbl_IntroScreenPalette,x
0C808 8D 07 20                          STA PPU_DATA
0C80B E8                                INX
0C80C E0 20                             CPX #$20
0C80E D0 F5                         BNE -
0C810                               
0C810                               ;; Put ball in the middle
0C810 A9 7C                         LDA #$7C
0C812 85 17                         STA ball_xpos_hi
0C814 85 19                         STA ball_ypos_hi
0C816                           
0C816                               ;; Clear the screen
0C816 20 41 C3                      JSR sub_ClearScreen
0C819                           
0C819                               ;; Set up intro screen draw loop
0C819 A2 00                         LDX #$00
0C81B                           
0C81B                           -loop_IntroScreenData:
0C81B                           
0C81B                               ;; Get current byte from intro screen data
0C81B BD D4 C8                      LDA tbl_IntroScreenData,x
0C81E                           
0C81E                               ;; If current byte is #$3F, we're done drawing.
0C81E C9 3F                         CMP #$3F
0C820 D0 03                         BNE +
0C822 4C 6F C8                          JMP +goToEndIntroScreen
0C825                               +
0C825                           
0C825                               ;; If highest bits are %11, draw a plain tile
0C825 29 C0                         AND #%11000000
0C827 D0 03                         BNE +
0C829 4C 4F C8                          JMP +drawTile
0C82C                               +
0C82C                               
0C82C                               ;; If highest bits are %01, set the PPU address
0C82C                               ;; If not, draw two logo tiles
0C82C C9 40                         CMP #%01000000
0C82E D0 03                         BNE +drawLogo
0C830 4C 59 C8                          JMP +setPpuAddr
0C833                           
0C833                           +drawLogo:
0C833                               ;; Get bits 0-2 and store in a temp variable
0C833 BD D4 C8                      LDA tbl_IntroScreenData,x
0C836 29 07                         AND #%00000111
0C838 85 00                         STA temp
0C83A                               
0C83A                               ;; Get bits 3-5, shift over to get a value from 0-7
0C83A BD D4 C8                      LDA tbl_IntroScreenData,x
0C83D 4A                            LSR
0C83E 4A                            LSR
0C83F 4A                            LSR
0C840 29 07                         AND #%00000111
0C842                               
0C842                               ;; Draw the tile that corresponds with that value
0C842 A8                            TAY
0C843 20 24 C4                      JSR sub_drawIntroScreenLogoTile
0C846                               
0C846                               ;; Do the same for the value stored in temp
0C846 A4 00                         LDY temp
0C848 20 24 C4                      JSR sub_drawIntroScreenLogoTile
0C84B                           
0C84B                               ;; Next byte please
0C84B E8                            INX
0C84C 4C 1B C8                      JMP -loop_IntroScreenData
0C84F                           
0C84F                           +drawTile:
0C84F                               ;; Just draw the tile value on screen
0C84F BD D4 C8                      LDA tbl_IntroScreenData,x
0C852 8D 07 20                      STA PPU_DATA
0C855                               
0C855                               ;; Next byte please
0C855 E8                            INX
0C856 4C 1B C8                      JMP -loop_IntroScreenData
0C859                           
0C859                           
0C859                           +setPpuAddr:
0C859                               ;; Reset the PPU latch
0C859 2C 02 20                      BIT PPU_STATUS
0C85C                               
0C85C                               ;; Sanitize and write the high byte of the PPU address
0C85C BD D4 C8                      LDA tbl_IntroScreenData,x
0C85F 29 3F                         AND #%00111111
0C861 8D 06 20                      STA PPU_ADDR
0C864                           
0C864                               ;; Write the low byte of the PPU address
0C864 E8                            INX
0C865 BD D4 C8                      LDA tbl_IntroScreenData,x
0C868 8D 06 20                      STA PPU_ADDR
0C86B                               
0C86B                               ;; PPU has been set up to draw tiles at the correct spot now.
0C86B                               
0C86B                               ;; Next byte please.
0C86B E8                            INX
0C86C 4C 1B C8                      JMP -loop_IntroScreenData
0C86F                           
0C86F                           +goToEndIntroScreen:
0C86F                           
0C86F                               ;; To color the 1.LEVEL: line green, we need to update two
0C86F                               ;; values in the PPU attribute data.
0C86F 2C 02 20                      BIT PPU_STATUS
0C872 A9 23                         LDA #$23
0C874 8D 06 20                      STA PPU_ADDR
0C877 A9 CB                         LDA #$CB
0C879 8D 06 20                      STA PPU_ADDR
0C87C A9 0A                         LDA #%00001010
0C87E 8D 07 20                      STA PPU_DATA
0C881 8D 07 20                      STA PPU_DATA
0C884                           
0C884 60                            RTS
0C885                           
0C885                           .include "game/subroutine/LoadWinScreen.asm"
0C885                           sub_LoadWinScreen:
0C885 60                            RTS
0C886                           
0C886                           .include "game/subroutine/WriteByteToPPU.asm"
0C886                           sub_WriteByteToPPUBuffer:
0C886                           
0C886                               ;; Prevent updating until full 3-byte buffer is filled,
0C886                               ;; so that graphics won't glitch out if NMI happens during
0C886                               ;; updating the buffer
0C886 A9 00                         LDA #$00
0C888 85 2F                         STA ppu_buffer_update
0C88A                           
0C88A                               ;; Check if buffer full; if so, wait a frame and force update
0C88A A4 30                         LDY ppu_buffer_pointer
0C88C C0 30                         CPY #$30
0C88E D0 05                         BNE +
0C890 E6 2F                             INC ppu_buffer_update
0C892 20 3B C3                          JSR sub_WaitForVBlank
0C895                               +
0C895                           
0C895                               ;; Add ppu_addr high byte to buffer
0C895 A5 00                         LDA temp
0C897 99 00 03                      STA ppu_buffer,y
0C89A                           
0C89A                               ;; Add ppu_addr low byte to buffer
0C89A C8                            INY
0C89B A5 01                         LDA temp+1
0C89D 99 00 03                      STA ppu_buffer,y
0C8A0                           
0C8A0                               ;; Add ppu_data to buffer
0C8A0 C8                            INY
0C8A1 A5 02                         LDA temp+2
0C8A3 99 00 03                      STA ppu_buffer,y
0C8A6                           
0C8A6                               ;; Update buffer pointer
0C8A6 C8                            INY
0C8A7 84 30                         STY ppu_buffer_pointer
0C8A9                           
0C8A9                               ;; Tell NMI to update next round
0C8A9 E6 2F                         INC ppu_buffer_update
0C8AB                           
0C8AB                               ;; Return
0C8AB 60                            RTS0C8AC                           
0C8AC                           
0C8AC                           ;; LUTs
0C8AC                           .include "game/include/tables.asm"
0C8AC                           
0C8AC                           ;; Intro screen palette
0C8AC                           tbl_IntroScreenPalette:
0C8AC 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C8B0 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C8B4 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C8B8 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C8BC                           
0C8BC 0F 2C 12 30                   .db #$0F, #$2C, #$12, #$30
0C8C0 0F 16 38 30                   .db #$0F, #$16, #$38, #$30
0C8C4 0F 29 14 30                   .db #$0F, #$29, #$14, #$30
0C8C8 0F 00 10 30                   .db #$0F, #$00, #$10, #$30
0C8CC                           
0C8CC                           
0C8CC                           ;; Intro: mapping logo index to chr tile
0C8CC                           tbl_IntroScreenLogoChr:
0C8CC 00 31 33 60 30 32 34 36       .db #$00, #$31, #$33, #$60, #$30, #$32, #$34, #$36
0C8D4                           
0C8D4                           
0C8D4                           ;; Intro screen data
0C8D4                           tbl_IntroScreenData:
0C8D4                           
0C8D4                               ;; Set PPU address $20AC and draw
0C8D4 60 AC                         .db #$60, #$AC
0C8D6 02 26 16 0F 20 0F 16 27       .db #_1, #_DOT, #_L, #_E, #_V, #_E, #_L, #_COLON
0C8DE                           
0C8DE                               ;; Set PPU address $20CF and draw
0C8DE 60 CF                         .db #$60, #$CF
0C8E0 01 02                         .db #_0, #_1
0C8E2                               
0C8E2                               ;; Set PPU address $2122 and draw
0C8E2 61 22                         .db #$61, #$22
0C8E4 0E 0F 1D 13 11 18 25          .db #_D, #_E, #_S, #_I, #_G, #_N, #_COMMA
0C8EB 1D 19 1F 18 0E 25             .db #_S, #_O, #_U, #_N, #_D, #_COMMA
0C8F1 11 1C 0B 1A 12 13 0D 1D       .db #_G, #_R, #_A, #_P, #_H, #_I, #_C, #_S
0C8F9 00 0B 18 0E 00                .db #_SPACE, #_A, #_N, #_D, #_SPACE
0C8FE                               
0C8FE                               ;; Set PPU address $2147 and draw
0C8FE 61 47                         .db #$61, #$47
0C900 1A 1C 19 11 1C 0B 17          .db #_P, #_R, #_O, #_G, #_R, #_A, #_M
0C907 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C90B 19 16 13 20 0F 1C             .db #_O, #_L, #_I, #_V, #_E, #_R
0C911 00 15 13 1C 21 0B             .db #_SPACE, #_K, #_I, #_R, #_W, #_A
0C917                               
0C917                               ;; Set PPU address $218B and draw
0C917 61 8B                         .db #$61, #$8B
0C919 28 00 02 0A 09 08             .db #_COPY, #_SPACE, #_1, #_9, #_8, #_7
0C91F 25 02 0A 09 09                .db #_COMMA, #_1, #_9, #_8, #_8
0C924                               
0C924                               ;; Set PPU address $21E6 and draw
0C924 61 E6                         .db #$61, #$E6
0C926 18 0F 1D 00 1A 19 1C 1E       .db #_N, #_E, #_S, #_SPACE, #_P, #_O, #_R, #_T
0C92E 00 0C 23 00                   .db #_SPACE, #_B, #_Y, #_SPACE
0C932 15 0F 20 13 18 09 02          .db #_K, #_E, #_V, #_I, #_N, #_8, #_1
0C939                               
0C939                               ;; Set PPU address $222D and draw
0C939 62 2D                         .db #$62, #$2D
0C93B 28 00 03 01 03 04             .db #_COPY, #_SPACE, #_2, #_0, #_2, #_3
0C941                               
0C941                               ;; Set PPU address $2281
0C941 62 81                         .db #$62, #$81
0C943                               
0C943                               ;; Draw the Crillion logo
0C943 E1 C8 E1 E8                   .db #%11100001, #%11001000, #%11100001, #%11101000
0C947 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C94B C0 C2 C4 C9                   .db #%11000000, #%11000010, #%11000100, #%11001001
0C94F E8 E1 CD C0                   .db #%11101000, #%11100001, #%11001101, #%11000000
0C953                               
0C953 D0 C0 D3 D0                   .db #%11010000, #%11000000, #%11010011, #%11010000
0C957 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C95B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C95F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C963                               
0C963 D0 C0 D1 CD                   .db #%11010000, #%11000000, #%11010001, #%11001101
0C967 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C96B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C96F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C973                           
0C973 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C977 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C97B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C97F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C983                               
0C983 D0 C0 D0 C2                   .db #%11010000, #%11000000, #%11010000, #%11000010
0C987 C2 C2 C0 C2                   .db #%11000010, #%11000010, #%11000000, #%11000010
0C98B C0 C2 C2 DB                   .db #%11000000, #%11000010, #%11000010, #%11011011
0C98F D0 D0 C2 C0                   .db #%11010000, #%11010000, #%11000010, #%11000000
0C993                           
0C993 F9 C8 D0 C2                   .db #%11111001, #%11001000, #%11010000, #%11000010
0C997 C2 C7 C9 C7                   .db #%11000010, #%11000111, #%11001001, #%11000111
0C99B C9 C2 C7 C9                   .db #%11001001, #%11000010, #%11000111, #%11001001
0C99F F0 D0 C2                      .db #%11110000, #%11010000, #%11000010
0C9A2                           
0C9A2                               ;; End of intro
0C9A2 3F                            .db #$3F
0C9A3                           
0C9A3                           
0C9A3                           ;; test animation table
0C9A3                           .include "game/test/show_animation_table.asm"
0C9A3                           ;; CHR tile-id's per slide of explosion
0C9A3                           explosion_slide0:
0C9A3 00 00 00                      .db #$00, #$00, #$00
0C9A6 2C 2D 2E                      .db #$2C, #$2D, #$2E
0C9A9 3C 3D 3E                      .db #$3C, #$3D, #$3E
0C9AC                           
0C9AC                           explosion_slide1:
0C9AC 00 00 00                      .db #$00, #$00, #$00
0C9AF 29 2A 2B                      .db #$29, #$2A, #$2B
0C9B2 39 3A 3B                      .db #$39, #$3A, #$3B
0C9B5                           
0C9B5                           explosion_slide2:
0C9B5 16 00 00                      .db #$16, #$00, #$00
0C9B8 26 27 28                      .db #$26, #$27, #$28
0C9BB 36 37 38                      .db #$36, #$37, #$38
0C9BE                           
0C9BE                           explosion_slide3:
0C9BE 00 14 15                      .db #$00, #$14, #$15
0C9C1 23 24 25                      .db #$23, #$24, #$25
0C9C4 33 34 35                      .db #$33, #$34, #$35
0C9C7                           
0C9C7                           explosion_slide4:
0C9C7 10 11 12                      .db #$10, #$11, #$12
0C9CA 20 21 22                      .db #$20, #$21, #$22
0C9CD 30 31 32                      .db #$30, #$31, #$32
0C9D0                           
0C9D0                           ;; High and low bytes of animation slides
0C9D0                           explosion_anim_hi:
0C9D0 C9                            .db >#explosion_slide0
0C9D1 C9                            .db >#explosion_slide1
0C9D2 C9                            .db >#explosion_slide2
0C9D3 C9                            .db >#explosion_slide3
0C9D4 C9                            .db >#explosion_slide4
0C9D5 C9                            .db >#explosion_slide4
0C9D6 C9                            .db >#explosion_slide3
0C9D7 C9                            .db >#explosion_slide2
0C9D8 C9                            .db >#explosion_slide1
0C9D9 C9                            .db >#explosion_slide0
0C9DA                           
0C9DA                           explosion_anim_lo:
0C9DA A3                            .db <#explosion_slide0
0C9DB AC                            .db <#explosion_slide1
0C9DC B5                            .db <#explosion_slide2
0C9DD BE                            .db <#explosion_slide3
0C9DE C7                            .db <#explosion_slide4
0C9DF C7                            .db <#explosion_slide4
0C9E0 BE                            .db <#explosion_slide3
0C9E1 B5                            .db <#explosion_slide2
0C9E2 AC                            .db <#explosion_slide1
0C9E3 A3                            .db <#explosion_slide0
0C9E4                           
0C9E4                           
0C9E4                           
0C9E4                           ;; Ball palette color table (CBRYGM)
0C9E4                           tbl_BallColorDark:
0C9E4 2C 12 16 38 29 14             .db #$2C, #$12, #$16, #$38, #$29, #$14
0C9EA                            
0C9EA                           tbl_BallColorLight:
0C9EA 3C 22 25 20 39 24             .db #$3C, #$22, #$25, #$20, #$39, #$24
0C9F0                           
0C9F0                               
0C9F0                           ;; Screen mode drawing routine addresses
0C9F0                           tbl_LoadScreenHi:
0C9F0 C7 C4 C8                      .db >#sub_LoadIntroScreen, >#sub_LoadGameScreen, >#sub_LoadWinScreen
0C9F3                           
0C9F3                           tbl_LoadScreenLo:
0C9F3 F6 6A 85                      .db <#sub_LoadIntroScreen, <#sub_LoadGameScreen, <#sub_LoadWinScreen
0C9F6                           
0C9F6                           
0C9F6                           ;; Test level data
0C9F6                           .include "game/test/level_data.asm"
0C9F6                           lvl_layout_01:
0C9F6 61 21                         .db #$61, #%00100001
0C9F8 52 61                         .db #$52, #%01100001
0C9FA 43 65                         .db #$43, #%01100101
0C9FC 83 05                         .db #$83, #%00000101
0C9FE 93 15                         .db #$93, #%00010101
0CA00 34 7A                         .db #$34, #%01111010
0CA02 74 7A                         .db #$74, #%01111010
0CA04 35 7A                         .db #$35, #%01111010
0CA06 75 7A                         .db #$75, #%01111010
0CA08 46 65                         .db #$46, #%01100101
0CA0A 86 25                         .db #$86, #%00100101
0CA0C 57 61                         .db #$57, #%01100001
0CA0E 68 21                         .db #$68, #%00100001
0CA10 FF                            .db #LEVEL_END
0CA11                           
0CA11                           lvl_layout_02:
0CA11 C0 0A                         .db #$C0, #%00001010
0CA13 11 15                         .db #$11, #%00010101
0CA15 21 62                         .db #$21, #%01100010
0CA17 61 62                         .db #$61, #%01100010
0CA19 A1 42                         .db #$A1, #%01000010
0CA1B 12 67                         .db #$12, #%01100111
0CA1D 52 67                         .db #$52, #%01100111
0CA1F 92 67                         .db #$92, #%01100111
0CA21 C3 0D                         .db #$C3, #%00001101
0CA23 14 11                         .db #$14, #%00010001
0CA25 24 65                         .db #$24, #%01100101
0CA27 64 65                         .db #$64, #%01100101
0CA29 A4 45                         .db #$A4, #%01000101
0CA2B 15 67                         .db #$15, #%01100111
0CA2D 55 67                         .db #$55, #%01100111
0CA2F 95 67                         .db #$95, #%01100111
0CA31 17 12                         .db #$17, #%00010010
0CA33 27 61                         .db #$27, #%01100001
0CA35 67 61                         .db #$67, #%01100001
0CA37 A7 41                         .db #$A7, #%01000001
0CA39 38 7A                         .db #$38, #%01111010
0CA3B 98 5A                         .db #$98, #%01011010
0CA3D 18 27                         .db #$18, #%00100111
0CA3F 48 27                         .db #$48, #%00100111
0CA41 78 27                         .db #$78, #%00100111
0CA43 C8 07                         .db #$C8, #%00000111
0CA45 FF                            .db #LEVEL_END
0CA46                           
0CA46                           lvl_layout_03:
0CA46 00 7A                         .db #$00, #%01111010
0CA48 40 7A                         .db #$40, #%01111010
0CA4A 80 7A                         .db #$80, #%01111010
0CA4C C0 1A                         .db #$C0, #%00011010
0CA4E 10 A1                         .db #$10, #%10100001
0CA50 13 E1                         .db #$13, #%11100001
0CA52 17 C1                         .db #$17, #%11000001
0CA54 30 C1                         .db #$30, #%11000001
0CA56 34 C1                         .db #$34, #%11000001
0CA58 38 A1                         .db #$38, #%10100001
0CA5A 50 E1                         .db #$50, #%11100001
0CA5C 55 81                         .db #$55, #%10000001
0CA5E 57 C1                         .db #$57, #%11000001
0CA60 70 C1                         .db #$70, #%11000001
0CA62 73 A1                         .db #$73, #%10100001
0CA64 76 E1                         .db #$76, #%11100001
0CA66 90 E1                         .db #$90, #%11100001
0CA68 95 81                         .db #$95, #%10000001
0CA6A 97 C1                         .db #$97, #%11000001
0CA6C B0 C1                         .db #$B0, #%11000001
0CA6E B4 C1                         .db #$B4, #%11000001
0CA70 B8 A1                         .db #$B8, #%10100001
0CA72 D0 A1                         .db #$D0, #%10100001
0CA74 D3 E1                         .db #$D3, #%11100001
0CA76 D7 C1                         .db #$D7, #%11000001
0CA78 FF                            .db #LEVEL_END
0CA79                           
0CA79                           lvl_layout_04:
0CA79 00 4C                         .db #$00, #%01001100
0CA7B 40 6C                         .db #$40, #%01101100
0CA7D 80 4C                         .db #$80, #%01001100
0CA7F 81 AC                         .db #$81, #%10101100
0CA81 C1 2C                         .db #$C1, #%00101100
0CA83 02 6C                         .db #$02, #%01101100
0CA85 42 CC                         .db #$42, #%11001100
0CA87 62 EC                         .db #$62, #%11101100
0CA89 A2 CC                         .db #$A2, #%11001100
0CA8B C3 CC                         .db #$C3, #%11001100
0CA8D 04 4C                         .db #$04, #%01001100
0CA8F 84 2C                         .db #$84, #%00101100
0CA91 25 AC                         .db #$25, #%10101100
0CA93 85 AC                         .db #$85, #%10101100
0CA95 06 AC                         .db #$06, #%10101100
0CA97 36 CC                         .db #$36, #%11001100
0CA99 56 CC                         .db #$56, #%11001100
0CA9B 66 EC                         .db #$66, #%11101100
0CA9D 96 6C                         .db #$96, #%01101100
0CA9F C7 AC                         .db #$C7, #%10101100
0CAA1 08 2C                         .db #$08, #%00101100
0CAA3 78 6C                         .db #$78, #%01101100
0CAA5 D8 0C                         .db #$D8, #%00001100
0CAA7 30 A1                         .db #$30, #%10100001
0CAA9 B0 21                         .db #$B0, #%00100001
0CAAB 01 41                         .db #$01, #%01000001
0CAAD 41 61                         .db #$41, #%01100001
0CAAF 91 A1                         .db #$91, #%10100001
0CAB1 A1 21                         .db #$A1, #%00100001
0CAB3 52 C1                         .db #$52, #%11000001
0CAB5 72 E1                         .db #$72, #%11100001
0CAB7 B2 C1                         .db #$B2, #%11000001
0CAB9 C2 21                         .db #$C2, #%00100001
0CABB 03 41                         .db #$03, #%01000001
0CABD 33 C1                         .db #$33, #%11000001
0CABF 83 21                         .db #$83, #%00100001
0CAC1 D3 E1                         .db #$D3, #%11100001
0CAC3 05 21                         .db #$05, #%00100001
0CAC5 45 E1                         .db #$45, #%11100001
0CAC7 A5 21                         .db #$A5, #%00100001
0CAC9 16 A1                         .db #$16, #%10100001
0CACB 76 A1                         .db #$76, #%10100001
0CACD 27 A1                         .db #$27, #%10100001
0CACF 57 01                         .db #$57, #%00000001
0CAD1 87 41                         .db #$87, #%01000001
0CAD3 B7 A1                         .db #$B7, #%10100001
0CAD5 19 21                         .db #$19, #%00100001
0CAD7 39 41                         .db #$39, #%01000001
0CAD9 89 41                         .db #$89, #%01000001
0CADB C9 21                         .db #$C9, #%00100001
0CADD D0 1A                         .db #$D0, #%00011010
0CADF 55 1A                         .db #$55, #%00011010
0CAE1 95 1A                         .db #$95, #%00011010
0CAE3 D7 1A                         .db #$D7, #%00011010
0CAE5 09 1A                         .db #$09, #%00011010
0CAE7 79 1A                         .db #$79, #%00011010
0CAE9 FF                            .db #LEVEL_END
0CAEA                           
0CAEA                           lvl_layout_05:
0CAEA 40 0A                         .db #$40, #%00001010
0CAEC 70 1A                         .db #$70, #%00011010
0CAEE B0 42                         .db #$B0, #%01000010
0CAF0 41 A7                         .db #$41, #%10100111
0CAF2 B1 22                         .db #$B1, #%00100010
0CAF4 D1 15                         .db #$D1, #%00010101
0CAF6 22 0A                         .db #$22, #%00001010
0CAF8 52 05                         .db #$52, #%00000101
0CAFA B2 42                         .db #$B2, #%01000010
0CAFC 03 27                         .db #$03, #%00100111
0CAFE 33 67                         .db #$33, #%01100111
0CB00 73 67                         .db #$73, #%01100111
0CB02 B3 47                         .db #$B3, #%01000111
0CB04 05 E5                         .db #$05, #%11100101
0CB06 25 A5                         .db #$25, #%10100101
0CB08 35 25                         .db #$35, #%00100101
0CB0A 65 45                         .db #$65, #%01000101
0CB0C A5 45                         .db #$A5, #%01000101
0CB0E 46 E5                         .db #$46, #%11100101
0CB10 66 E5                         .db #$66, #%11100101
0CB12 86 E5                         .db #$86, #%11100101
0CB14 A6 E2                         .db #$A6, #%11100010
0CB16 C6 E5                         .db #$C6, #%11100101
0CB18 27 25                         .db #$27, #%00100101
0CB1A 77 05                         .db #$77, #%00000101
0CB1C B7 02                         .db #$B7, #%00000010
0CB1E 09 05                         .db #$09, #%00000101
0CB20 79 05                         .db #$79, #%00000101
0CB22 B9 02                         .db #$B9, #%00000010
0CB24 FF                            .db #LEVEL_END
0CB25                           
0CB25                           lvl_layout_06:
0CB25 00 03                         .db #$00, #%00000011
0CB27 20 03                         .db #$20, #%00000011
0CB29 40 03                         .db #$40, #%00000011
0CB2B A0 03                         .db #$A0, #%00000011
0CB2D C0 03                         .db #$C0, #%00000011
0CB2F 11 03                         .db #$11, #%00000011
0CB31 31 03                         .db #$31, #%00000011
0CB33 51 03                         .db #$51, #%00000011
0CB35 91 03                         .db #$91, #%00000011
0CB37 B1 03                         .db #$B1, #%00000011
0CB39 D1 03                         .db #$D1, #%00000011
0CB3B 02 03                         .db #$02, #%00000011
0CB3D 22 03                         .db #$22, #%00000011
0CB3F 42 03                         .db #$42, #%00000011
0CB41 A2 03                         .db #$A2, #%00000011
0CB43 C2 03                         .db #$C2, #%00000011
0CB45 13 03                         .db #$13, #%00000011
0CB47 33 03                         .db #$33, #%00000011
0CB49 53 03                         .db #$53, #%00000011
0CB4B 93 03                         .db #$93, #%00000011
0CB4D B3 03                         .db #$B3, #%00000011
0CB4F D3 03                         .db #$D3, #%00000011
0CB51 04 03                         .db #$04, #%00000011
0CB53 24 03                         .db #$24, #%00000011
0CB55 44 03                         .db #$44, #%00000011
0CB57 A4 03                         .db #$A4, #%00000011
0CB59 C4 03                         .db #$C4, #%00000011
0CB5B 15 03                         .db #$15, #%00000011
0CB5D 35 03                         .db #$35, #%00000011
0CB5F 55 03                         .db #$55, #%00000011
0CB61 95 03                         .db #$95, #%00000011
0CB63 B5 03                         .db #$B5, #%00000011
0CB65 D5 03                         .db #$D5, #%00000011
0CB67 06 03                         .db #$06, #%00000011
0CB69 26 03                         .db #$26, #%00000011
0CB6B 46 03                         .db #$46, #%00000011
0CB6D A6 03                         .db #$A6, #%00000011
0CB6F C6 03                         .db #$C6, #%00000011
0CB71 17 03                         .db #$17, #%00000011
0CB73 37 03                         .db #$37, #%00000011
0CB75 57 03                         .db #$57, #%00000011
0CB77 97 03                         .db #$97, #%00000011
0CB79 B7 03                         .db #$B7, #%00000011
0CB7B D7 03                         .db #$D7, #%00000011
0CB7D 08 03                         .db #$08, #%00000011
0CB7F 28 03                         .db #$28, #%00000011
0CB81 48 03                         .db #$48, #%00000011
0CB83 A8 03                         .db #$A8, #%00000011
0CB85 C8 03                         .db #$C8, #%00000011
0CB87 19 03                         .db #$19, #%00000011
0CB89 39 03                         .db #$39, #%00000011
0CB8B 59 03                         .db #$59, #%00000011
0CB8D 99 03                         .db #$99, #%00000011
0CB8F B9 03                         .db #$B9, #%00000011
0CB91 D9 03                         .db #$D9, #%00000011
0CB93 60 4B                         .db #$60, #%01001011
0CB95 71 CB                         .db #$71, #%11001011
0CB97 62 4B                         .db #$62, #%01001011
0CB99 64 4B                         .db #$64, #%01001011
0CB9B 75 CB                         .db #$75, #%11001011
0CB9D 66 4B                         .db #$66, #%01001011
0CB9F 68 4B                         .db #$68, #%01001011
0CBA1 79 0B                         .db #$79, #%00001011
0CBA3 70 03                         .db #$70, #%00000011
0CBA5 72 03                         .db #$72, #%00000011
0CBA7 74 03                         .db #$74, #%00000011
0CBA9 76 03                         .db #$76, #%00000011
0CBAB 78 03                         .db #$78, #%00000011
0CBAD FF                            .db #LEVEL_END
0CBAE                           
0CBAE                           lvl_layout_07:
0CBAE 00 11                         .db #$00, #%00010001
0CBB0 01 FA                         .db #$01, #%11111010
0CBB2 12 BA                         .db #$12, #%10111010
0CBB4 23 DA                         .db #$23, #%11011010
0CBB6 34 FA                         .db #$34, #%11111010
0CBB8 05 DA                         .db #$05, #%11011010
0CBBA 15 FA                         .db #$15, #%11111010
0CBBC 45 BA                         .db #$45, #%10111010
0CBBE 56 DA                         .db #$56, #%11011010
0CBC0 27 BA                         .db #$27, #%10111010
0CBC2 67 DA                         .db #$67, #%11011010
0CBC4 38 3A                         .db #$38, #%00111010
0CBC6 78 BA                         .db #$78, #%10111010
0CBC8 09 3A                         .db #$09, #%00111010
0CBCA 39 3A                         .db #$39, #%00111010
0CBCC 89 1A                         .db #$89, #%00011010
0CBCE B0 01                         .db #$B0, #%00000001
0CBD0 D0 01                         .db #$D0, #%00000001
0CBD2 A1 01                         .db #$A1, #%00000001
0CBD4 C1 11                         .db #$C1, #%00010001
0CBD6 B2 01                         .db #$B2, #%00000001
0CBD8 D2 01                         .db #$D2, #%00000001
0CBDA A3 01                         .db #$A3, #%00000001
0CBDC C3 01                         .db #$C3, #%00000001
0CBDE B4 01                         .db #$B4, #%00000001
0CBE0 D4 01                         .db #$D4, #%00000001
0CBE2 A5 01                         .db #$A5, #%00000001
0CBE4 C5 01                         .db #$C5, #%00000001
0CBE6 B6 01                         .db #$B6, #%00000001
0CBE8 D6 01                         .db #$D6, #%00000001
0CBEA A7 01                         .db #$A7, #%00000001
0CBEC C7 01                         .db #$C7, #%00000001
0CBEE FF                            .db #LEVEL_END
0CBEF                           
0CBEF                           lvl_layout_08:
0CBEF 40 B5                         .db #$40, #%10110101
0CBF1 31 0D                         .db #$31, #%00001101
0CBF3 61 10                         .db #$61, #%00010000
0CBF5 42 C7                         .db #$42, #%11000111
0CBF7 52 67                         .db #$52, #%01100111
0CBF9 63 C7                         .db #$63, #%11000111
0CBFB 83 E7                         .db #$83, #%11100111
0CBFD 05 07                         .db #$05, #%00000111
0CBFF 15 3A                         .db #$15, #%00111010
0CC01 07 63                         .db #$07, #%01100011
0CC03 27 13                         .db #$27, #%00010011
0CC05 38 A5                         .db #$38, #%10100101
0CC07 09 14                         .db #$09, #%00010100
0CC09 19 05                         .db #$19, #%00000101
0CC0B D0 E0                         .db #$D0, #%11100000
0CC0D C2 A0                         .db #$C2, #%10100000
0CC0F B3 E0                         .db #$B3, #%11100000
0CC11 D5 E0                         .db #$D5, #%11100000
0CC13 C6 E0                         .db #$C6, #%11100000
0CC15 B0 C4                         .db #$B0, #%11000100
0CC17 C0 A4                         .db #$C0, #%10100100
0CC19 D1 A4                         .db #$D1, #%10100100
0CC1B C4 24                         .db #$C4, #%00100100
0CC1D C5 04                         .db #$C5, #%00000100
0CC1F B7 44                         .db #$B7, #%01000100
0CC21 B8 A4                         .db #$B8, #%10100100
0CC23 D9 05                         .db #$D9, #%00000101
0CC25 FF                            .db #LEVEL_END
0CC26                           
0CC26                           lvl_layout_09:
0CC26 81 04                         .db #$81, #%00000100
0CC28 D1 04                         .db #$D1, #%00000100
0CC2A 32 C4                         .db #$32, #%11000100
0CC2C A2 C4                         .db #$A2, #%11000100
0CC2E C2 24                         .db #$C2, #%00100100
0CC30 13 24                         .db #$13, #%00100100
0CC32 53 04                         .db #$53, #%00000100
0CC34 C3 27                         .db #$C3, #%00100111
0CC36 15 6C                         .db #$15, #%01101100
0CC38 55 6C                         .db #$55, #%01101100
0CC3A 95 6C                         .db #$95, #%01101100
0CC3C D5 0C                         .db #$D5, #%00001100
0CC3E 27 C7                         .db #$27, #%11000111
0CC40 47 C7                         .db #$47, #%11000111
0CC42 67 C7                         .db #$67, #%11000111
0CC44 87 C7                         .db #$87, #%11000111
0CC46 A7 C7                         .db #$A7, #%11000111
0CC48 C7 C7                         .db #$C7, #%11000111
0CC4A 08 13                         .db #$08, #%00010011
0CC4C 28 15                         .db #$28, #%00010101
0CC4E 48 12                         .db #$48, #%00010010
0CC50 68 15                         .db #$68, #%00010101
0CC52 88 11                         .db #$88, #%00010001
0CC54 A8 10                         .db #$A8, #%00010000
0CC56 C8 14                         .db #$C8, #%00010100
0CC58 09 07                         .db #$09, #%00000111
0CC5A 19 03                         .db #$19, #%00000011
0CC5C 39 05                         .db #$39, #%00000101
0CC5E 59 02                         .db #$59, #%00000010
0CC60 79 05                         .db #$79, #%00000101
0CC62 99 01                         .db #$99, #%00000001
0CC64 B9 00                         .db #$B9, #%00000000
0CC66 D9 04                         .db #$D9, #%00000100
0CC68 FF                            .db #LEVEL_END
0CC69                           
0CC69                           lvl_layout_10:
0CC69 00 02                         .db #$00, #%00000010
0CC6B 10 C9                         .db #$10, #%11001001
0CC6D 50 C9                         .db #$50, #%11001001
0CC6F 90 C9                         .db #$90, #%11001001
0CC71 D0 C9                         .db #$D0, #%11001001
0CC73 31 C9                         .db #$31, #%11001001
0CC75 71 C9                         .db #$71, #%11001001
0CC77 B1 C9                         .db #$B1, #%11001001
0CC79 13 C9                         .db #$13, #%11001001
0CC7B 53 C9                         .db #$53, #%11001001
0CC7D 93 C9                         .db #$93, #%11001001
0CC7F D3 C9                         .db #$D3, #%11001001
0CC81 34 C9                         .db #$34, #%11001001
0CC83 74 C9                         .db #$74, #%11001001
0CC85 B4 C9                         .db #$B4, #%11001001
0CC87 16 C9                         .db #$16, #%11001001
0CC89 56 C9                         .db #$56, #%11001001
0CC8B 96 C9                         .db #$96, #%11001001
0CC8D D6 C9                         .db #$D6, #%11001001
0CC8F 37 C9                         .db #$37, #%11001001
0CC91 77 C9                         .db #$77, #%11001001
0CC93 B7 C9                         .db #$B7, #%11001001
0CC95 D8 12                         .db #$D8, #%00010010
0CC97 FF                            .db #LEVEL_END
0CC98                           
0CC98                           lvl_layout_11:
0CC98 00 65                         .db #$00, #%01100101
0CC9A 40 45                         .db #$40, #%01000101
0CC9C 50 A7                         .db #$50, #%10100111
0CC9E 80 05                         .db #$80, #%00000101
0CCA0 90 A7                         .db #$90, #%10100111
0CCA2 A0 65                         .db #$A0, #%01100101
0CCA4 01 43                         .db #$01, #%01000011
0CCA6 31 23                         .db #$31, #%00100011
0CCA8 61 A7                         .db #$61, #%10100111
0CCAA 81 A7                         .db #$81, #%10100111
0CCAC A1 63                         .db #$A1, #%01100011
0CCAE 02 44                         .db #$02, #%01000100
0CCB0 32 44                         .db #$32, #%01000100
0CCB2 92 04                         .db #$92, #%00000100
0CCB4 A2 64                         .db #$A2, #%01100100
0CCB6 03 40                         .db #$03, #%01000000
0CCB8 33 40                         .db #$33, #%01000000
0CCBA 63 A1                         .db #$63, #%10100001
0CCBC 83 A2                         .db #$83, #%10100010
0CCBE 93 00                         .db #$93, #%00000000
0CCC0 A3 60                         .db #$A3, #%01100000
0CCC2 04 41                         .db #$04, #%01000001
0CCC4 34 41                         .db #$34, #%01000001
0CCC6 94 02                         .db #$94, #%00000010
0CCC8 A4 62                         .db #$A4, #%01100010
0CCCA 05 47                         .db #$05, #%01000111
0CCCC 35 67                         .db #$35, #%01100111
0CCCE 75 0A                         .db #$75, #%00001010
0CCD0 85 47                         .db #$85, #%01000111
0CCD2 B5 47                         .db #$B5, #%01000111
0CCD4 06 E7                         .db #$06, #%11100111
0CCD6 16 5A                         .db #$16, #%01011010
0CCD8 26 11                         .db #$26, #%00010001
0CCDA 46 13                         .db #$46, #%00010011
0CCDC 56 1A                         .db #$56, #%00011010
0CCDE 66 14                         .db #$66, #%00010100
0CCE0 86 10                         .db #$86, #%00010000
0CCE2 96 5C                         .db #$96, #%01011100
0CCE4 A6 12                         .db #$A6, #%00010010
0CCE6 C6 15                         .db #$C6, #%00010101
0CCE8 D6 E7                         .db #$D6, #%11100111
0CCEA FF                            .db #LEVEL_END
0CCEB                           
0CCEB                           lvl_layout_12:
0CCEB 00 00                         .db #$00, #%00000000
0CCED 50 C0                         .db #$50, #%11000000
0CCEF 80 00                         .db #$80, #%00000000
0CCF1 61 00                         .db #$61, #%00000000
0CCF3 22 C0                         .db #$22, #%11000000
0CCF5 82 E0                         .db #$82, #%11100000
0CCF7 C2 E0                         .db #$C2, #%11100000
0CCF9 A3 20                         .db #$A3, #%00100000
0CCFB C3 10                         .db #$C3, #%00010000
0CCFD 04 00                         .db #$04, #%00000000
0CCFF 54 20                         .db #$54, #%00100000
0CD01 15 0A                         .db #$15, #%00001010
0CD03 25 C0                         .db #$25, #%11000000
0CD05 55 E0                         .db #$55, #%11100000
0CD07 86 20                         .db #$86, #%00100000
0CD09 C6 E0                         .db #$C6, #%11100000
0CD0B C7 A0                         .db #$C7, #%10100000
0CD0D 88 00                         .db #$88, #%00000000
0CD0F 59 00                         .db #$59, #%00000000
0CD11 89 20                         .db #$89, #%00100000
0CD13 D9 1A                         .db #$D9, #%00011010
0CD15 FF                            .db #LEVEL_END
0CD16                           
0CD16                           lvl_layout_13:
0CD16 10 E0                         .db #$10, #%11100000
0CD18 20 E0                         .db #$20, #%11100000
0CD1A 30 E0                         .db #$30, #%11100000
0CD1C 40 40                         .db #$40, #%01000000
0CD1E 80 60                         .db #$80, #%01100000
0CD20 C0 E0                         .db #$C0, #%11100000
0CD22 D0 E0                         .db #$D0, #%11100000
0CD24 41 40                         .db #$41, #%01000000
0CD26 71 60                         .db #$71, #%01100000
0CD28 52 60                         .db #$52, #%01100000
0CD2A A2 20                         .db #$A2, #%00100000
0CD2C 43 60                         .db #$43, #%01100000
0CD2E 83 60                         .db #$83, #%01100000
0CD30 14 74                         .db #$14, #%01110100
0CD32 54 74                         .db #$54, #%01110100
0CD34 94 74                         .db #$94, #%01110100
0CD36 D4 14                         .db #$D4, #%00010100
0CD38 15 0D                         .db #$15, #%00001101
0CD3A 55 0D                         .db #$55, #%00001101
0CD3C 95 0D                         .db #$95, #%00001101
0CD3E D5 0D                         .db #$D5, #%00001101
0CD40 26 0D                         .db #$26, #%00001101
0CD42 46 0D                         .db #$46, #%00001101
0CD44 66 0D                         .db #$66, #%00001101
0CD46 86 0D                         .db #$86, #%00001101
0CD48 A6 0D                         .db #$A6, #%00001101
0CD4A C6 0D                         .db #$C6, #%00001101
0CD4C 07 10                         .db #$07, #%00010000
0CD4E 37 0D                         .db #$37, #%00001101
0CD50 77 0D                         .db #$77, #%00001101
0CD52 B7 0D                         .db #$B7, #%00001101
0CD54 28 0D                         .db #$28, #%00001101
0CD56 48 0D                         .db #$48, #%00001101
0CD58 68 0D                         .db #$68, #%00001101
0CD5A 88 0D                         .db #$88, #%00001101
0CD5C A8 0D                         .db #$A8, #%00001101
0CD5E C8 0D                         .db #$C8, #%00001101
0CD60 19 0D                         .db #$19, #%00001101
0CD62 59 0D                         .db #$59, #%00001101
0CD64 99 0D                         .db #$99, #%00001101
0CD66 D9 0D                         .db #$D9, #%00001101
0CD68 FF                            .db #LEVEL_END
0CD69                           
0CD69                           lvl_layout_14:
0CD69 00 67                         .db #$00, #%01100111
0CD6B 40 67                         .db #$40, #%01100111
0CD6D 80 67                         .db #$80, #%01100111
0CD6F C0 27                         .db #$C0, #%00100111
0CD71 01 27                         .db #$01, #%00100111
0CD73 31 C7                         .db #$31, #%11000111
0CD75 51 C7                         .db #$51, #%11000111
0CD77 71 C7                         .db #$71, #%11000111
0CD79 91 C7                         .db #$91, #%11000111
0CD7B B1 C7                         .db #$B1, #%11000111
0CD7D D1 07                         .db #$D1, #%00000111
0CD7F 02 E7                         .db #$02, #%11100111
0CD81 06 E7                         .db #$06, #%11100111
0CD83 13 07                         .db #$13, #%00000111
0CD85 D3 07                         .db #$D3, #%00000111
0CD87 15 07                         .db #$15, #%00000111
0CD89 35 07                         .db #$35, #%00000111
0CD8B 55 07                         .db #$55, #%00000111
0CD8D 75 07                         .db #$75, #%00000111
0CD8F 95 07                         .db #$95, #%00000111
0CD91 B5 07                         .db #$B5, #%00000111
0CD93 D5 07                         .db #$D5, #%00000111
0CD95 17 07                         .db #$17, #%00000111
0CD97 37 C7                         .db #$37, #%11000111
0CD99 57 C7                         .db #$57, #%11000111
0CD9B 77 C7                         .db #$77, #%11000111
0CD9D 97 C7                         .db #$97, #%11000111
0CD9F B7 C7                         .db #$B7, #%11000111
0CDA1 D7 07                         .db #$D7, #%00000111
0CDA3 19 07                         .db #$19, #%00000111
0CDA5 D9 07                         .db #$D9, #%00000111
0CDA7 22 4C                         .db #$22, #%01001100
0CDA9 62 4C                         .db #$62, #%01001100
0CDAB A2 4C                         .db #$A2, #%01001100
0CDAD 24 0C                         .db #$24, #%00001100
0CDAF 44 0C                         .db #$44, #%00001100
0CDB1 64 0C                         .db #$64, #%00001100
0CDB3 84 0C                         .db #$84, #%00001100
0CDB5 A4 0C                         .db #$A4, #%00001100
0CDB7 C4 0C                         .db #$C4, #%00001100
0CDB9 26 0C                         .db #$26, #%00001100
0CDBB 46 0C                         .db #$46, #%00001100
0CDBD 66 0C                         .db #$66, #%00001100
0CDBF 86 0C                         .db #$86, #%00001100
0CDC1 A6 0C                         .db #$A6, #%00001100
0CDC3 C6 0C                         .db #$C6, #%00001100
0CDC5 28 4C                         .db #$28, #%01001100
0CDC7 68 4C                         .db #$68, #%01001100
0CDC9 A8 4C                         .db #$A8, #%01001100
0CDCB 32 04                         .db #$32, #%00000100
0CDCD 52 04                         .db #$52, #%00000100
0CDCF 72 04                         .db #$72, #%00000100
0CDD1 92 04                         .db #$92, #%00000100
0CDD3 B2 04                         .db #$B2, #%00000100
0CDD5 38 04                         .db #$38, #%00000100
0CDD7 58 04                         .db #$58, #%00000100
0CDD9 78 04                         .db #$78, #%00000100
0CDDB 98 04                         .db #$98, #%00000100
0CDDD B8 04                         .db #$B8, #%00000100
0CDDF FF                            .db #LEVEL_END
0CDE0                           
0CDE0                           lvl_layout_15:
0CDE0 00 7A                         .db #$00, #%01111010
0CDE2 40 7A                         .db #$40, #%01111010
0CDE4 80 7A                         .db #$80, #%01111010
0CDE6 C0 3A                         .db #$C0, #%00111010
0CDE8 31 04                         .db #$31, #%00000100
0CDEA 51 04                         .db #$51, #%00000100
0CDEC 81 04                         .db #$81, #%00000100
0CDEE A1 04                         .db #$A1, #%00000100
0CDF0 05 E4                         .db #$05, #%11100100
0CDF2 15 64                         .db #$15, #%01100100
0CDF4 55 64                         .db #$55, #%01100100
0CDF6 95 64                         .db #$95, #%01100100
0CDF8 D5 E4                         .db #$D5, #%11100100
0CDFA 26 04                         .db #$26, #%00000100
0CDFC 46 44                         .db #$46, #%01000100
0CDFE 76 64                         .db #$76, #%01100100
0CE00 C6 04                         .db #$C6, #%00000100
0CE02 17 04                         .db #$17, #%00000100
0CE04 37 64                         .db #$37, #%01100100
0CE06 77 44                         .db #$77, #%01000100
0CE08 B7 04                         .db #$B7, #%00000100
0CE0A 18 64                         .db #$18, #%01100100
0CE0C 58 64                         .db #$58, #%01100100
0CE0E 98 64                         .db #$98, #%01100100
0CE10 FF                            .db #LEVEL_END
0CE11                           
0CE11                           lvl_layout_16:
0CE11 10 E1                         .db #$10, #%11100001
0CE13 20 9A                         .db #$20, #%10011010
0CE15 30 E1                         .db #$30, #%11100001
0CE17 40 E1                         .db #$40, #%11100001
0CE19 50 E1                         .db #$50, #%11100001
0CE1B 60 C1                         .db #$60, #%11000001
0CE1D 70 E1                         .db #$70, #%11100001
0CE1F 80 E1                         .db #$80, #%11100001
0CE21 90 E1                         .db #$90, #%11100001
0CE23 A0 61                         .db #$A0, #%01100001
0CE25 21 C1                         .db #$21, #%11000001
0CE27 A1 1A                         .db #$A1, #%00011010
0CE29 B1 41                         .db #$B1, #%01000001
0CE2B A2 E1                         .db #$A2, #%11100001
0CE2D B2 E1                         .db #$B2, #%11100001
0CE2F C2 1A                         .db #$C2, #%00011010
0CE31 D2 E1                         .db #$D2, #%11100001
0CE33 63 1A                         .db #$63, #%00011010
0CE35 C3 C1                         .db #$C3, #%11000001
0CE37 14 61                         .db #$14, #%01100001
0CE39 54 61                         .db #$54, #%01100001
0CE3B 94 C1                         .db #$94, #%11000001
0CE3D 15 61                         .db #$15, #%01100001
0CE3F 55 41                         .db #$55, #%01000001
0CE41 85 1A                         .db #$85, #%00011010
0CE43 16 41                         .db #$16, #%01000001
0CE45 46 1A                         .db #$46, #%00011010
0CE47 56 61                         .db #$56, #%01100001
0CE49 A6 61                         .db #$A6, #%01100001
0CE4B 17 67                         .db #$17, #%01100111
0CE4D 57 67                         .db #$57, #%01100111
0CE4F 97 67                         .db #$97, #%01100111
0CE51 D7 07                         .db #$D7, #%00000111
0CE53 28 41                         .db #$28, #%01000001
0CE55 58 61                         .db #$58, #%01100001
0CE57 A8 41                         .db #$A8, #%01000001
0CE59 18 11                         .db #$18, #%00010001
0CE5B 38 11                         .db #$38, #%00010001
0CE5D 98 11                         .db #$98, #%00010001
0CE5F B8 11                         .db #$B8, #%00010001
0CE61 D8 11                         .db #$D8, #%00010001
0CE63 59 09                         .db #$59, #%00001001
0CE65 FF                            .db #LEVEL_END
0CE66                           
0CE66                           lvl_layout_17:
0CE66 10 EA                         .db #$10, #%11101010
0CE68 20 E2                         .db #$20, #%11100010
0CE6A 30 62                         .db #$30, #%01100010
0CE6C 70 02                         .db #$70, #%00000010
0CE6E 80 6A                         .db #$80, #%01101010
0CE70 90 22                         .db #$90, #%00100010
0CE72 01 AA                         .db #$01, #%10101010
0CE74 31 6A                         .db #$31, #%01101010
0CE76 81 2A                         .db #$81, #%00101010
0CE78 A1 02                         .db #$A1, #%00000010
0CE7A C1 02                         .db #$C1, #%00000010
0CE7C D1 0A                         .db #$D1, #%00001010
0CE7E 32 EA                         .db #$32, #%11101010
0CE80 42 6A                         .db #$42, #%01101010
0CE82 62 02                         .db #$62, #%00000010
0CE84 92 6A                         .db #$92, #%01101010
0CE86 D2 E2                         .db #$D2, #%11100010
0CE88 43 1A                         .db #$43, #%00011010
0CE8A 53 CA                         .db #$53, #%11001010
0CE8C 73 02                         .db #$73, #%00000010
0CE8E 83 4A                         .db #$83, #%01001010
0CE90 B3 CA                         .db #$B3, #%11001010
0CE92 C3 EA                         .db #$C3, #%11101010
0CE94 04 0A                         .db #$04, #%00001010
0CE96 14 A2                         .db #$14, #%10100010
0CE98 24 AA                         .db #$24, #%10101010
0CE9A 44 AA                         .db #$44, #%10101010
0CE9C 64 6A                         .db #$64, #%01101010
0CE9E 65 6A                         .db #$65, #%01101010
0CEA0 A5 AA                         .db #$A5, #%10101010
0CEA2 06 EA                         .db #$06, #%11101010
0CEA4 16 62                         .db #$16, #%01100010
0CEA6 66 22                         .db #$66, #%00100010
0CEA8 86 2A                         .db #$86, #%00101010
0CEAA 17 42                         .db #$17, #%01000010
0CEAC 47 12                         .db #$47, #%00010010
0CEAE 57 6A                         .db #$57, #%01101010
0CEB0 97 4A                         .db #$97, #%01001010
0CEB2 A7 02                         .db #$A7, #%00000010
0CEB4 18 02                         .db #$18, #%00000010
0CEB6 28 0A                         .db #$28, #%00001010
0CEB8 38 22                         .db #$38, #%00100010
0CEBA 68 2A                         .db #$68, #%00101010
0CEBC 88 62                         .db #$88, #%01100010
0CEBE C8 0A                         .db #$C8, #%00001010
0CEC0 D8 02                         .db #$D8, #%00000010
0CEC2 19 2A                         .db #$19, #%00101010
0CEC4 39 2A                         .db #$39, #%00101010
0CEC6 69 42                         .db #$69, #%01000010
0CEC8 99 2A                         .db #$99, #%00101010
0CECA B9 42                         .db #$B9, #%01000010
0CECC FF                            .db #LEVEL_END
0CECD                           
0CECD                           lvl_layout_18:
0CECD 00 12                         .db #$00, #%00010010
0CECF 40 1A                         .db #$40, #%00011010
0CED1 50 11                         .db #$50, #%00010001
0CED3 70 1A                         .db #$70, #%00011010
0CED5 80 10                         .db #$80, #%00010000
0CED7 D0 13                         .db #$D0, #%00010011
0CED9 01 1A                         .db #$01, #%00011010
0CEDB 22 15                         .db #$22, #%00010101
0CEDD A2 1A                         .db #$A2, #%00011010
0CEDF B2 14                         .db #$B2, #%00010100
0CEE1 03 67                         .db #$03, #%01100111
0CEE3 43 67                         .db #$43, #%01100111
0CEE5 83 67                         .db #$83, #%01100111
0CEE7 24 09                         .db #$24, #%00001001
0CEE9 74 0D                         .db #$74, #%00001101
0CEEB C4 0A                         .db #$C4, #%00001010
0CEED 05 A7                         .db #$05, #%10100111
0CEEF 45 27                         .db #$45, #%00100111
0CEF1 95 27                         .db #$95, #%00100111
0CEF3 16 C7                         .db #$16, #%11000111
0CEF5 36 67                         .db #$36, #%01100111
0CEF7 86 67                         .db #$86, #%01100111
0CEF9 D6 07                         .db #$D6, #%00000111
0CEFB 07 A3                         .db #$07, #%10100011
0CEFD 27 23                         .db #$27, #%00100011
0CEFF 47 C7                         .db #$47, #%11000111
0CF01 57 A0                         .db #$57, #%10100000
0CF03 67 A7                         .db #$67, #%10100111
0CF05 77 20                         .db #$77, #%00100000
0CF07 97 C7                         .db #$97, #%11000111
0CF09 A7 A4                         .db #$A7, #%10100100
0CF0B B7 A7                         .db #$B7, #%10100111
0CF0D C7 24                         .db #$C7, #%00100100
0CF0F 28 0B                         .db #$28, #%00001011
0CF11 38 A3                         .db #$38, #%10100011
0CF13 78 08                         .db #$78, #%00001000
0CF15 88 A3                         .db #$88, #%10100011
0CF17 C8 0C                         .db #$C8, #%00001100
0CF19 D8 A4                         .db #$D8, #%10100100
0CF1B 09 43                         .db #$09, #%01000011
0CF1D 59 40                         .db #$59, #%01000000
0CF1F A9 44                         .db #$A9, #%01000100
0CF21 FF                            .db #LEVEL_END
0CF22                           
0CF22                           lvl_layout_19:
0CF22 11 A8                         .db #$11, #%10101000
0CF24 21 68                         .db #$21, #%01101000
0CF26 81 28                         .db #$81, #%00101000
0CF28 B1 48                         .db #$B1, #%01001000
0CF2A 22 48                         .db #$22, #%01001000
0CF2C 62 68                         .db #$62, #%01101000
0CF2E B2 28                         .db #$B2, #%00101000
0CF30 23 28                         .db #$23, #%00101000
0CF32 83 28                         .db #$83, #%00101000
0CF34 B3 28                         .db #$B3, #%00101000
0CF36 04 E8                         .db #$04, #%11101000
0CF38 24 08                         .db #$24, #%00001000
0CF3A 44 08                         .db #$44, #%00001000
0CF3C 64 E8                         .db #$64, #%11101000
0CF3E 84 E8                         .db #$84, #%11101000
0CF40 C4 A8                         .db #$C4, #%10101000
0CF42 D4 E8                         .db #$D4, #%11101000
0CF44 15 48                         .db #$15, #%01001000
0CF46 55 C8                         .db #$55, #%11001000
0CF48 75 C8                         .db #$75, #%11001000
0CF4A A5 08                         .db #$A5, #%00001000
0CF4C 36 08                         .db #$36, #%00001000
0CF4E B6 08                         .db #$B6, #%00001000
0CF50 27 48                         .db #$27, #%01001000
0CF52 97 28                         .db #$97, #%00101000
0CF54 C7 08                         .db #$C7, #%00001000
0CF56 09 61                         .db #$09, #%01100001
0CF58 19 11                         .db #$19, #%00010001
0CF5A 49 61                         .db #$49, #%01100001
0CF5C 89 31                         .db #$89, #%00110001
0CF5E A9 61                         .db #$A9, #%01100001
0CF60 FF                            .db #LEVEL_END
0CF61                           
0CF61                           lvl_layout_20:
0CF61 00 60                         .db #$00, #%01100000
0CF63 10 1A                         .db #$10, #%00011010
0CF65 40 A7                         .db #$40, #%10100111
0CF67 50 20                         .db #$50, #%00100000
0CF69 70 1A                         .db #$70, #%00011010
0CF6B 80 40                         .db #$80, #%01000000
0CF6D B0 1A                         .db #$B0, #%00011010
0CF6F C0 20                         .db #$C0, #%00100000
0CF71 01 40                         .db #$01, #%01000000
0CF73 31 1A                         .db #$31, #%00011010
0CF75 A1 40                         .db #$A1, #%01000000
0CF77 D1 1A                         .db #$D1, #%00011010
0CF79 43 67                         .db #$43, #%01100111
0CF7B 83 47                         .db #$83, #%01000111
0CF7D 44 A7                         .db #$44, #%10100111
0CF7F 54 25                         .db #$54, #%00100101
0CF81 94 08                         .db #$94, #%00001000
0CF83 A4 A7                         .db #$A4, #%10100111
0CF85 55 05                         .db #$55, #%00000101
0CF87 65 08                         .db #$65, #%00001000
0CF89 06 27                         .db #$06, #%00100111
0CF8B 36 67                         .db #$36, #%01100111
0CF8D 76 28                         .db #$76, #%00101000
0CF8F A6 27                         .db #$A6, #%00100111
0CF91 D6 07                         .db #$D6, #%00000111
0CF93 A7 A7                         .db #$A7, #%10100111
0CF95 08 60                         .db #$08, #%01100000
0CF97 09 60                         .db #$09, #%01100000
0CF99 18 A7                         .db #$18, #%10100111
0CF9B 48 A7                         .db #$48, #%10100111
0CF9D 58 47                         .db #$58, #%01000111
0CF9F 88 27                         .db #$88, #%00100111
0CFA1 B8 20                         .db #$B8, #%00100000
0CFA3 D8 1A                         .db #$D8, #%00011010
0CFA5 59 15                         .db #$59, #%00010101
0CFA7 69 60                         .db #$69, #%01100000
0CFA9 A9 60                         .db #$A9, #%01100000
0CFAB FF                            .db #LEVEL_END
0CFAC                           
0CFAC                           lvl_layout_21:
0CFAC 00 13                         .db #$00, #%00010011
0CFAE 10 11                         .db #$10, #%00010001
0CFB0 20 67                         .db #$20, #%01100111
0CFB2 60 67                         .db #$60, #%01100111
0CFB4 A0 47                         .db #$A0, #%01000111
0CFB6 D0 15                         .db #$D0, #%00010101
0CFB8 32 63                         .db #$32, #%01100011
0CFBA 72 05                         .db #$72, #%00000101
0CFBC 82 43                         .db #$82, #%01000011
0CFBE B2 43                         .db #$B2, #%01000011
0CFC0 33 03                         .db #$33, #%00000011
0CFC2 43 2A                         .db #$43, #%00101010
0CFC4 63 7A                         .db #$63, #%01111010
0CFC6 73 2A                         .db #$73, #%00101010
0CFC8 A3 7A                         .db #$A3, #%01111010
0CFCA 34 63                         .db #$34, #%01100011
0CFCC 74 63                         .db #$74, #%01100011
0CFCE B4 43                         .db #$B4, #%01000011
0CFD0 06 63                         .db #$06, #%01100011
0CFD2 46 63                         .db #$46, #%01100011
0CFD4 86 63                         .db #$86, #%01100011
0CFD6 C6 C3                         .db #$C6, #%11000011
0CFD8 07 7A                         .db #$07, #%01111010
0CFDA 47 7A                         .db #$47, #%01111010
0CFDC 67 0A                         .db #$67, #%00001010
0CFDE 87 7A                         .db #$87, #%01111010
0CFE0 08 13                         .db #$08, #%00010011
0CFE2 18 43                         .db #$18, #%01000011
0CFE4 48 63                         .db #$48, #%01100011
0CFE6 88 63                         .db #$88, #%01100011
0CFE8 FF                            .db #LEVEL_END
0CFE9                           
0CFE9                           lvl_layout_22:
0CFE9 00 7A                         .db #$00, #%01111010
0CFEB 40 7A                         .db #$40, #%01111010
0CFED 80 7A                         .db #$80, #%01111010
0CFEF C0 3A                         .db #$C0, #%00111010
0CFF1 13 67                         .db #$13, #%01100111
0CFF3 83 A7                         .db #$83, #%10100111
0CFF5 B3 07                         .db #$B3, #%00000111
0CFF7 14 07                         .db #$14, #%00000111
0CFF9 44 07                         .db #$44, #%00000111
0CFFB A4 07                         .db #$A4, #%00000111
0CFFD 15 A5                         .db #$15, #%10100101
0CFFF 45 A5                         .db #$45, #%10100101
0D001 85 25                         .db #$85, #%00100101
0D003 86 05                         .db #$86, #%00000101
0D005 A6 05                         .db #$A6, #%00000101
0D007 17 11                         .db #$17, #%00010001
0D009 47 A1                         .db #$47, #%10100001
0D00B 87 A1                         .db #$87, #%10100001
0D00D B7 A1                         .db #$B7, #%10100001
0D00F 18 41                         .db #$18, #%01000001
0D011 68 01                         .db #$68, #%00000001
0D013 D8 01                         .db #$D8, #%00000001
0D015 FF                            .db #LEVEL_END
0D016                           
0D016                           lvl_layout_23:
0D016 00 71                         .db #$00, #%01110001
0D018 40 11                         .db #$40, #%00010001
0D01A 50 43                         .db #$50, #%01000011
0D01C 80 D1                         .db #$80, #%11010001
0D01E 90 E3                         .db #$90, #%11100011
0D020 A0 63                         .db #$A0, #%01100011
0D022 01 63                         .db #$01, #%01100011
0D024 41 63                         .db #$41, #%01100011
0D026 A1 63                         .db #$A1, #%01100011
0D028 02 63                         .db #$02, #%01100011
0D02A 42 63                         .db #$42, #%01100011
0D02C 62 11                         .db #$62, #%00010001
0D02E A2 67                         .db #$A2, #%01100111
0D030 04 63                         .db #$04, #%01100011
0D032 44 23                         .db #$44, #%00100011
0D034 64 D1                         .db #$64, #%11010001
0D036 74 E3                         .db #$74, #%11100011
0D038 84 F1                         .db #$84, #%11110001
0D03A 94 E3                         .db #$94, #%11100011
0D03C A4 C7                         .db #$A4, #%11000111
0D03E B4 23                         .db #$B4, #%00100011
0D040 05 63                         .db #$05, #%01100011
0D042 45 23                         .db #$45, #%00100011
0D044 06 71                         .db #$06, #%01110001
0D046 46 11                         .db #$46, #%00010001
0D048 56 E3                         .db #$56, #%11100011
0D04A D6 07                         .db #$D6, #%00000111
0D04C 17 D1                         .db #$17, #%11010001
0D04E 27 43                         .db #$27, #%01000011
0D050 67 D1                         .db #$67, #%11010001
0D052 A7 C7                         .db #$A7, #%11000111
0D054 C7 A7                         .db #$C7, #%10100111
0D056 D7 B3                         .db #$D7, #%10110011
0D058 28 43                         .db #$28, #%01000011
0D05A 78 43                         .db #$78, #%01000011
0D05C 29 43                         .db #$29, #%01000011
0D05E 79 43                         .db #$79, #%01000011
0D060 FF                           .db #LEVEL_END
0D061                           
0D061                           lvl_layout_24:
0D061 02 67                         .db #$02, #%01100111
0D063 42 67                         .db #$42, #%01100111
0D065 82 67                         .db #$82, #%01100111
0D067 05 67                         .db #$05, #%01100111
0D069 45 67                         .db #$45, #%01100111
0D06B 85 67                         .db #$85, #%01100111
0D06D 08 67                         .db #$08, #%01100111
0D06F 48 67                         .db #$48, #%01100111
0D071 88 67                         .db #$88, #%01100111
0D073 30 E7                         .db #$30, #%11100111
0D075 70 E7                         .db #$70, #%11100111
0D077 B0 E7                         .db #$B0, #%11100111
0D079 34 E7                         .db #$34, #%11100111
0D07B 74 E7                         .db #$74, #%11100111
0D07D B4 E7                         .db #$B4, #%11100111
0D07F 20 13                         .db #$20, #%00010011
0D081 40 10                         .db #$40, #%00010000
0D083 80 02                         .db #$80, #%00000010
0D085 41 05                         .db #$41, #%00000101
0D087 B1 09                         .db #$B1, #%00001001
0D089 02 09                         .db #$02, #%00001001
0D08B 52 0C                         .db #$52, #%00001100
0D08D 13 11                         .db #$13, #%00010001
0D08F 33 04                         .db #$33, #%00000100
0D091 74 0C                         .db #$74, #%00001100
0D093 B4 08                         .db #$B4, #%00001000
0D095 15 09                         .db #$15, #%00001001
0D097 55 0C                         .db #$55, #%00001100
0D099 95 0C                         .db #$95, #%00001100
0D09B 47 03                         .db #$47, #%00000011
0D09D A7 12                         .db #$A7, #%00010010
0D09F 18 15                         .db #$18, #%00010101
0D0A1 09 05                         .db #$09, #%00000101
0D0A3 19 03                         .db #$19, #%00000011
0D0A5 FF                            .db #LEVEL_END
0D0A6                           
0D0A6                           lvl_layout_25:
0D0A6 00 12                         .db #$00, #%00010010
0D0A8 10 63                         .db #$10, #%01100011
0D0AA 60 63                         .db #$60, #%01100011
0D0AC A0 07                         .db #$A0, #%00000111
0D0AE 01 11                         .db #$01, #%00010001
0D0B0 A1 02                         .db #$A1, #%00000010
0D0B2 02 67                         .db #$02, #%01100111
0D0B4 42 07                         .db #$42, #%00000111
0D0B6 62 67                         .db #$62, #%01100111
0D0B8 A2 C7                         .db #$A2, #%11000111
0D0BA 03 61                         .db #$03, #%01100001
0D0BC 43 01                         .db #$43, #%00000001
0D0BE 63 61                         .db #$63, #%01100001
0D0C0 A6 E7                         .db #$A6, #%11100111
0D0C2 B6 47                         .db #$B6, #%01000111
0D0C4 C6 01                         .db #$C6, #%00000001
0D0C6 B7 42                         .db #$B7, #%01000010
0D0C8 B8 42                         .db #$B8, #%01000010
0D0CA C8 0A                         .db #$C8, #%00001010
0D0CC 09 7A                         .db #$09, #%01111010
0D0CE 49 7A                         .db #$49, #%01111010
0D0D0 89 3A                         .db #$89, #%00111010
0D0D2 B9 42                         .db #$B9, #%01000010
0D0D4 FF                            .db #LEVEL_END
0D0D5                           
0D0D5                           ;; Level layout address pointers
0D0D5                           tbl_lvl_layout_hi:
0D0D5 C9 CA CA CA CA                .db >#lvl_layout_01, >#lvl_layout_02, >#lvl_layout_03, >#lvl_layout_04, >#lvl_layout_05
0D0DA CB CB CB CC CC                .db >#lvl_layout_06, >#lvl_layout_07, >#lvl_layout_08, >#lvl_layout_09, >#lvl_layout_10
0D0DF CC CC CD CD CD                .db >#lvl_layout_11, >#lvl_layout_12, >#lvl_layout_13, >#lvl_layout_14, >#lvl_layout_15
0D0E4 CE CE CE CF CF                .db >#lvl_layout_16, >#lvl_layout_17, >#lvl_layout_18, >#lvl_layout_19, >#lvl_layout_20
0D0E9 CF CF D0 D0 D0                .db >#lvl_layout_21, >#lvl_layout_22, >#lvl_layout_23, >#lvl_layout_24, >#lvl_layout_25
0D0EE                           
0D0EE                           tbl_lvl_layout_lo:
0D0EE F6 11 46 79 EA                .db <#lvl_layout_01, <#lvl_layout_02, <#lvl_layout_03, <#lvl_layout_04, <#lvl_layout_05
0D0F3 25 AE EF 26 69                .db <#lvl_layout_06, <#lvl_layout_07, <#lvl_layout_08, <#lvl_layout_09, <#lvl_layout_10
0D0F8 98 EB 16 69 E0                .db <#lvl_layout_11, <#lvl_layout_12, <#lvl_layout_13, <#lvl_layout_14, <#lvl_layout_15
0D0FD 11 66 CD 22 61                .db <#lvl_layout_16, <#lvl_layout_17, <#lvl_layout_18, <#lvl_layout_19, <#lvl_layout_20
0D102 AC E9 16 61 A6                .db <#lvl_layout_21, <#lvl_layout_22, <#lvl_layout_23, <#lvl_layout_24, <#lvl_layout_25
0D107                           
0D107                           ;; Ball start position (#$YX)
0D107                           tbl_lvl_ball_startpos:
0D107 9B 10 21 9B 11                .db #$9B, #$10, #$21, #$9B, #$11
0D10C 81 89 47 1C 20                .db #$81, #$89, #$47, #$1C, #$20
0D111 77 20 7D 6B 28                .db #$77, #$20, #$7D, #$6B, #$28
0D116 9D 36 1B 01 59                .db #$9D, #$36, #$1B, #$01, #$59
0D11B 90 47 9C 34 18                .db #$90, #$47, #$9C, #$34, #$18
0D120                               
0D120                           ;; Ball start direction, color and tile score
0D120                           ;; #% ccc v tttt
0D120                           ;;    ||| | ++++-- tile score
0D120                           ;;    ||| +------- vertical direction, up (0) or down
0D120                           ;;    +++--------- color (CBRYGM)
0D120                           tbl_lvl_ball_init:
0D120 30 30 30 20 50                .db #%00110000, #%00110000, #%00110000, #%00100000, #%01010000
0D125 70 50 B0 80 50                .db #%01110000, #%01010000, #%10110000, #%10000000, #%01010000
0D12A 50 50 A0 90 90                .db #%01010000, #%01010000, #%10100000, #%10010000, #%10010000
0D12F 20 50 80 10 10                .db #%00100000, #%01010000, #%10000000, #%00010000, #%00010000
0D134 60 B0 20 90 60                .db #%01100000, #%10110000, #%00100000, #%10010000, #%01100000
0D139                           
0D139                           
0D139                           
0D139                           ;; Helper table to multiply values by 64
0D139                           tbl_Times64:
0D139 00 40 80 C0                   .db #$00, #$40, #$80, #$C0
0D13D                           
0D13D                           
0D13D                           ;; Metatile ID to CHR data mapper
0D13D                           tbl_GametileTopLeft:
0D13D 40 42 46 44 38 48 4A 4E..     .db #$40, #$42, #$46, #$44, #$38, #$48, #$4A, #$4E, #$4C, #$38
0D147                           
0D147                           tbl_GametileTopRight:
0D147 41 43 47 45 38 49 4B 4F..     .db #$41, #$43, #$47, #$45, #$38, #$49, #$4B, #$4F, #$4D, #$38
0D151                           
0D151                           tbl_GametileBottomLeft:
0D151 50 52 56 54 38 58 5A 5E..     .db #$50, #$52, #$56, #$54, #$38, #$58, #$5A, #$5E, #$5C, #$38
0D15B                           
0D15B                           tbl_GametileBottomRight:
0D15B 51 53 57 55 38 59 5B 5F..     .db #$51, #$53, #$57, #$55, #$38, #$59, #$5B, #$5F, #$5D, #$38
0D165                           
0D165                           ;; Metatile ID to RAM byte data mapper
0D165                           tbl_GameTileRamByte:
0D165 40 20 10 08 00                .db #%01000000, #%00100000, #%00010000, #%00001000, #%00000000
0D16A                           
0D16A                           ;; HUD text data
0D16A                           tbl_HudText:
0D16A 1D 0D 19 1C 0F 00 00 00       .db #_S, #_C, #_O, #_R, #_E, #_SPACE, #_SPACE, #_SPACE
0D172 16 0F 20 0F 16 00 00          .db #_L, #_E, #_V, #_E, #_L, #_SPACE, #_SPACE
0D179 16 13 20 0F 1D 00 00 00       .db #_L, #_I, #_V, #_E, #_S, #_SPACE, #_SPACE, #_SPACE
0D181 0C 19 18 1F 1D                .db #_B, #_O, #_N, #_U, #_S0D186                           
0D186                           ;; NMI handler
0D186                           NMI:
0D186                               .include "interrupt/nmi.asm"
0D186                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0D186                           ;;
0D186                           ;; include/nmi.asm
0D186                           ;;
0D186                           ;; Non-maskable interrupt script. This script is being executed
0D186                           ;; when vBlank hits.
0D186                           ;;
0D186                           ;;
0D186                           
0D186                               ;; Preserve accumulator through stack
0D186 48                            PHA
0D187                           
0D187                               ;; Should NMI be skipped?
0D187 A5 13                         LDA skip_nmi
0D189 F0 03                         BEQ +
0D18B 4C 19 D2                          JMP +skip_nmi
0D18E                               +
0D18E                           
0D18E                               ;; When in NMI, skip additional NMI requests
0D18E A9 01                         LDA #$01
0D190 85 13                         STA skip_nmi
0D192                           
0D192                               ;; Preserve X, Y, and PC through stack
0D192 8A                            TXA
0D193 48                            PHA
0D194 98                            TYA
0D195 48                            PHA
0D196 08                            PHP
0D197                               
0D197                               ;; Check forced NMI skip
0D197 A5 14                         LDA force_skip_nmi
0D199 F0 03                         BEQ +
0D19B 4C 0A D2                          JMP +force_skip_nmi
0D19E                               +
0D19E                           
0D19E                               ;; Update PPU mask
0D19E                               ;LDA #$00
0D19E                               ;STA PPU_CTRL
0D19E A5 12                         LDA soft_ppu_mask
0D1A0 8D 01 20                      STA PPU_MASK
0D1A3                               
0D1A3                               
0D1A3                               ;; Additional PPU updates go here
0D1A3                               .include "game/test/tile_update_nmi.asm"
0D1A3                           
0D1A3                               ;; Check if ppu_buffer needs updating
0D1A3 A5 2F                         LDA ppu_buffer_update
0D1A5 D0 03                         BNE +
0D1A7 4C E9 D1                          JMP +no_ppu_buffer_update
0D1AA                               +
0D1AA                           
0D1AA                               ;; Reset ppu control register and mask
0D1AA A2 00                         LDX #$00
0D1AC 8E 00 20                      STX PPU_CTRL
0D1AF 8E 01 20                      STX PPU_MASK
0D1B2                           
0D1B2                               ;; Set up loop
0D1B2                               -
0D1B2                                   ;; Reset hi/lo latch
0D1B2 2C 02 20                          BIT PPU_STATUS
0D1B5                           
0D1B5                                   ;; Write ppu_buffer hi and lo addresss to PPU_ADDR
0D1B5 BD 00 03                          LDA ppu_buffer,x
0D1B8 8D 06 20                          STA PPU_ADDR
0D1BB E8                                INX
0D1BC BD 00 03                          LDA ppu_buffer,x
0D1BF 8D 06 20                          STA PPU_ADDR
0D1C2                           
0D1C2                                   ;; Write ppu_buffer data to PPU_ADDR
0D1C2 E8                                INX
0D1C3 BD 00 03                          LDA ppu_buffer,x
0D1C6 8D 07 20                          STA PPU_DATA
0D1C9                           
0D1C9                                   ;; Check if updating is done (eg. X is at pointer)
0D1C9 E8                                INX
0D1CA E4 30                             CPX ppu_buffer_pointer
0D1CC F0 03                             BEQ +
0D1CE 4C B2 D1                      JMP -
0D1D1                           +
0D1D1                           
0D1D1                               ;; Reset ppu buffer update and pointer
0D1D1 A9 00                         LDA #$00
0D1D3 85 2F                         STA ppu_buffer_update
0D1D5 85 30                         STA ppu_buffer_pointer
0D1D7                               
0D1D7                               ;; Reset scrolling position
0D1D7 8D 05 20                      STA PPU_SCROLL
0D1DA 8D 05 20                      STA PPU_SCROLL
0D1DD                           
0D1DD                               ;; Restore ppu control register and mask
0D1DD A9 90                         LDA #%10010000
0D1DF 8D 00 20                      STA PPU_CTRL
0D1E2 A5 12                         LDA soft_ppu_mask
0D1E4 8D 01 20                      STA PPU_MASK
0D1E7 A9 00                         LDA #$00
0D1E9                           
0D1E9                           ;; Continue other NMI stuff
0D1E9                           +no_ppu_buffer_update:
0D1E9                               .include "game/test/show_animation_nmi.asm"
0D1E9                               ;; Reset sprite RAM, draw sprites
0D1E9 8D 03 20                      STA OAM_ADDR
0D1EC A9 02                         LDA #$02
0D1EE 8D 14 40                      STA OAM_DMA
0D1F1                           
0D1F1 A0 04                         LDY #MAX_ANIMATIONS
0D1F3 A2 00                         LDX #$00
0D1F5                               -
0D1F5 BD 30 03                          LDA explosion_framecounter,x
0D1F8 F0 03                             BEQ +
0D1FA DE 30 03                              DEC explosion_framecounter,x
0D1FD                                   +
0D1FD E8                                INX
0D1FE 88                                DEY
0D1FF F0 03                             BEQ +done        
0D201 4C F5 D1                      JMP -
0D204                           +done:
0D204                               
0D204 A5 33                         LDA nudge_counter
0D206 F0 02                         BEQ +
0D208 C6 33                             DEC nudge_counter
0D20A                               +
0D20A                           
0D20A                           ;; This is what happens when we forced nmi skip
0D20A                           +force_skip_nmi:
0D20A                           
0D20A                               ;; Increase frame counters
0D20A E6 15                         INC frame_counter
0D20C                           
0D20C                               ;; reset ball_update_position
0D20C A9 00                         LDA #$00
0D20E 85 2B                         STA ball_update_position
0D210                           
0D210                               ;; Don't skip next NMI request
0D210 A9 00                         LDA #$00
0D212 85 13                         STA skip_nmi
0D214                           
0D214                               ;; Restore X, Y and PC from stack
0D214 28                            PLP
0D215 68                            PLA
0D216 A8                            TAY
0D217 68                            PLA
0D218 AA                            TAX
0D219                           
0D219                           +skip_nmi:
0D219                               ;; Restore accumulator from stack
0D219 68                            PLA
0D21A                           
0D21A                               ;; Return
0D21A 40                            RTI
0D21B                           
0D21B                           ;; IRQ handler (empty)
0D21B                           IRQ:
0D21B                               .include "interrupt/irq.asm"
0D21B 40                            RTI0D21C                           
0D21C                           ;; Interrupt vectors
0D21C 00 00 00 00 00 00 00 00.. .org ADDR_VECTORS
0FFFA 86 D1                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 1B D2                         .dw IRQ
10000                           
10000                           ;; CHR data (if any)
10000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/sprites.chr"
11000 00 00 00 00 00 00 00 00.. .incbin "game/graphics/backgrounds.chr"
